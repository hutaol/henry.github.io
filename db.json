{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"17ca0b76114fe69d63556f398d0687bfa00d5e15","modified":1562565988759},{"_id":"source/.DS_Store","hash":"2c1e694ed033517be89cec01f5f5efbeb3bb25ce","modified":1571895941141},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1562566494210},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1562566494210},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1562566494210},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1562566494210},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1562566494210},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1562566494210},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1562566494210},{"_id":"themes/yilia/_config.yml","hash":"2a14969d9d10ffb41dae49ac4772e19abaec3505","modified":1562901973498},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1562566494219},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1562566494239},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1571895946690},{"_id":"source/_posts/Linux命令.md","hash":"310749555068cdad0c66efd5e8eca2e4aeffc4ca","modified":1562565988760},{"_id":"source/_posts/Node-js创建应用.md","hash":"4e484eb66b9db7797c38ecc6810e44e806565d55","modified":1562565988760},{"_id":"source/_posts/Shell学习笔记.md","hash":"269e9de018e931c91ff5cf1f6220c293d17d230d","modified":1562565988760},{"_id":"source/_posts/git.md","hash":"10df5a4e07989c31e4dce9dbef7af012fb71876c","modified":1570325024282},{"_id":"source/_posts/javascript.md","hash":"ac9f44188287efd4779ce87e9b19f411a5e20a59","modified":1562565988761},{"_id":"source/_posts/js-string-method.md","hash":"23aeff68113a37bfbd4c61a5f646261a1659505a","modified":1562565988761},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1562566494201},{"_id":"source/categories/index.md","hash":"54d2947d9d7d3e1d9e73e7f1e43127378614237b","modified":1562565988763},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1562566494203},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1562566368256},{"_id":"themes/yilia/.git/index","hash":"deb9b4665075ffdfacca663a400796756d310ebb","modified":1586494365165},{"_id":"themes/yilia/.git/packed-refs","hash":"76b1aa9479dd3de329935b6d94a6624c5f716d23","modified":1562566494197},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1562566494211},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1562566494211},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1562566494211},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1562566494211},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1562566494211},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1562566494211},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1562566494211},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1562566494236},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1562566494238},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1562566494218},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1562566494218},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1562566494218},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1562566494219},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1562566494218},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1562566494219},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1562566494219},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1562566494220},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1562566494233},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1562566494237},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1562566494237},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562566494216},{"_id":"source/_posts/CocoaPods/CocoaPods创建公有Pod库.md","hash":"53b315713c5f2c9c0aaacab630e1ae2f948e6105","modified":1562565988760},{"_id":"source/_posts/Android/Android开发环境搭建.md","hash":"b2c253a37ccc19b5e0294a18e8e49996bbf469b5","modified":1584957710790},{"_id":"source/_posts/Android/Android三方库.md","hash":"2afa649f8c9592956a50384c0a02014d507ddd53","modified":1571392874987},{"_id":"source/_posts/CocoaPods/CocoaPods安装及简单使用.md","hash":"e6b46c97da28f2661d8da86b792989815e29de76","modified":1562898336529},{"_id":"source/_posts/Unix/Linux系统权限.md","hash":"4b57169228e375d91f6de28e1f062846d734f14d","modified":1562565988761},{"_id":"source/_posts/iOS/Mac命令.md","hash":"d76612398a160f9f7276168e75d3e56fbe3a49a1","modified":1565329986089},{"_id":"source/_posts/iOS/OC-Keywords.md","hash":"67567c7893bae36b3535d7266445367d8796c43f","modified":1565329952956},{"_id":"source/_posts/apache/apache.md","hash":"f214c8783e149dc666342912660c967007f0546a","modified":1574410195418},{"_id":"source/_posts/iOS/OC-Property.md","hash":"e3073cf033721632a60f15cb7aa7bf433e598746","modified":1565329961115},{"_id":"source/_posts/iOS/Xcode工具.md","hash":"78e3444be98bcf228a88cfd7009b9f20ff3f64bb","modified":1565329976746},{"_id":"source/_posts/iOS/Xcode自定义代码块.md","hash":"ad3b719f34bc1db8022f1e1320582407a201a3fe","modified":1565329976746},{"_id":"source/_posts/iOS/iOS持久化方式.md","hash":"2c5e264601a2fff19173c5be67187a921b0bb844","modified":1565329943911},{"_id":"source/_posts/other/解决GitHub下载速度缓慢.md","hash":"6eb3f9e453d70a782c9ebfc4287016c9668f3976","modified":1562565988762},{"_id":"source/_posts/php/PHP管理工具Composer.md","hash":"4c863e45f2d0da04ea168ac1e56a77f6c1760be8","modified":1562565988762},{"_id":"source/_posts/mysql/mysql.md","hash":"84562ed46892fcfd94b4555091fb2977fc946dcf","modified":1562565988762},{"_id":"source/_posts/tools/Mac工具.md","hash":"fd5877b241d0863cfbd7b74298882254a4e490b5","modified":1562565988762},{"_id":"source/_posts/python/CentOS6安装Python3环境.md","hash":"08464d5d22d556158c2d0df1f55b5e13b9c02037","modified":1565596739617},{"_id":"source/_posts/vim/vim配置及插件安装.md","hash":"eeb6cc3995c632d7601cf8611a84dfb225b27474","modified":1562724445485},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1562566368257},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1562566368257},{"_id":"themes/yilia/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1562566368258},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1562566368259},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1562566368259},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1562566368257},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1562566368260},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1562566368257},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1562566368258},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1562566368259},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1562566368260},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1562566368255},{"_id":"themes/yilia/.git/logs/HEAD","hash":"2a5d2665264db9a8de63acff4236ebe30c908910","modified":1562566494202},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1562566494233},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1562566494234},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1562566494233},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1562566494234},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1562566494235},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1562566494235},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1562566494234},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1562566494235},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1562566494235},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1562566494212},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1562566494212},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1562566494212},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1562566494212},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1562566494212},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1562566494212},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1562566494212},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1562566494212},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1562566494212},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1562566494213},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1562566494213},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1562566494213},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1562566494213},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1562566494213},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1562566494217},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1562566494218},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1562566494220},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1562566494220},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1562566494220},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1562566494220},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1562566494221},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1562566494221},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1562566494221},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1562566494222},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1562566494221},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1562566494223},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1562566494226},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1562566494226},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1562566494226},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1562566494228},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1562566494227},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1562566494228},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1562566494228},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1562566494228},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1562566494228},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1562566494229},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1562566494229},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1562566494229},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1562566494229},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1562566494229},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1562566494230},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1562566494230},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1562566494230},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1562566494231},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1562566494231},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1562566494231},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1562566494231},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1562566494231},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1562566494231},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1562566494232},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1562566494232},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1562566494232},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1562566494232},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1562566494232},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1562566494233},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1562566494216},{"_id":"source/_posts/php/laraval/Laravel基础学习.md","hash":"47631f3035aec9af35455427ace96b492737cda2","modified":1584980550832},{"_id":"source/_posts/php/thinkphp5/初学thinkphp5.md","hash":"1e0d98932a0b27b803fd216e03370c7908610701","modified":1584957577365},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1562566494202},{"_id":"themes/yilia/.git/objects/pack/pack-e5d7761fab84874751815dbdef3619cf3da9b9fd.idx","hash":"4d557437783ee968e2d310bdd651d2e4792d941b","modified":1562566494175},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1562566494213},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1562566494213},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1562566494213},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1562566494213},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1562566494214},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1562566494213},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1562566494214},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1562566494214},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1562566494214},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1562566494214},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1562566494222},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1562566494222},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1562566494223},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1562566494222},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1562566494223},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1562566494224},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1562566494225},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1562566494226},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1562566494226},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1562566494227},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1562566494227},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1562566494227},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"2a5d2665264db9a8de63acff4236ebe30c908910","modified":1562566494203},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1562566494201},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"2a5d2665264db9a8de63acff4236ebe30c908910","modified":1562566494201},{"_id":"themes/yilia/.git/objects/pack/pack-e5d7761fab84874751815dbdef3619cf3da9b9fd.pack","hash":"8c55169c5cd8899a30172cdcfdcfdf5a8cd91aef","modified":1562566494172},{"_id":"public/content.json","hash":"9316f7567a822381f5727962fb8ef7a17ae00675","modified":1586494390046},{"_id":"public/categories/index.html","hash":"e4d8e740ecff04b83cbcb8b431d700744503c494","modified":1586494390957},{"_id":"public/2020/03/23/php/thinkphp5/初学thinkphp5/index.html","hash":"79c2dc48c1be8fd778afc5c7439d915664058b68","modified":1586494390957},{"_id":"public/2020/03/09/php/laraval/Laravel基础学习/index.html","hash":"bda5cde5abeb6ac5f1c58742eabf65ec08a65345","modified":1586494390957},{"_id":"public/2019/10/24/Android/Android开发环境搭建/index.html","hash":"8733c3c629d0ef7e27c61de8a75a46be35673479","modified":1586494390957},{"_id":"public/2019/10/18/Android/Android三方库/index.html","hash":"b7f14817d845d501903cf52884403405d1643e54","modified":1586494390957},{"_id":"public/2019/08/09/python/CentOS6安装Python3环境/index.html","hash":"79c687ee5ba0050084cde545863126f28ca6fa82","modified":1586494390957},{"_id":"public/2019/07/08/vim/vim配置及插件安装/index.html","hash":"316e0c92a34c9796190340be3b1e77dcbb31823c","modified":1586494390957},{"_id":"public/2019/07/08/mysql/mysql/index.html","hash":"45625ef558e5d5a0054398a64eba76e2540ba471","modified":1586494390957},{"_id":"public/2019/07/08/Unix/Linux系统权限/index.html","hash":"e2f5e0efabcffe7ffe8646c2d65c68659007bb9e","modified":1586494390958},{"_id":"public/2019/07/08/apache/apache/index.html","hash":"e1ebdf8d0cd4f6a6675ee662e0e6f6f11f8fed12","modified":1586494390958},{"_id":"public/2019/07/02/CocoaPods/CocoaPods安装及简单使用/index.html","hash":"816830ce22e64e07ab08edba8064f0efc6e8786f","modified":1586494390958},{"_id":"public/2019/07/02/other/解决GitHub下载速度缓慢/index.html","hash":"372f82abca1ccd25d91afbdc5b45d46d5cc7692d","modified":1586494390958},{"_id":"public/2019/07/02/tools/Mac工具/index.html","hash":"e64279ef4cd91e80ef06d8ac86fd6e4ed22a3c3e","modified":1586494390958},{"_id":"public/2019/06/19/php/PHP管理工具Composer/index.html","hash":"8111f60b58b020059b40310612b14b299f5557de","modified":1586494390958},{"_id":"public/2019/05/23/git/index.html","hash":"755cb2f34a8f98a98ea16eb0ca703dba4f709d28","modified":1586494390958},{"_id":"public/2019/03/25/Node-js创建应用/index.html","hash":"826b806fdd2dd98481f391a32591e451dfb33761","modified":1586494390959},{"_id":"public/2019/03/08/CocoaPods/CocoaPods创建公有Pod库/index.html","hash":"d66c89e39b517f0f900d21f2586734b9c379fe69","modified":1586494390959},{"_id":"public/2019/01/10/js-string-method/index.html","hash":"9b38fcc98285516e185c68922f0a3c58e21e3e47","modified":1586494390959},{"_id":"public/2019/01/08/Shell学习笔记/index.html","hash":"eb8f1187ecd33c5f308ec54f9c3a69ff8f0d3120","modified":1586494390959},{"_id":"public/2018/12/19/iOS/OC-Property/index.html","hash":"ac910a841ca9575c931777eaac60bbb5ffcce89a","modified":1586494390959},{"_id":"public/2018/12/17/iOS/Xcode自定义代码块/index.html","hash":"7e6049696d3b4f55327271869617cc350b889d23","modified":1586494390959},{"_id":"public/2018/12/16/iOS/iOS持久化方式/index.html","hash":"c2b31840c9e85480a93f77ea6a8d6262fe1c25f9","modified":1586494390959},{"_id":"public/2018/12/16/iOS/Xcode工具/index.html","hash":"7e3526b4bbc106a6c699c80917acaa9e3c288089","modified":1586494390959},{"_id":"public/2018/12/15/iOS/Mac命令/index.html","hash":"02fe64a630e4bf03d5bbf33f78f86269e1f2b279","modified":1586494390960},{"_id":"public/2018/12/15/Linux命令/index.html","hash":"22bb6a490daf108025b51dbc273e6263f5ea20ab","modified":1586494390960},{"_id":"public/2018/11/09/iOS/OC-Keywords/index.html","hash":"824ebefc0c9d9dd6686c74d385fd54667f801fc6","modified":1586494390960},{"_id":"public/2018/11/07/javascript/index.html","hash":"1543e2bb51f4200c0b72e79b1378dea90e4c55c2","modified":1586494390960},{"_id":"public/archives/index.html","hash":"fedc5fcdcfca804142095e0bf3172c0431ff6701","modified":1586494390960},{"_id":"public/archives/page/2/index.html","hash":"4a8e8b5488002d3b0bddca28ca4396265a4608ae","modified":1586494390960},{"_id":"public/archives/2018/11/index.html","hash":"f665d23b62e9bdbf0660f473e62806dffb2e01fb","modified":1586494390960},{"_id":"public/archives/2018/index.html","hash":"36a6f745effa3c9c87e673b7074fd5ed3021c4e7","modified":1586494390961},{"_id":"public/archives/page/3/index.html","hash":"76696174ffb5f8ecce6415d27c85cbd4704b7f7f","modified":1586494390961},{"_id":"public/archives/2018/12/index.html","hash":"a17235ab6aede96a17437ff9b078aa35af61b418","modified":1586494390961},{"_id":"public/archives/2019/index.html","hash":"38ce893a71b071ea0837b735d527a2d78d3db174","modified":1586494390961},{"_id":"public/archives/2019/page/2/index.html","hash":"e1c8f64fbfe015934994ff7b0b9c492e548bef3e","modified":1586494390961},{"_id":"public/archives/2019/01/index.html","hash":"7ca1d46ad6901ca9c08752d8671318371c2afd6a","modified":1586494390962},{"_id":"public/archives/2019/03/index.html","hash":"c26ea686c09a68225b18c71a0d92ca24bd35a672","modified":1586494390962},{"_id":"public/archives/2019/05/index.html","hash":"f6264dcc2be34c5c5c2e848f619530d4400c49e2","modified":1586494390962},{"_id":"public/archives/2019/06/index.html","hash":"27da2a8976c712f5664b4f0afba057008b083edf","modified":1586494390962},{"_id":"public/archives/2019/07/index.html","hash":"fbe91b7191d02d242661cad29439678f12b3546d","modified":1586494390962},{"_id":"public/archives/2019/08/index.html","hash":"cf365657e2f9dc726e85a6afcb43773d32148a2e","modified":1586494390962},{"_id":"public/archives/2019/10/index.html","hash":"c282d9c5a670f002e7c4402a56ac81a2c2c42d62","modified":1586494390962},{"_id":"public/archives/2020/index.html","hash":"9d844009c9bb272d3dfbf8ec50365bb677cf57b1","modified":1586494390963},{"_id":"public/archives/2020/03/index.html","hash":"a9a851832ab7fc70d06196b60a524cb25397e378","modified":1586494390963},{"_id":"public/index.html","hash":"1758fd5d937885451f9112cc7a35c4658f605233","modified":1586494390963},{"_id":"public/page/3/index.html","hash":"20ce25fc3e7890d15f58d695825e8f32db2f76d2","modified":1586494390963},{"_id":"public/page/2/index.html","hash":"26334a2c846dd0033eef691be6a5764403482db3","modified":1586494390963},{"_id":"public/categories/Linux/index.html","hash":"f7f49e9278a430bdd714df30378b53b06d9ac805","modified":1586494390964},{"_id":"public/categories/Node/index.html","hash":"5af4e6738085b67ea41f7c6203d9e87c415ca161","modified":1586494390964},{"_id":"public/categories/JavaScript/index.html","hash":"d54b02d5e60dcade1b054b3842857bc5c75d8a01","modified":1586494390964},{"_id":"public/categories/Android/index.html","hash":"4aff701b26eaca6df7c9e7406eca9d7788e44d3b","modified":1586494390964},{"_id":"public/categories/CocoaPods/index.html","hash":"19690fce12293a8e2be370126d9ce99802434841","modified":1586494390964},{"_id":"public/categories/Objective-C/index.html","hash":"64f3c05f9bc5df504dbfa705d0b2be5ef6bc84ee","modified":1586494390964},{"_id":"public/categories/Mac/index.html","hash":"c54bc8b94278e1748e1d764c4e108b3a74838d48","modified":1586494390964},{"_id":"public/categories/Xcode/index.html","hash":"074d91f33c271e79cd72f624e936f073b038380e","modified":1586494390964},{"_id":"public/categories/iOS/index.html","hash":"6610b3e752835a3ef372145951a4f2d7eeb74248","modified":1586494390965},{"_id":"public/categories/Other/index.html","hash":"11808d7b354cc01edece16693ad79293192b8770","modified":1586494390965},{"_id":"public/categories/python/index.html","hash":"a79c30a7fbc40c7148a5d23dd1b37cf260877468","modified":1586494390965},{"_id":"public/categories/php/index.html","hash":"23f6a8e6fd5b2d03e15440b988e57d9851840f16","modified":1586494390965},{"_id":"public/CNAME","hash":"17ca0b76114fe69d63556f398d0687bfa00d5e15","modified":1586494390971},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1586494390971},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1586494390971},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1586494390971},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1586494390971},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1586494390971},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1586494390971},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1586494390971},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1586494390971},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1586494390972},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1586494390975},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1586494390975},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1586494390975},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1586494390975}],"Category":[{"name":"Linux","_id":"ck8tpsp1u0003ib36it3txirv"},{"name":"Node","_id":"ck8tpsp1z0007ib36jxo16lqk"},{"name":"JavaScript","_id":"ck8tpsp25000bib36fbdjz7a6"},{"name":"Android","_id":"ck8tpsp2u000jib3666dmrftd"},{"name":"CocoaPods","_id":"ck8tpsp30000qib36lksremkc"},{"name":"Objective-C","_id":"ck8tpsp31000vib364qds2pcf"},{"name":"Mac","_id":"ck8tpsp360016ib365jbekd80"},{"name":"Xcode","_id":"ck8tpsp39001bib365vpoo34w"},{"name":"iOS","_id":"ck8tpsp3a001fib36ysh5jvoa"},{"name":"Other","_id":"ck8tpsp3b001iib367cboa81u"},{"name":"python","_id":"ck8tpsp3c001lib36noe3jath"},{"name":"php","_id":"ck8tpsp3j001rib36kz5zlos3"}],"Data":[],"Page":[{"title":"分类","date":"2018-12-15T17:43:41.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-12-16 01:43:41\ntype: \"categories\"\n---\n","updated":"2019-07-08T06:06:28.763Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck8tpsp1r0001ib36k20oni1z","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Linux命令","date":"2018-12-15T13:16:47.000Z","_content":"\n#### 目录\n\n>  **ls** 列出目录\n```\nls -a   // 全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来\nls -d   // 仅列出目录本身，而不是列出目录内的文件数据\nls -l   // 长数据串列出，包含文件的属性与权限等等数据\nls -al  // 将该目录下的所有文件列出来(含属性与隐藏档)\n```\n> **cd** 切换\b目录\n```\ncd .    // 当前目录\ncd ..   // 回上一级目录\n```\n> **pwd** 显示目前的目录\n\n> **mkdir** 创建一个新的目录\n```\nmkdir -m    // 配置文件的权限\nmkdir -p    // 可创建多层目录\n```\n\n> **rmdir** 删除一个空的目录\n```\nrmdir [-p]\n```\n\n> **cp** 复制文件或目录\n```  \n-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)\n\n-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；\n\n-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；\n\n-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)\n\n-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；\n\n-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；\n\n-r：递归持续复制，用於目录的复制行为；(常用)\n\n-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；\n\n-u：若 destination 比 source 旧才升级 destination ！\n```\n\n> **rm** 移除文件或目录\n```\nrm -rf  // 强制移除目录及其子目录\n-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；\n-i ：互动模式，在删除前会询问使用者是否动作\n-r ：递归删除啊！\n```\n\n> **mv** 移动文件与目录，或修改文件与目录的名称\n```  \n-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；\n-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！\n-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)\n```\n\n#### 文件内容查看\n\n> `cat`  由第一行开始显示文件内容\n`tac`  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！\n`nl`   显示的时候，顺道输出行号！\n`more` 一页一页的显示文件内容\n`less` 与 more 类似，但是比 more 更好的是，他可以往前翻页！\n`head` 只看头几行\n`tail` 只看尾巴几行\n\n\n#### 查看系统内核\b\n\n> `cat /proc/version`\n```\nLinux version 2.6.32-642.el6.x86_64 (mockbuild@worker1.bsys.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC) ) #1 SMP Tue May 10 17:27:01 UTC 2016\n```\n\n> `uname -r`\n```\n2.6.32-642.el6.x86_64\n```\n\n> `uname -a`\n```\nLinux host.localdomain 2.6.32-642.el6.x86_64 #1 SMP Tue May 10 17:27:01 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n#### 查看系统版本\n\n> `cat /etc/issue`\n```\nCentOS release 6.8 (Final)\nKernel \\r on an \\m\n```\n\n> `cat /etc/redhat-release ` // 只对Redhat Linux\b\b有效\n```\nCentOS release 6.8 (Final)\n```\n\n> `lsb_release -a ` // 需安装lsb  yum install lsb –y\n```\nLSB Version:\t:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\nDistributor ID:\tCentOS\nDescription:\tCentOS release 6.8 (Final)\nRelease:\t6.8\nCodename:\tFinal\n```\n\n#### 关机 shutdown\n\n> `sync`  // 将数据由内存同步到硬盘中。\n`shutdown -h new`  // 立马关机\n`shutdown –h 10`  // 10分钟后关机，显示在登录用户的\b屏幕中\n`shutdown –h +10`  // 10分钟后关机\n`shutdown –h 20:25`  // 在今天20:25关机\n`shutdown –r now`  // 系统立马重启\n`shutdown –r +10`  // 系统十分钟后重启\n`reboot`  // 就是重启，等同于 shutdown –r now\n`halt`  // 关闭系统，等同于shutdown –h now 和 poweroff\n\n\n#### 系统状态的命令\n\n> **who**： 确定谁在系统\b中\n\n* `who`：列出当前已登录入系统的用户\nhenry  tty1  2018-12-30 15:51\n用户名  终端设备的设备文件名\n设备文件一般放于目录/dev下\n\n* `tty`：可以打印出当前终端的设备文件名\n* `who am i`：可以列出当前终端上的登录用户\n* `whoami`：仅列出当前终端上的登录用户\n\n> **uptime**：已开机时间（年龄）\n\n15:01:15 up 1:51, 1 user, load average: 0.00, 0.00, 0.00\n\n系统自启动后到现在的运行时间\n当前登录\b入用户数\n近期\b1分钟，5分钟，15分钟内系统CPU的负载\n\n> **top**：列出资源占用排名靠前的进程\n\nVIRT进程逻辑地址空间大小(virtual)\nRES驻留内存数(Resident)，也就是占用物理内存数\nSHR与其他进程内存数(share)\n%CPU占用CPU百分百，%MEM占用内存百分百\nTIME+占用的CPU时间\n\n> **ps**\b：查阅进程状态(process status)\n\n用于控制列表的行数(进程\b范围)和列数(每进程列出的属性内容)\n`ps`：只列出在当前终端上启动的进程 PID TTY TIME COMMAND\n`ps e`：列出系统中所有的进程(进程范围)\n`ps f`：已*fill格式*列出每一个进程(控制列的数目)\n`ps l`：已*long格式*列出每一个进程(控制列的数目)\n\n> UID：用户ID(注册名)\nPID：进程ID\nPPID：父进程的PID\nC：CPU占用指数：最近一段时间(秒级别)进程占用CPU情况\nSTIME：启动时间\nSZ：进程逻辑内存大小(size)\nTTY：终端的名字\nCOMMAND：命令名\nWCHAN：进程在内核的何处睡眠(wait channel)\nTIME：累计执行时间(占用CPU的时间)\nPRI：优先级\nS：状态，S(sleep)，R(run)，Z(Zombie)\n\n> **free**：内存使用情况\n\n> **vmtat**：系统负载\n\nProcs r等待运行的进程数 b处在非中断睡眠状态的进程数\nMemory free空闲的内存 buff/cache用做缓存的内存数\nSwap 磁盘/内存的交换页数量，单位：KB/秒\nIO 设备I/O块数，单位：块/秒\nSystem in每秒的硬件中断数(interrupt)，包括时钟中断 cs每秒环境切换次数(context switch)\nCPU 总使用率 us=user sy=system id=idle wa=wait for disk I/O\n\n","source":"_posts/Linux命令.md","raw":"---\ntitle: Linux命令\ndate: 2018-12-15 21:16:47\ntags:\ncategories: Linux\n---\n\n#### 目录\n\n>  **ls** 列出目录\n```\nls -a   // 全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来\nls -d   // 仅列出目录本身，而不是列出目录内的文件数据\nls -l   // 长数据串列出，包含文件的属性与权限等等数据\nls -al  // 将该目录下的所有文件列出来(含属性与隐藏档)\n```\n> **cd** 切换\b目录\n```\ncd .    // 当前目录\ncd ..   // 回上一级目录\n```\n> **pwd** 显示目前的目录\n\n> **mkdir** 创建一个新的目录\n```\nmkdir -m    // 配置文件的权限\nmkdir -p    // 可创建多层目录\n```\n\n> **rmdir** 删除一个空的目录\n```\nrmdir [-p]\n```\n\n> **cp** 复制文件或目录\n```  \n-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)\n\n-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；\n\n-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；\n\n-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)\n\n-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；\n\n-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；\n\n-r：递归持续复制，用於目录的复制行为；(常用)\n\n-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；\n\n-u：若 destination 比 source 旧才升级 destination ！\n```\n\n> **rm** 移除文件或目录\n```\nrm -rf  // 强制移除目录及其子目录\n-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；\n-i ：互动模式，在删除前会询问使用者是否动作\n-r ：递归删除啊！\n```\n\n> **mv** 移动文件与目录，或修改文件与目录的名称\n```  \n-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；\n-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！\n-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)\n```\n\n#### 文件内容查看\n\n> `cat`  由第一行开始显示文件内容\n`tac`  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！\n`nl`   显示的时候，顺道输出行号！\n`more` 一页一页的显示文件内容\n`less` 与 more 类似，但是比 more 更好的是，他可以往前翻页！\n`head` 只看头几行\n`tail` 只看尾巴几行\n\n\n#### 查看系统内核\b\n\n> `cat /proc/version`\n```\nLinux version 2.6.32-642.el6.x86_64 (mockbuild@worker1.bsys.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC) ) #1 SMP Tue May 10 17:27:01 UTC 2016\n```\n\n> `uname -r`\n```\n2.6.32-642.el6.x86_64\n```\n\n> `uname -a`\n```\nLinux host.localdomain 2.6.32-642.el6.x86_64 #1 SMP Tue May 10 17:27:01 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n#### 查看系统版本\n\n> `cat /etc/issue`\n```\nCentOS release 6.8 (Final)\nKernel \\r on an \\m\n```\n\n> `cat /etc/redhat-release ` // 只对Redhat Linux\b\b有效\n```\nCentOS release 6.8 (Final)\n```\n\n> `lsb_release -a ` // 需安装lsb  yum install lsb –y\n```\nLSB Version:\t:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\nDistributor ID:\tCentOS\nDescription:\tCentOS release 6.8 (Final)\nRelease:\t6.8\nCodename:\tFinal\n```\n\n#### 关机 shutdown\n\n> `sync`  // 将数据由内存同步到硬盘中。\n`shutdown -h new`  // 立马关机\n`shutdown –h 10`  // 10分钟后关机，显示在登录用户的\b屏幕中\n`shutdown –h +10`  // 10分钟后关机\n`shutdown –h 20:25`  // 在今天20:25关机\n`shutdown –r now`  // 系统立马重启\n`shutdown –r +10`  // 系统十分钟后重启\n`reboot`  // 就是重启，等同于 shutdown –r now\n`halt`  // 关闭系统，等同于shutdown –h now 和 poweroff\n\n\n#### 系统状态的命令\n\n> **who**： 确定谁在系统\b中\n\n* `who`：列出当前已登录入系统的用户\nhenry  tty1  2018-12-30 15:51\n用户名  终端设备的设备文件名\n设备文件一般放于目录/dev下\n\n* `tty`：可以打印出当前终端的设备文件名\n* `who am i`：可以列出当前终端上的登录用户\n* `whoami`：仅列出当前终端上的登录用户\n\n> **uptime**：已开机时间（年龄）\n\n15:01:15 up 1:51, 1 user, load average: 0.00, 0.00, 0.00\n\n系统自启动后到现在的运行时间\n当前登录\b入用户数\n近期\b1分钟，5分钟，15分钟内系统CPU的负载\n\n> **top**：列出资源占用排名靠前的进程\n\nVIRT进程逻辑地址空间大小(virtual)\nRES驻留内存数(Resident)，也就是占用物理内存数\nSHR与其他进程内存数(share)\n%CPU占用CPU百分百，%MEM占用内存百分百\nTIME+占用的CPU时间\n\n> **ps**\b：查阅进程状态(process status)\n\n用于控制列表的行数(进程\b范围)和列数(每进程列出的属性内容)\n`ps`：只列出在当前终端上启动的进程 PID TTY TIME COMMAND\n`ps e`：列出系统中所有的进程(进程范围)\n`ps f`：已*fill格式*列出每一个进程(控制列的数目)\n`ps l`：已*long格式*列出每一个进程(控制列的数目)\n\n> UID：用户ID(注册名)\nPID：进程ID\nPPID：父进程的PID\nC：CPU占用指数：最近一段时间(秒级别)进程占用CPU情况\nSTIME：启动时间\nSZ：进程逻辑内存大小(size)\nTTY：终端的名字\nCOMMAND：命令名\nWCHAN：进程在内核的何处睡眠(wait channel)\nTIME：累计执行时间(占用CPU的时间)\nPRI：优先级\nS：状态，S(sleep)，R(run)，Z(Zombie)\n\n> **free**：内存使用情况\n\n> **vmtat**：系统负载\n\nProcs r等待运行的进程数 b处在非中断睡眠状态的进程数\nMemory free空闲的内存 buff/cache用做缓存的内存数\nSwap 磁盘/内存的交换页数量，单位：KB/秒\nIO 设备I/O块数，单位：块/秒\nSystem in每秒的硬件中断数(interrupt)，包括时钟中断 cs每秒环境切换次数(context switch)\nCPU 总使用率 us=user sy=system id=idle wa=wait for disk I/O\n\n","slug":"Linux命令","published":1,"updated":"2019-07-08T06:06:28.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp1m0000ib365554329s","content":"<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><blockquote>\n<p> <strong>ls</strong> 列出目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a   // 全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来</span><br><span class=\"line\">ls -d   // 仅列出目录本身，而不是列出目录内的文件数据</span><br><span class=\"line\">ls -l   // 长数据串列出，包含文件的属性与权限等等数据</span><br><span class=\"line\">ls -al  // 将该目录下的所有文件列出来(含属性与隐藏档)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>cd</strong> 切换\b目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd .    // 当前目录</span><br><span class=\"line\">cd ..   // 回上一级目录</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>pwd</strong> 显示目前的目录</p>\n</blockquote>\n<blockquote>\n<p><strong>mkdir</strong> 创建一个新的目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -m    // 配置文件的权限</span><br><span class=\"line\">mkdir -p    // 可创建多层目录</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>rmdir</strong> 删除一个空的目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmdir [-p]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>cp</strong> 复制文件或目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</span><br><span class=\"line\"></span><br><span class=\"line\">-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</span><br><span class=\"line\"></span><br><span class=\"line\">-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</span><br><span class=\"line\"></span><br><span class=\"line\">-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</span><br><span class=\"line\"></span><br><span class=\"line\">-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；</span><br><span class=\"line\"></span><br><span class=\"line\">-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</span><br><span class=\"line\"></span><br><span class=\"line\">-r：递归持续复制，用於目录的复制行为；(常用)</span><br><span class=\"line\"></span><br><span class=\"line\">-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</span><br><span class=\"line\"></span><br><span class=\"line\">-u：若 destination 比 source 旧才升级 destination ！</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>rm</strong> 移除文件或目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf  // 强制移除目录及其子目录</span><br><span class=\"line\">-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</span><br><span class=\"line\">-i ：互动模式，在删除前会询问使用者是否动作</span><br><span class=\"line\">-r ：递归删除啊！</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>mv</strong> 移动文件与目录，或修改文件与目录的名称</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</span><br><span class=\"line\">-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</span><br><span class=\"line\">-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件内容查看\"><a href=\"#文件内容查看\" class=\"headerlink\" title=\"文件内容查看\"></a>文件内容查看</h4><blockquote>\n<p><code>cat</code>  由第一行开始显示文件内容<br><code>tac</code>  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！<br><code>nl</code>   显示的时候，顺道输出行号！<br><code>more</code> 一页一页的显示文件内容<br><code>less</code> 与 more 类似，但是比 more 更好的是，他可以往前翻页！<br><code>head</code> 只看头几行<br><code>tail</code> 只看尾巴几行</p>\n</blockquote>\n<h4 id=\"查看系统内核\"><a href=\"#查看系统内核\" class=\"headerlink\" title=\"查看系统内核\b\"></a>查看系统内核\b</h4><blockquote>\n<p><code>cat /proc/version</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux version 2.6.32-642.el6.x86_64 (mockbuild@worker1.bsys.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC) ) #1 SMP Tue May 10 17:27:01 UTC 2016</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>uname -r</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.6.32-642.el6.x86_64</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>uname -a</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux host.localdomain 2.6.32-642.el6.x86_64 #1 SMP Tue May 10 17:27:01 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看系统版本\"><a href=\"#查看系统版本\" class=\"headerlink\" title=\"查看系统版本\"></a>查看系统版本</h4><blockquote>\n<p><code>cat /etc/issue</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CentOS release 6.8 (Final)</span><br><span class=\"line\">Kernel \\r on an \\m</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>cat /etc/redhat-release</code> // 只对Redhat Linux\b\b有效</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CentOS release 6.8 (Final)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>lsb_release -a</code> // 需安装lsb  yum install lsb –y</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LSB Version:\t:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch</span><br><span class=\"line\">Distributor ID:\tCentOS</span><br><span class=\"line\">Description:\tCentOS release 6.8 (Final)</span><br><span class=\"line\">Release:\t6.8</span><br><span class=\"line\">Codename:\tFinal</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关机-shutdown\"><a href=\"#关机-shutdown\" class=\"headerlink\" title=\"关机 shutdown\"></a>关机 shutdown</h4><blockquote>\n<p><code>sync</code>  // 将数据由内存同步到硬盘中。<br><code>shutdown -h new</code>  // 立马关机<br><code>shutdown –h 10</code>  // 10分钟后关机，显示在登录用户的\b屏幕中<br><code>shutdown –h +10</code>  // 10分钟后关机<br><code>shutdown –h 20:25</code>  // 在今天20:25关机<br><code>shutdown –r now</code>  // 系统立马重启<br><code>shutdown –r +10</code>  // 系统十分钟后重启<br><code>reboot</code>  // 就是重启，等同于 shutdown –r now<br><code>halt</code>  // 关闭系统，等同于shutdown –h now 和 poweroff</p>\n</blockquote>\n<h4 id=\"系统状态的命令\"><a href=\"#系统状态的命令\" class=\"headerlink\" title=\"系统状态的命令\"></a>系统状态的命令</h4><blockquote>\n<p><strong>who</strong>： 确定谁在系统\b中</p>\n</blockquote>\n<ul>\n<li><p><code>who</code>：列出当前已登录入系统的用户<br>henry  tty1  2018-12-30 15:51<br>用户名  终端设备的设备文件名<br>设备文件一般放于目录/dev下</p>\n</li>\n<li><p><code>tty</code>：可以打印出当前终端的设备文件名</p>\n</li>\n<li><p><code>who am i</code>：可以列出当前终端上的登录用户</p>\n</li>\n<li><p><code>whoami</code>：仅列出当前终端上的登录用户</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>uptime</strong>：已开机时间（年龄）</p>\n</blockquote>\n<p>15:01:15 up 1:51, 1 user, load average: 0.00, 0.00, 0.00</p>\n<p>系统自启动后到现在的运行时间<br>当前登录\b入用户数<br>近期\b1分钟，5分钟，15分钟内系统CPU的负载</p>\n<blockquote>\n<p><strong>top</strong>：列出资源占用排名靠前的进程</p>\n</blockquote>\n<p>VIRT进程逻辑地址空间大小(virtual)<br>RES驻留内存数(Resident)，也就是占用物理内存数<br>SHR与其他进程内存数(share)<br>%CPU占用CPU百分百，%MEM占用内存百分百<br>TIME+占用的CPU时间</p>\n<blockquote>\n<p><strong>ps</strong>\b：查阅进程状态(process status)</p>\n</blockquote>\n<p>用于控制列表的行数(进程\b范围)和列数(每进程列出的属性内容)<br><code>ps</code>：只列出在当前终端上启动的进程 PID TTY TIME COMMAND<br><code>ps e</code>：列出系统中所有的进程(进程范围)<br><code>ps f</code>：已<em>fill格式</em>列出每一个进程(控制列的数目)<br><code>ps l</code>：已<em>long格式</em>列出每一个进程(控制列的数目)</p>\n<blockquote>\n<p>UID：用户ID(注册名)<br>PID：进程ID<br>PPID：父进程的PID<br>C：CPU占用指数：最近一段时间(秒级别)进程占用CPU情况<br>STIME：启动时间<br>SZ：进程逻辑内存大小(size)<br>TTY：终端的名字<br>COMMAND：命令名<br>WCHAN：进程在内核的何处睡眠(wait channel)<br>TIME：累计执行时间(占用CPU的时间)<br>PRI：优先级<br>S：状态，S(sleep)，R(run)，Z(Zombie)</p>\n</blockquote>\n<blockquote>\n<p><strong>free</strong>：内存使用情况</p>\n</blockquote>\n<blockquote>\n<p><strong>vmtat</strong>：系统负载</p>\n</blockquote>\n<p>Procs r等待运行的进程数 b处在非中断睡眠状态的进程数<br>Memory free空闲的内存 buff/cache用做缓存的内存数<br>Swap 磁盘/内存的交换页数量，单位：KB/秒<br>IO 设备I/O块数，单位：块/秒<br>System in每秒的硬件中断数(interrupt)，包括时钟中断 cs每秒环境切换次数(context switch)<br>CPU 总使用率 us=user sy=system id=idle wa=wait for disk I/O</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><blockquote>\n<p> <strong>ls</strong> 列出目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a   // 全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来</span><br><span class=\"line\">ls -d   // 仅列出目录本身，而不是列出目录内的文件数据</span><br><span class=\"line\">ls -l   // 长数据串列出，包含文件的属性与权限等等数据</span><br><span class=\"line\">ls -al  // 将该目录下的所有文件列出来(含属性与隐藏档)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>cd</strong> 切换\b目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd .    // 当前目录</span><br><span class=\"line\">cd ..   // 回上一级目录</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>pwd</strong> 显示目前的目录</p>\n</blockquote>\n<blockquote>\n<p><strong>mkdir</strong> 创建一个新的目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -m    // 配置文件的权限</span><br><span class=\"line\">mkdir -p    // 可创建多层目录</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>rmdir</strong> 删除一个空的目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmdir [-p]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>cp</strong> 复制文件或目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</span><br><span class=\"line\"></span><br><span class=\"line\">-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</span><br><span class=\"line\"></span><br><span class=\"line\">-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</span><br><span class=\"line\"></span><br><span class=\"line\">-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</span><br><span class=\"line\"></span><br><span class=\"line\">-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；</span><br><span class=\"line\"></span><br><span class=\"line\">-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</span><br><span class=\"line\"></span><br><span class=\"line\">-r：递归持续复制，用於目录的复制行为；(常用)</span><br><span class=\"line\"></span><br><span class=\"line\">-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</span><br><span class=\"line\"></span><br><span class=\"line\">-u：若 destination 比 source 旧才升级 destination ！</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>rm</strong> 移除文件或目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf  // 强制移除目录及其子目录</span><br><span class=\"line\">-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</span><br><span class=\"line\">-i ：互动模式，在删除前会询问使用者是否动作</span><br><span class=\"line\">-r ：递归删除啊！</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>mv</strong> 移动文件与目录，或修改文件与目录的名称</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</span><br><span class=\"line\">-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</span><br><span class=\"line\">-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件内容查看\"><a href=\"#文件内容查看\" class=\"headerlink\" title=\"文件内容查看\"></a>文件内容查看</h4><blockquote>\n<p><code>cat</code>  由第一行开始显示文件内容<br><code>tac</code>  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！<br><code>nl</code>   显示的时候，顺道输出行号！<br><code>more</code> 一页一页的显示文件内容<br><code>less</code> 与 more 类似，但是比 more 更好的是，他可以往前翻页！<br><code>head</code> 只看头几行<br><code>tail</code> 只看尾巴几行</p>\n</blockquote>\n<h4 id=\"查看系统内核\"><a href=\"#查看系统内核\" class=\"headerlink\" title=\"查看系统内核\b\"></a>查看系统内核\b</h4><blockquote>\n<p><code>cat /proc/version</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux version 2.6.32-642.el6.x86_64 (mockbuild@worker1.bsys.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC) ) #1 SMP Tue May 10 17:27:01 UTC 2016</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>uname -r</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.6.32-642.el6.x86_64</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>uname -a</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux host.localdomain 2.6.32-642.el6.x86_64 #1 SMP Tue May 10 17:27:01 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看系统版本\"><a href=\"#查看系统版本\" class=\"headerlink\" title=\"查看系统版本\"></a>查看系统版本</h4><blockquote>\n<p><code>cat /etc/issue</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CentOS release 6.8 (Final)</span><br><span class=\"line\">Kernel \\r on an \\m</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>cat /etc/redhat-release</code> // 只对Redhat Linux\b\b有效</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CentOS release 6.8 (Final)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>lsb_release -a</code> // 需安装lsb  yum install lsb –y</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LSB Version:\t:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch</span><br><span class=\"line\">Distributor ID:\tCentOS</span><br><span class=\"line\">Description:\tCentOS release 6.8 (Final)</span><br><span class=\"line\">Release:\t6.8</span><br><span class=\"line\">Codename:\tFinal</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关机-shutdown\"><a href=\"#关机-shutdown\" class=\"headerlink\" title=\"关机 shutdown\"></a>关机 shutdown</h4><blockquote>\n<p><code>sync</code>  // 将数据由内存同步到硬盘中。<br><code>shutdown -h new</code>  // 立马关机<br><code>shutdown –h 10</code>  // 10分钟后关机，显示在登录用户的\b屏幕中<br><code>shutdown –h +10</code>  // 10分钟后关机<br><code>shutdown –h 20:25</code>  // 在今天20:25关机<br><code>shutdown –r now</code>  // 系统立马重启<br><code>shutdown –r +10</code>  // 系统十分钟后重启<br><code>reboot</code>  // 就是重启，等同于 shutdown –r now<br><code>halt</code>  // 关闭系统，等同于shutdown –h now 和 poweroff</p>\n</blockquote>\n<h4 id=\"系统状态的命令\"><a href=\"#系统状态的命令\" class=\"headerlink\" title=\"系统状态的命令\"></a>系统状态的命令</h4><blockquote>\n<p><strong>who</strong>： 确定谁在系统\b中</p>\n</blockquote>\n<ul>\n<li><p><code>who</code>：列出当前已登录入系统的用户<br>henry  tty1  2018-12-30 15:51<br>用户名  终端设备的设备文件名<br>设备文件一般放于目录/dev下</p>\n</li>\n<li><p><code>tty</code>：可以打印出当前终端的设备文件名</p>\n</li>\n<li><p><code>who am i</code>：可以列出当前终端上的登录用户</p>\n</li>\n<li><p><code>whoami</code>：仅列出当前终端上的登录用户</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>uptime</strong>：已开机时间（年龄）</p>\n</blockquote>\n<p>15:01:15 up 1:51, 1 user, load average: 0.00, 0.00, 0.00</p>\n<p>系统自启动后到现在的运行时间<br>当前登录\b入用户数<br>近期\b1分钟，5分钟，15分钟内系统CPU的负载</p>\n<blockquote>\n<p><strong>top</strong>：列出资源占用排名靠前的进程</p>\n</blockquote>\n<p>VIRT进程逻辑地址空间大小(virtual)<br>RES驻留内存数(Resident)，也就是占用物理内存数<br>SHR与其他进程内存数(share)<br>%CPU占用CPU百分百，%MEM占用内存百分百<br>TIME+占用的CPU时间</p>\n<blockquote>\n<p><strong>ps</strong>\b：查阅进程状态(process status)</p>\n</blockquote>\n<p>用于控制列表的行数(进程\b范围)和列数(每进程列出的属性内容)<br><code>ps</code>：只列出在当前终端上启动的进程 PID TTY TIME COMMAND<br><code>ps e</code>：列出系统中所有的进程(进程范围)<br><code>ps f</code>：已<em>fill格式</em>列出每一个进程(控制列的数目)<br><code>ps l</code>：已<em>long格式</em>列出每一个进程(控制列的数目)</p>\n<blockquote>\n<p>UID：用户ID(注册名)<br>PID：进程ID<br>PPID：父进程的PID<br>C：CPU占用指数：最近一段时间(秒级别)进程占用CPU情况<br>STIME：启动时间<br>SZ：进程逻辑内存大小(size)<br>TTY：终端的名字<br>COMMAND：命令名<br>WCHAN：进程在内核的何处睡眠(wait channel)<br>TIME：累计执行时间(占用CPU的时间)<br>PRI：优先级<br>S：状态，S(sleep)，R(run)，Z(Zombie)</p>\n</blockquote>\n<blockquote>\n<p><strong>free</strong>：内存使用情况</p>\n</blockquote>\n<blockquote>\n<p><strong>vmtat</strong>：系统负载</p>\n</blockquote>\n<p>Procs r等待运行的进程数 b处在非中断睡眠状态的进程数<br>Memory free空闲的内存 buff/cache用做缓存的内存数<br>Swap 磁盘/内存的交换页数量，单位：KB/秒<br>IO 设备I/O块数，单位：块/秒<br>System in每秒的硬件中断数(interrupt)，包括时钟中断 cs每秒环境切换次数(context switch)<br>CPU 总使用率 us=user sy=system id=idle wa=wait for disk I/O</p>\n"},{"title":"Node.js创建应用","date":"2019-03-25T15:23:55.000Z","_content":"\n# 创建Node.js应用\n\n```node\n// require载入http模块，实例化HTTP\nvar http = require('http');\nhttp.createServer(function (request, response) {\n\n    // 发送 HTTP 头部 \n    // HTTP 状态值: 200 : OK\n    // 内容类型: text/plain\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n\n    // 发送响应数据 \"Hello World\"\n    response.end('Hello world\\n');\n}).listen(8888);\n\n// 终端打印如下信息\nconsole.log('Server running at http://127.0.0.1:8888/');\n```\n\n保存为`server.js`文件\n\n使用`node`命令执行\n\n```terminal\nnode server.js\nServer running at http://127.0.0.1:8888/\n```\n\n打开浏览器即可访问http://127.0.0.1:8888/，\n\n","source":"_posts/Node-js创建应用.md","raw":"---\ntitle: Node.js创建应用\ndate: 2019-03-25 23:23:55\ntags:\ncategories: Node\n---\n\n# 创建Node.js应用\n\n```node\n// require载入http模块，实例化HTTP\nvar http = require('http');\nhttp.createServer(function (request, response) {\n\n    // 发送 HTTP 头部 \n    // HTTP 状态值: 200 : OK\n    // 内容类型: text/plain\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n\n    // 发送响应数据 \"Hello World\"\n    response.end('Hello world\\n');\n}).listen(8888);\n\n// 终端打印如下信息\nconsole.log('Server running at http://127.0.0.1:8888/');\n```\n\n保存为`server.js`文件\n\n使用`node`命令执行\n\n```terminal\nnode server.js\nServer running at http://127.0.0.1:8888/\n```\n\n打开浏览器即可访问http://127.0.0.1:8888/，\n\n","slug":"Node-js创建应用","published":1,"updated":"2019-07-08T06:06:28.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp1s0002ib36cd6j7y3c","content":"<h1 id=\"创建Node-js应用\"><a href=\"#创建Node-js应用\" class=\"headerlink\" title=\"创建Node.js应用\"></a>创建Node.js应用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// require载入http模块，实例化HTTP</span><br><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">http.createServer(function (request, response) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 发送 HTTP 头部 </span><br><span class=\"line\">    // HTTP 状态值: 200 : OK</span><br><span class=\"line\">    // 内容类型: text/plain</span><br><span class=\"line\">    response.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/plain&apos;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 发送响应数据 &quot;Hello World&quot;</span><br><span class=\"line\">    response.end(&apos;Hello world\\n&apos;);</span><br><span class=\"line\">&#125;).listen(8888);</span><br><span class=\"line\"></span><br><span class=\"line\">// 终端打印如下信息</span><br><span class=\"line\">console.log(&apos;Server running at http://127.0.0.1:8888/&apos;);</span><br></pre></td></tr></table></figure>\n\n<p>保存为<code>server.js</code>文件</p>\n<p>使用<code>node</code>命令执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node server.js</span><br><span class=\"line\">Server running at http://127.0.0.1:8888/</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器即可访问<a href=\"http://127.0.0.1:8888/，\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8888/，</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"创建Node-js应用\"><a href=\"#创建Node-js应用\" class=\"headerlink\" title=\"创建Node.js应用\"></a>创建Node.js应用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// require载入http模块，实例化HTTP</span><br><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">http.createServer(function (request, response) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 发送 HTTP 头部 </span><br><span class=\"line\">    // HTTP 状态值: 200 : OK</span><br><span class=\"line\">    // 内容类型: text/plain</span><br><span class=\"line\">    response.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/plain&apos;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 发送响应数据 &quot;Hello World&quot;</span><br><span class=\"line\">    response.end(&apos;Hello world\\n&apos;);</span><br><span class=\"line\">&#125;).listen(8888);</span><br><span class=\"line\"></span><br><span class=\"line\">// 终端打印如下信息</span><br><span class=\"line\">console.log(&apos;Server running at http://127.0.0.1:8888/&apos;);</span><br></pre></td></tr></table></figure>\n\n<p>保存为<code>server.js</code>文件</p>\n<p>使用<code>node</code>命令执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node server.js</span><br><span class=\"line\">Server running at http://127.0.0.1:8888/</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器即可访问<a href=\"http://127.0.0.1:8888/，\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8888/，</a></p>\n"},{"title":"Shell学习笔记","date":"2019-01-08T14:13:52.000Z","_content":"\n\n","source":"_posts/Shell学习笔记.md","raw":"---\ntitle: Shell学习笔记\ndate: 2019-01-08 22:13:52\ntags:\ncategories: Linux\n---\n\n\n","slug":"Shell学习笔记","published":1,"updated":"2019-07-08T06:06:28.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp1w0004ib36tn14a8t7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"git","date":"2019-05-23T01:19:13.000Z","_content":"\n## Git\n\n### 丢弃本地修改\n\n```git\ngit checkout . #本地所有修改的。没有的提交的，都返回到原来的状态\ngit stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。\ngit reset --hard HASH #返回到某个节点，不保留修改。\ngit reset --soft HASH #返回到某个节点。保留修改\n\ngit clean -df #返回到某个节点\ngit clean 参数\n    -n 显示 将要 删除的 文件 和  目录\n    -f 删除 文件\n    -df 删除 文件 和 目录\n\n```\n\n丢弃本地修改的所有文件（新增、删除、修改）\n\n`git checkout . && git clean -xdf`\n\n### 删除本地分支\n\n```git\n# 查看分支\ngit branch -a\n\n# 删除本地分支\ngit branch -D <BranchName>\n\n```\n\n### 删除远程分支\n\n```git\ngit push origin --delete <BranchName> \n```\n\n### Tags\n\n```git\ngit ls-remote --tags origin  # 查询远程tags\n\ngit tag  # 列出所有tag\ngit tag -l v1.* #列出符合条件的tag（筛选作用）\n\ngit tag v1  # 创建tag\ngit tag -a -m 'first version' v1  # 创建含标注tag\ngit tag -a f1bb97a(commit id) # 为之前提交打tag\n\ngit push origin --tags  # 推送所有本地tag到远程\ngit push origin v1  # 推送指定本地tag到远程\n\ngit tag -d v1  # 删除本地指定tag\ngit push origin :refs/tags/v1 # 删除远程指定tag\n\ngit fetch origin v1 # 拉取远程指定tag\ngit show v1 # 显示指定tag详细信息\n\ngit tag -l | xargs git tag -d  # 删除所有本地分支\ngit fetch origin --prune  # 从远程拉取所有信息\n\n```\n\n### Git忽略文件\n\n创建`.gitignore`文件\n\n忽略文件的原则是：\n\n1. 忽略操作系统自动生成的文件，比如缩略图等；\n2. 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件；\n3. 就没必要放进版本库，比如Java编译产生的.class文件；\n4. 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。\n\n例如：\n\n```git\n*.xcuserstate\nproject.xcworkspace\nxcuserdata\nUserInterfaceState.xcuserstate\nproject.xcworkspace/\nxcuserdata/\nUserInterface.xcuserstate\n```\n\n如果存在文件，需要先清理缓存文件 git rm --cached xx\n或者找到文件后删除它，然后commit， push。\n\n### Git合并分支&取消合并\n\n```git\n// 合并分支dev\ngit merge dev\n// 取消合并\ngit merge --abort\n```\n\n","source":"_posts/git.md","raw":"---\ntitle: git\ndate: 2019-05-23 09:19:13\ntags:\ncategories:\n---\n\n## Git\n\n### 丢弃本地修改\n\n```git\ngit checkout . #本地所有修改的。没有的提交的，都返回到原来的状态\ngit stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。\ngit reset --hard HASH #返回到某个节点，不保留修改。\ngit reset --soft HASH #返回到某个节点。保留修改\n\ngit clean -df #返回到某个节点\ngit clean 参数\n    -n 显示 将要 删除的 文件 和  目录\n    -f 删除 文件\n    -df 删除 文件 和 目录\n\n```\n\n丢弃本地修改的所有文件（新增、删除、修改）\n\n`git checkout . && git clean -xdf`\n\n### 删除本地分支\n\n```git\n# 查看分支\ngit branch -a\n\n# 删除本地分支\ngit branch -D <BranchName>\n\n```\n\n### 删除远程分支\n\n```git\ngit push origin --delete <BranchName> \n```\n\n### Tags\n\n```git\ngit ls-remote --tags origin  # 查询远程tags\n\ngit tag  # 列出所有tag\ngit tag -l v1.* #列出符合条件的tag（筛选作用）\n\ngit tag v1  # 创建tag\ngit tag -a -m 'first version' v1  # 创建含标注tag\ngit tag -a f1bb97a(commit id) # 为之前提交打tag\n\ngit push origin --tags  # 推送所有本地tag到远程\ngit push origin v1  # 推送指定本地tag到远程\n\ngit tag -d v1  # 删除本地指定tag\ngit push origin :refs/tags/v1 # 删除远程指定tag\n\ngit fetch origin v1 # 拉取远程指定tag\ngit show v1 # 显示指定tag详细信息\n\ngit tag -l | xargs git tag -d  # 删除所有本地分支\ngit fetch origin --prune  # 从远程拉取所有信息\n\n```\n\n### Git忽略文件\n\n创建`.gitignore`文件\n\n忽略文件的原则是：\n\n1. 忽略操作系统自动生成的文件，比如缩略图等；\n2. 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件；\n3. 就没必要放进版本库，比如Java编译产生的.class文件；\n4. 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。\n\n例如：\n\n```git\n*.xcuserstate\nproject.xcworkspace\nxcuserdata\nUserInterfaceState.xcuserstate\nproject.xcworkspace/\nxcuserdata/\nUserInterface.xcuserstate\n```\n\n如果存在文件，需要先清理缓存文件 git rm --cached xx\n或者找到文件后删除它，然后commit， push。\n\n### Git合并分支&取消合并\n\n```git\n// 合并分支dev\ngit merge dev\n// 取消合并\ngit merge --abort\n```\n\n","slug":"git","published":1,"updated":"2019-10-06T01:23:44.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp1x0005ib36gb79zbeg","content":"<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><h3 id=\"丢弃本地修改\"><a href=\"#丢弃本地修改\" class=\"headerlink\" title=\"丢弃本地修改\"></a>丢弃本地修改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态</span><br><span class=\"line\">git stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。</span><br><span class=\"line\">git reset --hard HASH #返回到某个节点，不保留修改。</span><br><span class=\"line\">git reset --soft HASH #返回到某个节点。保留修改</span><br><span class=\"line\"></span><br><span class=\"line\">git clean -df #返回到某个节点</span><br><span class=\"line\">git clean 参数</span><br><span class=\"line\">    -n 显示 将要 删除的 文件 和  目录</span><br><span class=\"line\">    -f 删除 文件</span><br><span class=\"line\">    -df 删除 文件 和 目录</span><br></pre></td></tr></table></figure>\n\n<p>丢弃本地修改的所有文件（新增、删除、修改）</p>\n<p><code>git checkout . &amp;&amp; git clean -xdf</code></p>\n<h3 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看分支</span><br><span class=\"line\">git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除本地分支</span><br><span class=\"line\">git branch -D &lt;BranchName&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete &lt;BranchName&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tags\"><a href=\"#Tags\" class=\"headerlink\" title=\"Tags\"></a>Tags</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-remote --tags origin  # 查询远程tags</span><br><span class=\"line\"></span><br><span class=\"line\">git tag  # 列出所有tag</span><br><span class=\"line\">git tag -l v1.* #列出符合条件的tag（筛选作用）</span><br><span class=\"line\"></span><br><span class=\"line\">git tag v1  # 创建tag</span><br><span class=\"line\">git tag -a -m &apos;first version&apos; v1  # 创建含标注tag</span><br><span class=\"line\">git tag -a f1bb97a(commit id) # 为之前提交打tag</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin --tags  # 推送所有本地tag到远程</span><br><span class=\"line\">git push origin v1  # 推送指定本地tag到远程</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -d v1  # 删除本地指定tag</span><br><span class=\"line\">git push origin :refs/tags/v1 # 删除远程指定tag</span><br><span class=\"line\"></span><br><span class=\"line\">git fetch origin v1 # 拉取远程指定tag</span><br><span class=\"line\">git show v1 # 显示指定tag详细信息</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -l | xargs git tag -d  # 删除所有本地分支</span><br><span class=\"line\">git fetch origin --prune  # 从远程拉取所有信息</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git忽略文件\"><a href=\"#Git忽略文件\" class=\"headerlink\" title=\"Git忽略文件\"></a>Git忽略文件</h3><p>创建<code>.gitignore</code>文件</p>\n<p>忽略文件的原则是：</p>\n<ol>\n<li>忽略操作系统自动生成的文件，比如缩略图等；</li>\n<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件；</li>\n<li>就没必要放进版本库，比如Java编译产生的.class文件；</li>\n<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.xcuserstate</span><br><span class=\"line\">project.xcworkspace</span><br><span class=\"line\">xcuserdata</span><br><span class=\"line\">UserInterfaceState.xcuserstate</span><br><span class=\"line\">project.xcworkspace/</span><br><span class=\"line\">xcuserdata/</span><br><span class=\"line\">UserInterface.xcuserstate</span><br></pre></td></tr></table></figure>\n\n<p>如果存在文件，需要先清理缓存文件 git rm –cached xx<br>或者找到文件后删除它，然后commit， push。</p>\n<h3 id=\"Git合并分支-amp-取消合并\"><a href=\"#Git合并分支-amp-取消合并\" class=\"headerlink\" title=\"Git合并分支&amp;取消合并\"></a>Git合并分支&amp;取消合并</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 合并分支dev</span><br><span class=\"line\">git merge dev</span><br><span class=\"line\">// 取消合并</span><br><span class=\"line\">git merge --abort</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><h3 id=\"丢弃本地修改\"><a href=\"#丢弃本地修改\" class=\"headerlink\" title=\"丢弃本地修改\"></a>丢弃本地修改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态</span><br><span class=\"line\">git stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。</span><br><span class=\"line\">git reset --hard HASH #返回到某个节点，不保留修改。</span><br><span class=\"line\">git reset --soft HASH #返回到某个节点。保留修改</span><br><span class=\"line\"></span><br><span class=\"line\">git clean -df #返回到某个节点</span><br><span class=\"line\">git clean 参数</span><br><span class=\"line\">    -n 显示 将要 删除的 文件 和  目录</span><br><span class=\"line\">    -f 删除 文件</span><br><span class=\"line\">    -df 删除 文件 和 目录</span><br></pre></td></tr></table></figure>\n\n<p>丢弃本地修改的所有文件（新增、删除、修改）</p>\n<p><code>git checkout . &amp;&amp; git clean -xdf</code></p>\n<h3 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看分支</span><br><span class=\"line\">git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除本地分支</span><br><span class=\"line\">git branch -D &lt;BranchName&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete &lt;BranchName&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tags\"><a href=\"#Tags\" class=\"headerlink\" title=\"Tags\"></a>Tags</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-remote --tags origin  # 查询远程tags</span><br><span class=\"line\"></span><br><span class=\"line\">git tag  # 列出所有tag</span><br><span class=\"line\">git tag -l v1.* #列出符合条件的tag（筛选作用）</span><br><span class=\"line\"></span><br><span class=\"line\">git tag v1  # 创建tag</span><br><span class=\"line\">git tag -a -m &apos;first version&apos; v1  # 创建含标注tag</span><br><span class=\"line\">git tag -a f1bb97a(commit id) # 为之前提交打tag</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin --tags  # 推送所有本地tag到远程</span><br><span class=\"line\">git push origin v1  # 推送指定本地tag到远程</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -d v1  # 删除本地指定tag</span><br><span class=\"line\">git push origin :refs/tags/v1 # 删除远程指定tag</span><br><span class=\"line\"></span><br><span class=\"line\">git fetch origin v1 # 拉取远程指定tag</span><br><span class=\"line\">git show v1 # 显示指定tag详细信息</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -l | xargs git tag -d  # 删除所有本地分支</span><br><span class=\"line\">git fetch origin --prune  # 从远程拉取所有信息</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git忽略文件\"><a href=\"#Git忽略文件\" class=\"headerlink\" title=\"Git忽略文件\"></a>Git忽略文件</h3><p>创建<code>.gitignore</code>文件</p>\n<p>忽略文件的原则是：</p>\n<ol>\n<li>忽略操作系统自动生成的文件，比如缩略图等；</li>\n<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件；</li>\n<li>就没必要放进版本库，比如Java编译产生的.class文件；</li>\n<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.xcuserstate</span><br><span class=\"line\">project.xcworkspace</span><br><span class=\"line\">xcuserdata</span><br><span class=\"line\">UserInterfaceState.xcuserstate</span><br><span class=\"line\">project.xcworkspace/</span><br><span class=\"line\">xcuserdata/</span><br><span class=\"line\">UserInterface.xcuserstate</span><br></pre></td></tr></table></figure>\n\n<p>如果存在文件，需要先清理缓存文件 git rm –cached xx<br>或者找到文件后删除它，然后commit， push。</p>\n<h3 id=\"Git合并分支-amp-取消合并\"><a href=\"#Git合并分支-amp-取消合并\" class=\"headerlink\" title=\"Git合并分支&amp;取消合并\"></a>Git合并分支&amp;取消合并</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 合并分支dev</span><br><span class=\"line\">git merge dev</span><br><span class=\"line\">// 取消合并</span><br><span class=\"line\">git merge --abort</span><br></pre></td></tr></table></figure>\n\n"},{"title":"JavaScript","date":"2018-11-07T05:15:56.000Z","_content":"\n# 一、前言\n\n## JavaScript\n\n不例外，我们从`Hello, world`开始\n\n```HTML\n<html>\n<head>\n  <script>\n    alert('Hello, world');\n  </script>\n</head>\n<body>\n  ...\n</body>\n</html>\n```\n\n由`<script>...</script>`包含的代码就是JavaScript代码，它将直接被浏览器执行。\n\n## 如何运行JavaScirpt\n\n先创建一个`helloworid.html`文件，把代码\b复制到文件中，保存，用浏览器打开，就能看到一个\b`Hello，world`弹窗效果啦。\n**恭喜你，编程的第一步就从此开始，走向\b\b人生巅峰，谱写你的辉煌传奇！**\n\n# 二、基础\n\n## 基础语法\n\n每一个语句以`;`结束，语句块`{...}`,但JavaScript并不强制要求在每个语句的结尾加`;`，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上`;`\n**让JavaScript引擎自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致**\n\n## 注释\n\n以`//`开头直到行末的字符被视为行注释，注释是给开发人员看的，JavaScript引擎会自动忽略：\n\n```JavaScript\n// 这是一行注释\nalert('hello'); // 这也是注释\n```\n\n块注释`/*...*/`把多行字符包裹起来，把一大“块”视为一个注释\n\n```JavaScript\n/* 从这里开始是块注释\n仍然是注释\n仍然是注释\n注释结束 */\n```\n\n## 数据类型\n\n> **值类型**(基础类型)：字符串(`String`)、数字(`Number`)、布尔(`Boolean`)、对空(`Null`)、未定义(`Undefined`)、`Symbol`。\n**引用数据类型**：对象(`Object`)、数组(`Array`)、函数(`Function`)。\n\n*注：`Symbol` 是 `ES6` 引入了一种新的原始数据类型，表示独一无二的值。*\n\n**`typeof`运算符** 可以返回一个值得数据类型\n\n> typeof 运算符\ninstanceof 运算符\nObject.prototype.toString 方法\n\n```JavaScript\ntypeof 123 // \"number\"\ntypeof '123' // \"string\"\ntypeof false // \"boolean\"\nfunction f() {}\ntypeof f // \"function\"\ntypeof undefined // \"undefined\"\n\n// instanceof\nvar o = {};\nvar a = [];\no instanceof Array // false\na instanceof Array // true\n```\n\n### \b字符串(String)\n\n可以使用`双引号`或`单引号`，字符串中可以使用引号，只要不匹配包围字符串的引号即可\n\n```JavaScript\n\"I'm OK\";\n```\n\n字符串内部既包含`'`又包含`\"`,可以用转义字符`\\`来标识\n\n```JavaScript\n'I\\'m \\\"OK\\\"!';\n```\n\n#### 转义字符`\\`\n\n| 代码 | 输出 |\n| ------ | ------ |\n| `\\n` | 换行 |\n| `\\r` | 回车 |\n| `\\t` | 制表符 |\n| `\\b` | 退格符 |\n| `\\f` | 换页符 |\n| `\\\\` | 反斜杠`\\` |\n| `\\'` | 单引号 |\n| `\\\"` | 双引号 |\n\nASCII字符可以以`\\x##`形式的十六进制表示，例如：\n\n```JavaScript\n'\\x41'; // 完全等同于 'A'\n```\n\n`\\u####`表示一个Unicode字符\n\n```JavaScript\n'\\u4e2d\\u6587'; // 完全等同于 '中文'\n```\n\n#### 多行字符串\n\n每行结尾用`\\n`，ES6标准新增，反引号表示\n\n```JavaScript\n`这是一个\n多行\n字符串`;\n```\n\n#### 模板字符串\n\n多个字符串连接起来，可以用`+`号连接\n\nES6新增了一种模板字符串，用反斜杠表示，字符串里的变量`${name}`表示，自动替换字符串中的变量：\n\n```JavaScript\nvar name = '小明';\nvar age = 20;\nvar message = `你好, ${name}, 你今年${age}岁了!`;\n```\n\n#### 操作字符串\n\n获取字符串某个指定位置的字符，索引号从0开始\n\n```JavaScript\nvar s = 'Hello, world!';\n\ns[0]; // 'H'\ns[6]; // ' '\ns[7]; // 'w'\ns[12]; // '!'\ns[13]; // undefined 超出范围的索引不会报错，但一律返回undefined\n```\n\n**注意**：字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果。\n\n#### {% post_link js-string-method 字符串属性和方法 %}\n\n### 数字(Number)\n\n只要一种数据类型，不区分整数和浮点数\n\n`Infinity` - 无穷大\n\n`NaN` - 非数字值\n\n\n`Number`基本运算\n\n```JavaScript\n1 + 2;    // 3\n3 - 2;    // 1\n1 * 2;    // 2\n3 / 2;    // 1.5\n\n// % 求余\n10 % 3;    // 1\n10.5 % 3; // 1.5\n\n// Special\n2 / 0;    // Infinity\n0 / 0;    // NaN\n```\n\n### 布尔(Boolean)\n\n布尔只有2个值：`true`、`false`\n\n基本运算：\n\n- `&&`运算是`与`运算，只有所有都为`true`，`&&`运算结果才是`true`\n\n  ```JavaScript\n  true && true;             // true\n  true && false;            // false\n  false && true && false;   // false\n  ```\n\n- `||`运算是`或`运算，只要其中有一个为`true`，`||`运算结果就是true`\n\n  ```JavaScript\n  false || false;           // false\n  true || false;            // true\n  false || true || false;   // true\n  ```\n\n- `!`运算是`非`运算，它是一个单目运算符，把`true`变成`false`，`false`变成`true`\n\n  ```JavaScript\n  ! true;       // 结果为false\n  ! false;      // 结果为true\n  ! (2 > 5);    // 结果为true\n  ```\n\n- 比较运算符 `>` `<` `>=` `<=` `==`\n\n  *布尔值经常用在条件判断中*\n\n  相等运算符 `===` `!==` `==` `!=`\n\n  **`==`：会自动转换数据类型再比较，在一些情况下会得到诡异的结果\n  `===`：不会自动转换数据类型，如果数据类型不一致返回`false`**\n\n  例如：\n  `NaN`这个特殊的Number与所有其他值都不相等，包括它自己\n\n  ```JavaScript\n  NaN === NaN; // false\n  ```\n\n  唯一能判断`NaN`的方法是通过`isNaN()`函数：\n\n  ```JavaScript\n  isNaN(NaN); // true\n  ```\n\n### 对空(Null)、未定义(Undefined)\n\n`null` 表示一个“空”的值，它和`0`以及空字符串`''`不同，`0`是一个数值，`''`表示长度为0的字符串，而`null`表示“空”。\n`undefined` 表示变量不含有值(值未定义)。\n\n大多数情况下，我们都应该用`null`。`undefined`仅仅在判断函数参数是否传递的情况下有用\n\n### 数值(Array)\n\n数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。例如：\n\n```JavaScript\nvar arr = [1, 2, 3.14, 'Hello', null, true];\narr[0]; // 返回索引为0的元素，即1\narr[5]; // 返回索引为5的元素，即true\narr[6]; // 索引超出了范围，返回undefined\n```\n\n数组用`[]`表示，元素之间用`,`分隔\n\n另一种创建数组的方法是通过`Array()`函数实现：\n\n```JavaScript\nnew Array(1, 2, 3); // 创建了数组[1, 2, 3]\n```\n\n### 对象(Object)\n\nJavaScript的对象是一组由键-值组成的无序集合，例如：\n\n```JavaScript\nvar person = {\n    name: 'Bob',\n    age: 20,\n    tags: ['js', 'web', 'mobile'],\n    city: 'Beijing',\n    hasCar: true,\n    zipcode: null\n};\n```\n\nJavaScript对象的键都是字符串类型，值可以是任意数据类型。\n\n要获取一个对象的属性，我们用对象变量.属性名的方式：\n\n```JavaScript\nperson.name; // 'Bob'\nperson.zipcode; // null\n```\n\n### 变量\n\n变量名是`大小写英文`、`数字`、`$`和`_`的组合，且不能用数字开头。\n变量名也不能是JavaScript的关键字，如`if`、`while`等\n申明一个变量用`var`语句.\n\n拥有动态类型，即相同的变量可用作不同的类型，例如：\n\n```JavaScript\nvar x;          // x 为undefined  \nvar x = 1;      // 现在 x 为数字\nvar x = \"ht\"    // 现在 x 为字符串\n```\n\n*这种变量本身类型不固定的语言称之为`动态语言`，与之对应的是静态语言。`静态语言`在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言*\n\n#### strict模式\n\n在`strict`模式下运行的JavaScript代码，强制通过`var`申明变量，未使用`var`申明变量就使用的，将导致运行错误。\n\n启用strict模式的方法是在JavaScript代码的第一行写上：\n\n```JavaScript\n'use strict';\n```\n\n这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。","source":"_posts/javascript.md","raw":"---\ntitle: JavaScript\ndate: 2018-11-07 13:15:56\ntags:\ncategories: JavaScript\n---\n\n# 一、前言\n\n## JavaScript\n\n不例外，我们从`Hello, world`开始\n\n```HTML\n<html>\n<head>\n  <script>\n    alert('Hello, world');\n  </script>\n</head>\n<body>\n  ...\n</body>\n</html>\n```\n\n由`<script>...</script>`包含的代码就是JavaScript代码，它将直接被浏览器执行。\n\n## 如何运行JavaScirpt\n\n先创建一个`helloworid.html`文件，把代码\b复制到文件中，保存，用浏览器打开，就能看到一个\b`Hello，world`弹窗效果啦。\n**恭喜你，编程的第一步就从此开始，走向\b\b人生巅峰，谱写你的辉煌传奇！**\n\n# 二、基础\n\n## 基础语法\n\n每一个语句以`;`结束，语句块`{...}`,但JavaScript并不强制要求在每个语句的结尾加`;`，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上`;`\n**让JavaScript引擎自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致**\n\n## 注释\n\n以`//`开头直到行末的字符被视为行注释，注释是给开发人员看的，JavaScript引擎会自动忽略：\n\n```JavaScript\n// 这是一行注释\nalert('hello'); // 这也是注释\n```\n\n块注释`/*...*/`把多行字符包裹起来，把一大“块”视为一个注释\n\n```JavaScript\n/* 从这里开始是块注释\n仍然是注释\n仍然是注释\n注释结束 */\n```\n\n## 数据类型\n\n> **值类型**(基础类型)：字符串(`String`)、数字(`Number`)、布尔(`Boolean`)、对空(`Null`)、未定义(`Undefined`)、`Symbol`。\n**引用数据类型**：对象(`Object`)、数组(`Array`)、函数(`Function`)。\n\n*注：`Symbol` 是 `ES6` 引入了一种新的原始数据类型，表示独一无二的值。*\n\n**`typeof`运算符** 可以返回一个值得数据类型\n\n> typeof 运算符\ninstanceof 运算符\nObject.prototype.toString 方法\n\n```JavaScript\ntypeof 123 // \"number\"\ntypeof '123' // \"string\"\ntypeof false // \"boolean\"\nfunction f() {}\ntypeof f // \"function\"\ntypeof undefined // \"undefined\"\n\n// instanceof\nvar o = {};\nvar a = [];\no instanceof Array // false\na instanceof Array // true\n```\n\n### \b字符串(String)\n\n可以使用`双引号`或`单引号`，字符串中可以使用引号，只要不匹配包围字符串的引号即可\n\n```JavaScript\n\"I'm OK\";\n```\n\n字符串内部既包含`'`又包含`\"`,可以用转义字符`\\`来标识\n\n```JavaScript\n'I\\'m \\\"OK\\\"!';\n```\n\n#### 转义字符`\\`\n\n| 代码 | 输出 |\n| ------ | ------ |\n| `\\n` | 换行 |\n| `\\r` | 回车 |\n| `\\t` | 制表符 |\n| `\\b` | 退格符 |\n| `\\f` | 换页符 |\n| `\\\\` | 反斜杠`\\` |\n| `\\'` | 单引号 |\n| `\\\"` | 双引号 |\n\nASCII字符可以以`\\x##`形式的十六进制表示，例如：\n\n```JavaScript\n'\\x41'; // 完全等同于 'A'\n```\n\n`\\u####`表示一个Unicode字符\n\n```JavaScript\n'\\u4e2d\\u6587'; // 完全等同于 '中文'\n```\n\n#### 多行字符串\n\n每行结尾用`\\n`，ES6标准新增，反引号表示\n\n```JavaScript\n`这是一个\n多行\n字符串`;\n```\n\n#### 模板字符串\n\n多个字符串连接起来，可以用`+`号连接\n\nES6新增了一种模板字符串，用反斜杠表示，字符串里的变量`${name}`表示，自动替换字符串中的变量：\n\n```JavaScript\nvar name = '小明';\nvar age = 20;\nvar message = `你好, ${name}, 你今年${age}岁了!`;\n```\n\n#### 操作字符串\n\n获取字符串某个指定位置的字符，索引号从0开始\n\n```JavaScript\nvar s = 'Hello, world!';\n\ns[0]; // 'H'\ns[6]; // ' '\ns[7]; // 'w'\ns[12]; // '!'\ns[13]; // undefined 超出范围的索引不会报错，但一律返回undefined\n```\n\n**注意**：字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果。\n\n#### {% post_link js-string-method 字符串属性和方法 %}\n\n### 数字(Number)\n\n只要一种数据类型，不区分整数和浮点数\n\n`Infinity` - 无穷大\n\n`NaN` - 非数字值\n\n\n`Number`基本运算\n\n```JavaScript\n1 + 2;    // 3\n3 - 2;    // 1\n1 * 2;    // 2\n3 / 2;    // 1.5\n\n// % 求余\n10 % 3;    // 1\n10.5 % 3; // 1.5\n\n// Special\n2 / 0;    // Infinity\n0 / 0;    // NaN\n```\n\n### 布尔(Boolean)\n\n布尔只有2个值：`true`、`false`\n\n基本运算：\n\n- `&&`运算是`与`运算，只有所有都为`true`，`&&`运算结果才是`true`\n\n  ```JavaScript\n  true && true;             // true\n  true && false;            // false\n  false && true && false;   // false\n  ```\n\n- `||`运算是`或`运算，只要其中有一个为`true`，`||`运算结果就是true`\n\n  ```JavaScript\n  false || false;           // false\n  true || false;            // true\n  false || true || false;   // true\n  ```\n\n- `!`运算是`非`运算，它是一个单目运算符，把`true`变成`false`，`false`变成`true`\n\n  ```JavaScript\n  ! true;       // 结果为false\n  ! false;      // 结果为true\n  ! (2 > 5);    // 结果为true\n  ```\n\n- 比较运算符 `>` `<` `>=` `<=` `==`\n\n  *布尔值经常用在条件判断中*\n\n  相等运算符 `===` `!==` `==` `!=`\n\n  **`==`：会自动转换数据类型再比较，在一些情况下会得到诡异的结果\n  `===`：不会自动转换数据类型，如果数据类型不一致返回`false`**\n\n  例如：\n  `NaN`这个特殊的Number与所有其他值都不相等，包括它自己\n\n  ```JavaScript\n  NaN === NaN; // false\n  ```\n\n  唯一能判断`NaN`的方法是通过`isNaN()`函数：\n\n  ```JavaScript\n  isNaN(NaN); // true\n  ```\n\n### 对空(Null)、未定义(Undefined)\n\n`null` 表示一个“空”的值，它和`0`以及空字符串`''`不同，`0`是一个数值，`''`表示长度为0的字符串，而`null`表示“空”。\n`undefined` 表示变量不含有值(值未定义)。\n\n大多数情况下，我们都应该用`null`。`undefined`仅仅在判断函数参数是否传递的情况下有用\n\n### 数值(Array)\n\n数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。例如：\n\n```JavaScript\nvar arr = [1, 2, 3.14, 'Hello', null, true];\narr[0]; // 返回索引为0的元素，即1\narr[5]; // 返回索引为5的元素，即true\narr[6]; // 索引超出了范围，返回undefined\n```\n\n数组用`[]`表示，元素之间用`,`分隔\n\n另一种创建数组的方法是通过`Array()`函数实现：\n\n```JavaScript\nnew Array(1, 2, 3); // 创建了数组[1, 2, 3]\n```\n\n### 对象(Object)\n\nJavaScript的对象是一组由键-值组成的无序集合，例如：\n\n```JavaScript\nvar person = {\n    name: 'Bob',\n    age: 20,\n    tags: ['js', 'web', 'mobile'],\n    city: 'Beijing',\n    hasCar: true,\n    zipcode: null\n};\n```\n\nJavaScript对象的键都是字符串类型，值可以是任意数据类型。\n\n要获取一个对象的属性，我们用对象变量.属性名的方式：\n\n```JavaScript\nperson.name; // 'Bob'\nperson.zipcode; // null\n```\n\n### 变量\n\n变量名是`大小写英文`、`数字`、`$`和`_`的组合，且不能用数字开头。\n变量名也不能是JavaScript的关键字，如`if`、`while`等\n申明一个变量用`var`语句.\n\n拥有动态类型，即相同的变量可用作不同的类型，例如：\n\n```JavaScript\nvar x;          // x 为undefined  \nvar x = 1;      // 现在 x 为数字\nvar x = \"ht\"    // 现在 x 为字符串\n```\n\n*这种变量本身类型不固定的语言称之为`动态语言`，与之对应的是静态语言。`静态语言`在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言*\n\n#### strict模式\n\n在`strict`模式下运行的JavaScript代码，强制通过`var`申明变量，未使用`var`申明变量就使用的，将导致运行错误。\n\n启用strict模式的方法是在JavaScript代码的第一行写上：\n\n```JavaScript\n'use strict';\n```\n\n这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。","slug":"javascript","published":1,"updated":"2019-07-08T06:06:28.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp1z0006ib368pk4ls7u","content":"<h1 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h1><h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p>不例外，我们从<code>Hello, world</code>开始</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    alert('Hello, world');</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>由<code>&lt;script&gt;...&lt;/script&gt;</code>包含的代码就是JavaScript代码，它将直接被浏览器执行。</p>\n<h2 id=\"如何运行JavaScirpt\"><a href=\"#如何运行JavaScirpt\" class=\"headerlink\" title=\"如何运行JavaScirpt\"></a>如何运行JavaScirpt</h2><p>先创建一个<code>helloworid.html</code>文件，把代码\b复制到文件中，保存，用浏览器打开，就能看到一个\b<code>Hello，world</code>弹窗效果啦。<br><strong>恭喜你，编程的第一步就从此开始，走向\b\b人生巅峰，谱写你的辉煌传奇！</strong></p>\n<h1 id=\"二、基础\"><a href=\"#二、基础\" class=\"headerlink\" title=\"二、基础\"></a>二、基础</h1><h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><p>每一个语句以<code>;</code>结束，语句块<code>{...}</code>,但JavaScript并不强制要求在每个语句的结尾加<code>;</code>，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上<code>;</code><br><strong>让JavaScript引擎自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致</strong></p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>以<code>//</code>开头直到行末的字符被视为行注释，注释是给开发人员看的，JavaScript引擎会自动忽略：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一行注释</span></span><br><span class=\"line\">alert(<span class=\"string\">'hello'</span>); <span class=\"comment\">// 这也是注释</span></span><br></pre></td></tr></table></figure>\n\n<p>块注释<code>/*...*/</code>把多行字符包裹起来，把一大“块”视为一个注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 从这里开始是块注释</span></span><br><span class=\"line\"><span class=\"comment\">仍然是注释</span></span><br><span class=\"line\"><span class=\"comment\">仍然是注释</span></span><br><span class=\"line\"><span class=\"comment\">注释结束 */</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><blockquote>\n<p><strong>值类型</strong>(基础类型)：字符串(<code>String</code>)、数字(<code>Number</code>)、布尔(<code>Boolean</code>)、对空(<code>Null</code>)、未定义(<code>Undefined</code>)、<code>Symbol</code>。<br><strong>引用数据类型</strong>：对象(<code>Object</code>)、数组(<code>Array</code>)、函数(<code>Function</code>)。</p>\n</blockquote>\n<p><em>注：<code>Symbol</code> 是 <code>ES6</code> 引入了一种新的原始数据类型，表示独一无二的值。</em></p>\n<p><strong><code>typeof</code>运算符</strong> 可以返回一个值得数据类型</p>\n<blockquote>\n<p>typeof 运算符<br>instanceof 运算符<br>Object.prototype.toString 方法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">123</span> <span class=\"comment\">// \"number\"</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">'123'</span> <span class=\"comment\">// \"string\"</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">false</span> <span class=\"comment\">// \"boolean\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> f <span class=\"comment\">// \"function\"</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> <span class=\"comment\">// \"undefined\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// instanceof</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">o <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串-String\"><a href=\"#字符串-String\" class=\"headerlink\" title=\"\b字符串(String)\"></a>\b字符串(String)</h3><p>可以使用<code>双引号</code>或<code>单引号</code>，字符串中可以使用引号，只要不匹配包围字符串的引号即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"I'm OK\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>,可以用转义字符<code>\\</code>来标识</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'I\\'m \\\"OK\\\"!'</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\\\"></a>转义字符<code>\\</code></h4><table>\n<thead>\n<tr>\n<th>代码</th>\n<th>输出</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\n</code></td>\n<td>换行</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>回车</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>制表符</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>退格符</td>\n</tr>\n<tr>\n<td><code>\\f</code></td>\n<td>换页符</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>反斜杠<code>\\</code></td>\n</tr>\n<tr>\n<td><code>\\&#39;</code></td>\n<td>单引号</td>\n</tr>\n<tr>\n<td><code>\\&quot;</code></td>\n<td>双引号</td>\n</tr>\n</tbody></table>\n<p>ASCII字符可以以<code>\\x##</code>形式的十六进制表示，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'\\x41'</span>; <span class=\"comment\">// 完全等同于 'A'</span></span><br></pre></td></tr></table></figure>\n\n<p><code>\\u####</code>表示一个Unicode字符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'\\u4e2d\\u6587'</span>; <span class=\"comment\">// 完全等同于 '中文'</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h4><p>每行结尾用<code>\\n</code>，ES6标准新增，反引号表示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`这是一个</span></span><br><span class=\"line\"><span class=\"string\">多行</span></span><br><span class=\"line\"><span class=\"string\">字符串`</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><p>多个字符串连接起来，可以用<code>+</code>号连接</p>\n<p>ES6新增了一种模板字符串，用反斜杠表示，字符串里的变量<code>${name}</code>表示，自动替换字符串中的变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小明'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">`你好, <span class=\"subst\">$&#123;name&#125;</span>, 你今年<span class=\"subst\">$&#123;age&#125;</span>岁了!`</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"操作字符串\"><a href=\"#操作字符串\" class=\"headerlink\" title=\"操作字符串\"></a>操作字符串</h4><p>获取字符串某个指定位置的字符，索引号从0开始</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello, world!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s[<span class=\"number\">0</span>]; <span class=\"comment\">// 'H'</span></span><br><span class=\"line\">s[<span class=\"number\">6</span>]; <span class=\"comment\">// ' '</span></span><br><span class=\"line\">s[<span class=\"number\">7</span>]; <span class=\"comment\">// 'w'</span></span><br><span class=\"line\">s[<span class=\"number\">12</span>]; <span class=\"comment\">// '!'</span></span><br><span class=\"line\">s[<span class=\"number\">13</span>]; <span class=\"comment\">// undefined 超出范围的索引不会报错，但一律返回undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果。</p>\n<h4 id><a href=\"#\" class=\"headerlink\" title></a><a href=\"/2019/01/10/js-string-method/\" title=\"字符串属性和方法\">字符串属性和方法</a></h4><h3 id=\"数字-Number\"><a href=\"#数字-Number\" class=\"headerlink\" title=\"数字(Number)\"></a>数字(Number)</h3><p>只要一种数据类型，不区分整数和浮点数</p>\n<p><code>Infinity</code> - 无穷大</p>\n<p><code>NaN</code> - 非数字值</p>\n<p><code>Number</code>基本运算</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span>;    <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"number\">3</span> - <span class=\"number\">2</span>;    <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"number\">2</span>;    <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"number\">3</span> / <span class=\"number\">2</span>;    <span class=\"comment\">// 1.5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// % 求余</span></span><br><span class=\"line\"><span class=\"number\">10</span> % <span class=\"number\">3</span>;    <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"number\">10.5</span> % <span class=\"number\">3</span>; <span class=\"comment\">// 1.5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Special</span></span><br><span class=\"line\"><span class=\"number\">2</span> / <span class=\"number\">0</span>;    <span class=\"comment\">// Infinity</span></span><br><span class=\"line\"><span class=\"number\">0</span> / <span class=\"number\">0</span>;    <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"布尔-Boolean\"><a href=\"#布尔-Boolean\" class=\"headerlink\" title=\"布尔(Boolean)\"></a>布尔(Boolean)</h3><p>布尔只有2个值：<code>true</code>、<code>false</code></p>\n<p>基本运算：</p>\n<ul>\n<li><p><code>&amp;&amp;</code>运算是<code>与</code>运算，只有所有都为<code>true</code>，<code>&amp;&amp;</code>运算结果才是<code>true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> &amp;&amp; <span class=\"literal\">true</span>;             <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> &amp;&amp; <span class=\"literal\">false</span>;            <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> &amp;&amp; <span class=\"literal\">true</span> &amp;&amp; <span class=\"literal\">false</span>;   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>||</code>运算是<code>或</code>运算，只要其中有一个为<code>true</code>，<code>||</code>运算结果就是true`</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span> || <span class=\"literal\">false</span>;           <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">true</span> || <span class=\"literal\">false</span>;            <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> || <span class=\"literal\">true</span> || <span class=\"literal\">false</span>;   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>!</code>运算是<code>非</code>运算，它是一个单目运算符，把<code>true</code>变成<code>false</code>，<code>false</code>变成<code>true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! <span class=\"literal\">true</span>;       <span class=\"comment\">// 结果为false</span></span><br><span class=\"line\">! <span class=\"literal\">false</span>;      <span class=\"comment\">// 结果为true</span></span><br><span class=\"line\">! (<span class=\"number\">2</span> &gt; <span class=\"number\">5</span>);    <span class=\"comment\">// 结果为true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较运算符 <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>==</code></p>\n<p><em>布尔值经常用在条件判断中</em></p>\n<p>相等运算符 <code>===</code> <code>!==</code> <code>==</code> <code>!=</code></p>\n<p><strong><code>==</code>：会自动转换数据类型再比较，在一些情况下会得到诡异的结果<br><code>===</code>：不会自动转换数据类型，如果数据类型不一致返回<code>false</code></strong></p>\n<p>例如：<br><code>NaN</code>这个特殊的Number与所有其他值都不相等，包括它自己</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>; <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>唯一能判断<code>NaN</code>的方法是通过<code>isNaN()</code>函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"对空-Null-、未定义-Undefined\"><a href=\"#对空-Null-、未定义-Undefined\" class=\"headerlink\" title=\"对空(Null)、未定义(Undefined)\"></a>对空(Null)、未定义(Undefined)</h3><p><code>null</code> 表示一个“空”的值，它和<code>0</code>以及空字符串<code>&#39;&#39;</code>不同，<code>0</code>是一个数值，<code>&#39;&#39;</code>表示长度为0的字符串，而<code>null</code>表示“空”。<br><code>undefined</code> 表示变量不含有值(值未定义)。</p>\n<p>大多数情况下，我们都应该用<code>null</code>。<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用</p>\n<h3 id=\"数值-Array\"><a href=\"#数值-Array\" class=\"headerlink\" title=\"数值(Array)\"></a>数值(Array)</h3><p>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3.14</span>, <span class=\"string\">'Hello'</span>, <span class=\"literal\">null</span>, <span class=\"literal\">true</span>];</span><br><span class=\"line\">arr[<span class=\"number\">0</span>]; <span class=\"comment\">// 返回索引为0的元素，即1</span></span><br><span class=\"line\">arr[<span class=\"number\">5</span>]; <span class=\"comment\">// 返回索引为5的元素，即true</span></span><br><span class=\"line\">arr[<span class=\"number\">6</span>]; <span class=\"comment\">// 索引超出了范围，返回undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>数组用<code>[]</code>表示，元素之间用<code>,</code>分隔</p>\n<p>另一种创建数组的方法是通过<code>Array()</code>函数实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 创建了数组[1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象-Object\"><a href=\"#对象-Object\" class=\"headerlink\" title=\"对象(Object)\"></a>对象(Object)</h3><p>JavaScript的对象是一组由键-值组成的无序集合，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Bob'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">20</span>,</span><br><span class=\"line\">    tags: [<span class=\"string\">'js'</span>, <span class=\"string\">'web'</span>, <span class=\"string\">'mobile'</span>],</span><br><span class=\"line\">    city: <span class=\"string\">'Beijing'</span>,</span><br><span class=\"line\">    hasCar: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    zipcode: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>JavaScript对象的键都是字符串类型，值可以是任意数据类型。</p>\n<p>要获取一个对象的属性，我们用对象变量.属性名的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.name; <span class=\"comment\">// 'Bob'</span></span><br><span class=\"line\">person.zipcode; <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量名是<code>大小写英文</code>、<code>数字</code>、<code>$</code>和<code>_</code>的组合，且不能用数字开头。<br>变量名也不能是JavaScript的关键字，如<code>if</code>、<code>while</code>等<br>申明一个变量用<code>var</code>语句.</p>\n<p>拥有动态类型，即相同的变量可用作不同的类型，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;          <span class=\"comment\">// x 为undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;      <span class=\"comment\">// 现在 x 为数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">\"ht\"</span>    <span class=\"comment\">// 现在 x 为字符串</span></span><br></pre></td></tr></table></figure>\n\n<p><em>这种变量本身类型不固定的语言称之为<code>动态语言</code>，与之对应的是静态语言。<code>静态语言</code>在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言</em></p>\n<h4 id=\"strict模式\"><a href=\"#strict模式\" class=\"headerlink\" title=\"strict模式\"></a>strict模式</h4><p>在<code>strict</code>模式下运行的JavaScript代码，强制通过<code>var</code>申明变量，未使用<code>var</code>申明变量就使用的，将导致运行错误。</p>\n<p>启用strict模式的方法是在JavaScript代码的第一行写上：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h1><h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p>不例外，我们从<code>Hello, world</code>开始</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    alert('Hello, world');</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>由<code>&lt;script&gt;...&lt;/script&gt;</code>包含的代码就是JavaScript代码，它将直接被浏览器执行。</p>\n<h2 id=\"如何运行JavaScirpt\"><a href=\"#如何运行JavaScirpt\" class=\"headerlink\" title=\"如何运行JavaScirpt\"></a>如何运行JavaScirpt</h2><p>先创建一个<code>helloworid.html</code>文件，把代码\b复制到文件中，保存，用浏览器打开，就能看到一个\b<code>Hello，world</code>弹窗效果啦。<br><strong>恭喜你，编程的第一步就从此开始，走向\b\b人生巅峰，谱写你的辉煌传奇！</strong></p>\n<h1 id=\"二、基础\"><a href=\"#二、基础\" class=\"headerlink\" title=\"二、基础\"></a>二、基础</h1><h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><p>每一个语句以<code>;</code>结束，语句块<code>{...}</code>,但JavaScript并不强制要求在每个语句的结尾加<code>;</code>，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上<code>;</code><br><strong>让JavaScript引擎自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致</strong></p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>以<code>//</code>开头直到行末的字符被视为行注释，注释是给开发人员看的，JavaScript引擎会自动忽略：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一行注释</span></span><br><span class=\"line\">alert(<span class=\"string\">'hello'</span>); <span class=\"comment\">// 这也是注释</span></span><br></pre></td></tr></table></figure>\n\n<p>块注释<code>/*...*/</code>把多行字符包裹起来，把一大“块”视为一个注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 从这里开始是块注释</span></span><br><span class=\"line\"><span class=\"comment\">仍然是注释</span></span><br><span class=\"line\"><span class=\"comment\">仍然是注释</span></span><br><span class=\"line\"><span class=\"comment\">注释结束 */</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><blockquote>\n<p><strong>值类型</strong>(基础类型)：字符串(<code>String</code>)、数字(<code>Number</code>)、布尔(<code>Boolean</code>)、对空(<code>Null</code>)、未定义(<code>Undefined</code>)、<code>Symbol</code>。<br><strong>引用数据类型</strong>：对象(<code>Object</code>)、数组(<code>Array</code>)、函数(<code>Function</code>)。</p>\n</blockquote>\n<p><em>注：<code>Symbol</code> 是 <code>ES6</code> 引入了一种新的原始数据类型，表示独一无二的值。</em></p>\n<p><strong><code>typeof</code>运算符</strong> 可以返回一个值得数据类型</p>\n<blockquote>\n<p>typeof 运算符<br>instanceof 运算符<br>Object.prototype.toString 方法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">123</span> <span class=\"comment\">// \"number\"</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">'123'</span> <span class=\"comment\">// \"string\"</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">false</span> <span class=\"comment\">// \"boolean\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> f <span class=\"comment\">// \"function\"</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> <span class=\"comment\">// \"undefined\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// instanceof</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">o <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串-String\"><a href=\"#字符串-String\" class=\"headerlink\" title=\"\b字符串(String)\"></a>\b字符串(String)</h3><p>可以使用<code>双引号</code>或<code>单引号</code>，字符串中可以使用引号，只要不匹配包围字符串的引号即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"I'm OK\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>,可以用转义字符<code>\\</code>来标识</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'I\\'m \\\"OK\\\"!'</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\\\"></a>转义字符<code>\\</code></h4><table>\n<thead>\n<tr>\n<th>代码</th>\n<th>输出</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\n</code></td>\n<td>换行</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>回车</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>制表符</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>退格符</td>\n</tr>\n<tr>\n<td><code>\\f</code></td>\n<td>换页符</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>反斜杠<code>\\</code></td>\n</tr>\n<tr>\n<td><code>\\&#39;</code></td>\n<td>单引号</td>\n</tr>\n<tr>\n<td><code>\\&quot;</code></td>\n<td>双引号</td>\n</tr>\n</tbody></table>\n<p>ASCII字符可以以<code>\\x##</code>形式的十六进制表示，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'\\x41'</span>; <span class=\"comment\">// 完全等同于 'A'</span></span><br></pre></td></tr></table></figure>\n\n<p><code>\\u####</code>表示一个Unicode字符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'\\u4e2d\\u6587'</span>; <span class=\"comment\">// 完全等同于 '中文'</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h4><p>每行结尾用<code>\\n</code>，ES6标准新增，反引号表示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`这是一个</span></span><br><span class=\"line\"><span class=\"string\">多行</span></span><br><span class=\"line\"><span class=\"string\">字符串`</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><p>多个字符串连接起来，可以用<code>+</code>号连接</p>\n<p>ES6新增了一种模板字符串，用反斜杠表示，字符串里的变量<code>${name}</code>表示，自动替换字符串中的变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小明'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">`你好, <span class=\"subst\">$&#123;name&#125;</span>, 你今年<span class=\"subst\">$&#123;age&#125;</span>岁了!`</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"操作字符串\"><a href=\"#操作字符串\" class=\"headerlink\" title=\"操作字符串\"></a>操作字符串</h4><p>获取字符串某个指定位置的字符，索引号从0开始</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello, world!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s[<span class=\"number\">0</span>]; <span class=\"comment\">// 'H'</span></span><br><span class=\"line\">s[<span class=\"number\">6</span>]; <span class=\"comment\">// ' '</span></span><br><span class=\"line\">s[<span class=\"number\">7</span>]; <span class=\"comment\">// 'w'</span></span><br><span class=\"line\">s[<span class=\"number\">12</span>]; <span class=\"comment\">// '!'</span></span><br><span class=\"line\">s[<span class=\"number\">13</span>]; <span class=\"comment\">// undefined 超出范围的索引不会报错，但一律返回undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果。</p>\n<h4 id><a href=\"#\" class=\"headerlink\" title></a><a href=\"/2019/01/10/js-string-method/\" title=\"字符串属性和方法\">字符串属性和方法</a></h4><h3 id=\"数字-Number\"><a href=\"#数字-Number\" class=\"headerlink\" title=\"数字(Number)\"></a>数字(Number)</h3><p>只要一种数据类型，不区分整数和浮点数</p>\n<p><code>Infinity</code> - 无穷大</p>\n<p><code>NaN</code> - 非数字值</p>\n<p><code>Number</code>基本运算</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span>;    <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"number\">3</span> - <span class=\"number\">2</span>;    <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"number\">2</span>;    <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"number\">3</span> / <span class=\"number\">2</span>;    <span class=\"comment\">// 1.5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// % 求余</span></span><br><span class=\"line\"><span class=\"number\">10</span> % <span class=\"number\">3</span>;    <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"number\">10.5</span> % <span class=\"number\">3</span>; <span class=\"comment\">// 1.5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Special</span></span><br><span class=\"line\"><span class=\"number\">2</span> / <span class=\"number\">0</span>;    <span class=\"comment\">// Infinity</span></span><br><span class=\"line\"><span class=\"number\">0</span> / <span class=\"number\">0</span>;    <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"布尔-Boolean\"><a href=\"#布尔-Boolean\" class=\"headerlink\" title=\"布尔(Boolean)\"></a>布尔(Boolean)</h3><p>布尔只有2个值：<code>true</code>、<code>false</code></p>\n<p>基本运算：</p>\n<ul>\n<li><p><code>&amp;&amp;</code>运算是<code>与</code>运算，只有所有都为<code>true</code>，<code>&amp;&amp;</code>运算结果才是<code>true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> &amp;&amp; <span class=\"literal\">true</span>;             <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> &amp;&amp; <span class=\"literal\">false</span>;            <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> &amp;&amp; <span class=\"literal\">true</span> &amp;&amp; <span class=\"literal\">false</span>;   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>||</code>运算是<code>或</code>运算，只要其中有一个为<code>true</code>，<code>||</code>运算结果就是true`</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span> || <span class=\"literal\">false</span>;           <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">true</span> || <span class=\"literal\">false</span>;            <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> || <span class=\"literal\">true</span> || <span class=\"literal\">false</span>;   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>!</code>运算是<code>非</code>运算，它是一个单目运算符，把<code>true</code>变成<code>false</code>，<code>false</code>变成<code>true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! <span class=\"literal\">true</span>;       <span class=\"comment\">// 结果为false</span></span><br><span class=\"line\">! <span class=\"literal\">false</span>;      <span class=\"comment\">// 结果为true</span></span><br><span class=\"line\">! (<span class=\"number\">2</span> &gt; <span class=\"number\">5</span>);    <span class=\"comment\">// 结果为true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较运算符 <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>==</code></p>\n<p><em>布尔值经常用在条件判断中</em></p>\n<p>相等运算符 <code>===</code> <code>!==</code> <code>==</code> <code>!=</code></p>\n<p><strong><code>==</code>：会自动转换数据类型再比较，在一些情况下会得到诡异的结果<br><code>===</code>：不会自动转换数据类型，如果数据类型不一致返回<code>false</code></strong></p>\n<p>例如：<br><code>NaN</code>这个特殊的Number与所有其他值都不相等，包括它自己</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>; <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>唯一能判断<code>NaN</code>的方法是通过<code>isNaN()</code>函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"对空-Null-、未定义-Undefined\"><a href=\"#对空-Null-、未定义-Undefined\" class=\"headerlink\" title=\"对空(Null)、未定义(Undefined)\"></a>对空(Null)、未定义(Undefined)</h3><p><code>null</code> 表示一个“空”的值，它和<code>0</code>以及空字符串<code>&#39;&#39;</code>不同，<code>0</code>是一个数值，<code>&#39;&#39;</code>表示长度为0的字符串，而<code>null</code>表示“空”。<br><code>undefined</code> 表示变量不含有值(值未定义)。</p>\n<p>大多数情况下，我们都应该用<code>null</code>。<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用</p>\n<h3 id=\"数值-Array\"><a href=\"#数值-Array\" class=\"headerlink\" title=\"数值(Array)\"></a>数值(Array)</h3><p>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3.14</span>, <span class=\"string\">'Hello'</span>, <span class=\"literal\">null</span>, <span class=\"literal\">true</span>];</span><br><span class=\"line\">arr[<span class=\"number\">0</span>]; <span class=\"comment\">// 返回索引为0的元素，即1</span></span><br><span class=\"line\">arr[<span class=\"number\">5</span>]; <span class=\"comment\">// 返回索引为5的元素，即true</span></span><br><span class=\"line\">arr[<span class=\"number\">6</span>]; <span class=\"comment\">// 索引超出了范围，返回undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>数组用<code>[]</code>表示，元素之间用<code>,</code>分隔</p>\n<p>另一种创建数组的方法是通过<code>Array()</code>函数实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 创建了数组[1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象-Object\"><a href=\"#对象-Object\" class=\"headerlink\" title=\"对象(Object)\"></a>对象(Object)</h3><p>JavaScript的对象是一组由键-值组成的无序集合，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Bob'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">20</span>,</span><br><span class=\"line\">    tags: [<span class=\"string\">'js'</span>, <span class=\"string\">'web'</span>, <span class=\"string\">'mobile'</span>],</span><br><span class=\"line\">    city: <span class=\"string\">'Beijing'</span>,</span><br><span class=\"line\">    hasCar: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    zipcode: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>JavaScript对象的键都是字符串类型，值可以是任意数据类型。</p>\n<p>要获取一个对象的属性，我们用对象变量.属性名的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.name; <span class=\"comment\">// 'Bob'</span></span><br><span class=\"line\">person.zipcode; <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量名是<code>大小写英文</code>、<code>数字</code>、<code>$</code>和<code>_</code>的组合，且不能用数字开头。<br>变量名也不能是JavaScript的关键字，如<code>if</code>、<code>while</code>等<br>申明一个变量用<code>var</code>语句.</p>\n<p>拥有动态类型，即相同的变量可用作不同的类型，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;          <span class=\"comment\">// x 为undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;      <span class=\"comment\">// 现在 x 为数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">\"ht\"</span>    <span class=\"comment\">// 现在 x 为字符串</span></span><br></pre></td></tr></table></figure>\n\n<p><em>这种变量本身类型不固定的语言称之为<code>动态语言</code>，与之对应的是静态语言。<code>静态语言</code>在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言</em></p>\n<h4 id=\"strict模式\"><a href=\"#strict模式\" class=\"headerlink\" title=\"strict模式\"></a>strict模式</h4><p>在<code>strict</code>模式下运行的JavaScript代码，强制通过<code>var</code>申明变量，未使用<code>var</code>申明变量就使用的，将导致运行错误。</p>\n<p>启用strict模式的方法是在JavaScript代码的第一行写上：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。</p>\n"},{"title":"字符串属性和方法","date":"2019-01-09T16:38:15.000Z","_content":"\n# 字符串属性和方法\n\n## 属性\n\n### `constructor` 返回创建字符串属性的函数\n\n  ```JavaScript\n  var s = 'Hello, world!';\n  s.constructor;   // function String() { [native code] }\n  ```\n\n### `prototype` 允许您向对象添加属性和方法\n\n  ```JavaScript\n  var s = new String('Jion');\n  s.prototype.name = 'world'; // 添加属性name\n  s.name;   // world\n  s.prototype.myFunc = function() {}  // 添加方法\n  s.myFunc();\n  ```\n\n### `length` 返回字符串的长度(字符数)\n\n  ```JavaScript\n  var s = 'Hello, world!';\n  s.length;  // 13\n  ```\n\n## 方法\n\n### `charAt()` 返回指定索引位置的字符\n\n  > string.charCodeAt(index)\n\n  ```JavaScript\n  var s = 'Hello, world';\n  s.charAt(1);  // e 索引从0开始\n  s.charAt(s.length-1);  // d 最后一个字符串\n  ```\n\n### `charCodeAt()` 返回指定索引位置字符的`Unicode`值\n  \n  > string.charCodeAt(index)\n\n  ```JavaScript\n  var s = 'Hello, world';\n  s.charCodeAt(0);  // 72\n  ```\n\n### `fromCharCode()` 将`Unicode`转换为字符串\n\n  > String.fromCharCode(n1, n2, ..., nX)\n\n  ```JavaScript\n  var n = String.fromCharCode(72, 69, 76, 76, 79);  // HELLO\n  ```\n\n### `indexOf()` 返回字符串中检索指定字符第一次出现的位置\n\n  > string.indexOf(searchvalue, start)\n\n  ```JavaScript\n  var s = 'Hello world, welcome to the JavaScript!';\n  var n = s.indexOf('l');  // 2\n  ```\n\n### `lastIndexOf()` 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\n\n  > string.lastIndexOf(searchvalue, start)\n\n  ```JavaScript\n  var s = 'Hello world';\n  var n = s.lastIndexOf('l');  // 8 索引从后(0)到前\n  ```\n\n### `slice()` 返回两个指定\b索引区间的字符\n\n  > string.slice(start, end)\n\n  提示： 如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。\n\n  ```javascript\n  var s = 'Hello world';\n  s.slice(0, 5);  // Hello 从索引0开始到5（不包括5）\n  s.slice(6);  // world 从索引6开始到结束\n  s.slice(-1);  // d 最后一个字符\n  ```\n\n### `substring()` 返回两个指定的索引区间的字符\n\n  > string.substring(from, to)\n\n    ```javascript\n    var s = 'Hello world';\n    s.substring(0, 5);  // Hello 从索引0开始到5（不包括5）\n    s.substring(6);  // world 从索引6开始到结束\n    ```\n\n### `substr()` 返回从索引开始指定长度的字符\n\n  > string.substr(start, length)\n\n  ```javascript\n  var s = 'Hello world';\n  s.substr(1, 2);  // el 从索引1开始2个长度\n  s.substr(6);  // lo world  从索引6开始到结束\n  ```\n\n**\b思考**：`slice()`、`substring()`、`substr()`区别\n\n`substring()`以两个参数中较小一个作为起始位置，较大的参数作为结束位置\n当参数为负数时，\n`slice()`将它字符串的长度与对应的负数相加，结果作为参数\n`substring()`将负参数都直接转换为0\n`substr()`将第一个参数与字符串长度相加后的结果作为第一个参数\n\n```javascript\nvar s = 'hello world';\n\n// substring\ns.substring(2, 8);  // llo wo\ns.substring(8, 2);  // llo wo\n\n// 负数\ns.slice(-3);      //  \ns.substring(-3);  // hello world\ns.substr(-3);     // rld\n\ns.slice(3, -4);   // lo w (3, 7)\ns.substring(3, -4); // hel (0, 3)\ns.substr(3, -4);    // 空字符串 索引为3长度为0\n```\n\n**注意:** IE对substr接收负值的处理有错，它会返回原始字符串。\n\n### `match()` 找到一个或多个正则表达式的匹配\n\n  如果没有找到任何匹配的文本，`match()`将返回`null`。否则，它将返回一个`array`，其中存放了与它找到的匹配文本有关的信息\n  > string.match(regexp)\n\n  ```javascript\n  var str = \"The rain in SPAIN stays mainly in the plain\";\n  var n = str.match(/ain/g);  // ain, ain, ain\n\n  // 不区分大小写\n  var m = str.match(/ain/gi);  // ain, AIN, ain, ain\n  ```\n\n### `search()` 检索与正则表达式相匹配的值\n\n  如果没有找到任何匹配的子串，则返回 -1。\n  > string.search(searchvalue)\n\n  ```javascript\n  var str = \"Mr. Blue has a blue house\";\n  var n = str.search(\"blue\");  // 15\n  var m = str.search(/blue/i);  // 4\n  ```\n\n### `toUpperCase()` 把一个字符串全部变为大写\n\n  > string.toUpperCase()\n\n  ```javascript\n  var s = 'Hello world';\n  s.toUpperCase();  // HELLO WORLD\n  ```\n\n### `toLowerCase()` 把一个字符串全部变成小写\n\n  > string.toLowerCase()\n\n  ```javascript\n  var s = 'Hello world';\n  s.toLowerCase();  // hello world\n  ```\n\n### `concat()` 连接两个或多个字符串，返回连接后的字符串\n\n  > string.concat(string1, string2, ..., stringX)\n\n  ```JavaScript\n  var s1 = 'Hello ';\n  var s2 = 'world!';\n  var n = s1.concat(s2);   // Hello world!\n  // 连接多个 , 隔开\n  var s3 = ' How are you!';\n  var m = s1.concat(s2, s3)  // Hello world! How are you!\n  ```\n\n### `replace()` 替换与正则表达式匹配的子串\n\n  注意：`replace()`方法不改变原始字符串。只执行一次替换\n  > string.replace(searchvalue, newvalue)\n\n  ```JavaScript\n  var s = 'hello world, good world'\n  var n = s.replace('world', 'javascript');  // hello javascript, good world\n\n  // 执行一个全局替换 正则表达式\n  var str = \"Mr Blue has a blue house and a blue car\";\n  var m = str.replace(/blue/g,\"red\"); // Mr Blue has a red house and a red car\n  \n  // 执行一个全局替换 忽略大小写\n  var o = str.replace(/blue/gi, \"red\"); // Mr red has a red house and a red car\n  ```\n\n### `split()` 把字符串分割为字符串数组\n\n  注意：`split()`方法不改变原始字符串。\n  如果把空字符串`(\"\")`用作`separator`，那么`stringObject`中的每个字符之间都会被分割.\n\n  > string.split(separator, limit)\n\n  ```javascript\n  var s = 'hello world';\n  s.split(\"\");  // ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']\n  s.split(\" \");  // ['hello', 'world']\n  ```\n\n### `trim()` 去除字符串两边的空白\n\n  > string.trim()\n\n  ```javascript\n  var s = ' hello world    ';\n  s.trim();  // hello world\n  ```\n\n### `valueOf()` 返回某个字符串对象的原始值\n\n  > string.valueOf()\n\n  ```javascript\n  var s = 'hello world';\n  s.valueOf();  // hello world\n  ```\n","source":"_posts/js-string-method.md","raw":"---\ntitle: 字符串属性和方法\ndate: 2019-01-10 00:38:15\ntags:\ncategories: JavaScript\n---\n\n# 字符串属性和方法\n\n## 属性\n\n### `constructor` 返回创建字符串属性的函数\n\n  ```JavaScript\n  var s = 'Hello, world!';\n  s.constructor;   // function String() { [native code] }\n  ```\n\n### `prototype` 允许您向对象添加属性和方法\n\n  ```JavaScript\n  var s = new String('Jion');\n  s.prototype.name = 'world'; // 添加属性name\n  s.name;   // world\n  s.prototype.myFunc = function() {}  // 添加方法\n  s.myFunc();\n  ```\n\n### `length` 返回字符串的长度(字符数)\n\n  ```JavaScript\n  var s = 'Hello, world!';\n  s.length;  // 13\n  ```\n\n## 方法\n\n### `charAt()` 返回指定索引位置的字符\n\n  > string.charCodeAt(index)\n\n  ```JavaScript\n  var s = 'Hello, world';\n  s.charAt(1);  // e 索引从0开始\n  s.charAt(s.length-1);  // d 最后一个字符串\n  ```\n\n### `charCodeAt()` 返回指定索引位置字符的`Unicode`值\n  \n  > string.charCodeAt(index)\n\n  ```JavaScript\n  var s = 'Hello, world';\n  s.charCodeAt(0);  // 72\n  ```\n\n### `fromCharCode()` 将`Unicode`转换为字符串\n\n  > String.fromCharCode(n1, n2, ..., nX)\n\n  ```JavaScript\n  var n = String.fromCharCode(72, 69, 76, 76, 79);  // HELLO\n  ```\n\n### `indexOf()` 返回字符串中检索指定字符第一次出现的位置\n\n  > string.indexOf(searchvalue, start)\n\n  ```JavaScript\n  var s = 'Hello world, welcome to the JavaScript!';\n  var n = s.indexOf('l');  // 2\n  ```\n\n### `lastIndexOf()` 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\n\n  > string.lastIndexOf(searchvalue, start)\n\n  ```JavaScript\n  var s = 'Hello world';\n  var n = s.lastIndexOf('l');  // 8 索引从后(0)到前\n  ```\n\n### `slice()` 返回两个指定\b索引区间的字符\n\n  > string.slice(start, end)\n\n  提示： 如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。\n\n  ```javascript\n  var s = 'Hello world';\n  s.slice(0, 5);  // Hello 从索引0开始到5（不包括5）\n  s.slice(6);  // world 从索引6开始到结束\n  s.slice(-1);  // d 最后一个字符\n  ```\n\n### `substring()` 返回两个指定的索引区间的字符\n\n  > string.substring(from, to)\n\n    ```javascript\n    var s = 'Hello world';\n    s.substring(0, 5);  // Hello 从索引0开始到5（不包括5）\n    s.substring(6);  // world 从索引6开始到结束\n    ```\n\n### `substr()` 返回从索引开始指定长度的字符\n\n  > string.substr(start, length)\n\n  ```javascript\n  var s = 'Hello world';\n  s.substr(1, 2);  // el 从索引1开始2个长度\n  s.substr(6);  // lo world  从索引6开始到结束\n  ```\n\n**\b思考**：`slice()`、`substring()`、`substr()`区别\n\n`substring()`以两个参数中较小一个作为起始位置，较大的参数作为结束位置\n当参数为负数时，\n`slice()`将它字符串的长度与对应的负数相加，结果作为参数\n`substring()`将负参数都直接转换为0\n`substr()`将第一个参数与字符串长度相加后的结果作为第一个参数\n\n```javascript\nvar s = 'hello world';\n\n// substring\ns.substring(2, 8);  // llo wo\ns.substring(8, 2);  // llo wo\n\n// 负数\ns.slice(-3);      //  \ns.substring(-3);  // hello world\ns.substr(-3);     // rld\n\ns.slice(3, -4);   // lo w (3, 7)\ns.substring(3, -4); // hel (0, 3)\ns.substr(3, -4);    // 空字符串 索引为3长度为0\n```\n\n**注意:** IE对substr接收负值的处理有错，它会返回原始字符串。\n\n### `match()` 找到一个或多个正则表达式的匹配\n\n  如果没有找到任何匹配的文本，`match()`将返回`null`。否则，它将返回一个`array`，其中存放了与它找到的匹配文本有关的信息\n  > string.match(regexp)\n\n  ```javascript\n  var str = \"The rain in SPAIN stays mainly in the plain\";\n  var n = str.match(/ain/g);  // ain, ain, ain\n\n  // 不区分大小写\n  var m = str.match(/ain/gi);  // ain, AIN, ain, ain\n  ```\n\n### `search()` 检索与正则表达式相匹配的值\n\n  如果没有找到任何匹配的子串，则返回 -1。\n  > string.search(searchvalue)\n\n  ```javascript\n  var str = \"Mr. Blue has a blue house\";\n  var n = str.search(\"blue\");  // 15\n  var m = str.search(/blue/i);  // 4\n  ```\n\n### `toUpperCase()` 把一个字符串全部变为大写\n\n  > string.toUpperCase()\n\n  ```javascript\n  var s = 'Hello world';\n  s.toUpperCase();  // HELLO WORLD\n  ```\n\n### `toLowerCase()` 把一个字符串全部变成小写\n\n  > string.toLowerCase()\n\n  ```javascript\n  var s = 'Hello world';\n  s.toLowerCase();  // hello world\n  ```\n\n### `concat()` 连接两个或多个字符串，返回连接后的字符串\n\n  > string.concat(string1, string2, ..., stringX)\n\n  ```JavaScript\n  var s1 = 'Hello ';\n  var s2 = 'world!';\n  var n = s1.concat(s2);   // Hello world!\n  // 连接多个 , 隔开\n  var s3 = ' How are you!';\n  var m = s1.concat(s2, s3)  // Hello world! How are you!\n  ```\n\n### `replace()` 替换与正则表达式匹配的子串\n\n  注意：`replace()`方法不改变原始字符串。只执行一次替换\n  > string.replace(searchvalue, newvalue)\n\n  ```JavaScript\n  var s = 'hello world, good world'\n  var n = s.replace('world', 'javascript');  // hello javascript, good world\n\n  // 执行一个全局替换 正则表达式\n  var str = \"Mr Blue has a blue house and a blue car\";\n  var m = str.replace(/blue/g,\"red\"); // Mr Blue has a red house and a red car\n  \n  // 执行一个全局替换 忽略大小写\n  var o = str.replace(/blue/gi, \"red\"); // Mr red has a red house and a red car\n  ```\n\n### `split()` 把字符串分割为字符串数组\n\n  注意：`split()`方法不改变原始字符串。\n  如果把空字符串`(\"\")`用作`separator`，那么`stringObject`中的每个字符之间都会被分割.\n\n  > string.split(separator, limit)\n\n  ```javascript\n  var s = 'hello world';\n  s.split(\"\");  // ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']\n  s.split(\" \");  // ['hello', 'world']\n  ```\n\n### `trim()` 去除字符串两边的空白\n\n  > string.trim()\n\n  ```javascript\n  var s = ' hello world    ';\n  s.trim();  // hello world\n  ```\n\n### `valueOf()` 返回某个字符串对象的原始值\n\n  > string.valueOf()\n\n  ```javascript\n  var s = 'hello world';\n  s.valueOf();  // hello world\n  ```\n","slug":"js-string-method","published":1,"updated":"2019-07-08T06:06:28.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp200008ib36mg6mk99t","content":"<h1 id=\"字符串属性和方法\"><a href=\"#字符串属性和方法\" class=\"headerlink\" title=\"字符串属性和方法\"></a>字符串属性和方法</h1><h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><h3 id=\"constructor-返回创建字符串属性的函数\"><a href=\"#constructor-返回创建字符串属性的函数\" class=\"headerlink\" title=\"constructor 返回创建字符串属性的函数\"></a><code>constructor</code> 返回创建字符串属性的函数</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello, world!'</span>;</span><br><span class=\"line\">s.constructor;   <span class=\"comment\">// function String() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"prototype-允许您向对象添加属性和方法\"><a href=\"#prototype-允许您向对象添加属性和方法\" class=\"headerlink\" title=\"prototype 允许您向对象添加属性和方法\"></a><code>prototype</code> 允许您向对象添加属性和方法</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'Jion'</span>);</span><br><span class=\"line\">s.prototype.name = <span class=\"string\">'world'</span>; <span class=\"comment\">// 添加属性name</span></span><br><span class=\"line\">s.name;   <span class=\"comment\">// world</span></span><br><span class=\"line\">s.prototype.myFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;  <span class=\"comment\">// 添加方法</span></span><br><span class=\"line\">s.myFunc();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"length-返回字符串的长度-字符数\"><a href=\"#length-返回字符串的长度-字符数\" class=\"headerlink\" title=\"length 返回字符串的长度(字符数)\"></a><code>length</code> 返回字符串的长度(字符数)</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello, world!'</span>;</span><br><span class=\"line\">s.length;  <span class=\"comment\">// 13</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"charAt-返回指定索引位置的字符\"><a href=\"#charAt-返回指定索引位置的字符\" class=\"headerlink\" title=\"charAt() 返回指定索引位置的字符\"></a><code>charAt()</code> 返回指定索引位置的字符</h3><blockquote>\n<p>string.charCodeAt(index)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello, world'</span>;</span><br><span class=\"line\">s.charAt(<span class=\"number\">1</span>);  <span class=\"comment\">// e 索引从0开始</span></span><br><span class=\"line\">s.charAt(s.length<span class=\"number\">-1</span>);  <span class=\"comment\">// d 最后一个字符串</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"charCodeAt-返回指定索引位置字符的Unicode值\"><a href=\"#charCodeAt-返回指定索引位置字符的Unicode值\" class=\"headerlink\" title=\"charCodeAt() 返回指定索引位置字符的Unicode值\"></a><code>charCodeAt()</code> 返回指定索引位置字符的<code>Unicode</code>值</h3><blockquote>\n<p>string.charCodeAt(index)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello, world'</span>;</span><br><span class=\"line\">s.charCodeAt(<span class=\"number\">0</span>);  <span class=\"comment\">// 72</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fromCharCode-将Unicode转换为字符串\"><a href=\"#fromCharCode-将Unicode转换为字符串\" class=\"headerlink\" title=\"fromCharCode() 将Unicode转换为字符串\"></a><code>fromCharCode()</code> 将<code>Unicode</code>转换为字符串</h3><blockquote>\n<p>String.fromCharCode(n1, n2, …, nX)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">72</span>, <span class=\"number\">69</span>, <span class=\"number\">76</span>, <span class=\"number\">76</span>, <span class=\"number\">79</span>);  <span class=\"comment\">// HELLO</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"indexOf-返回字符串中检索指定字符第一次出现的位置\"><a href=\"#indexOf-返回字符串中检索指定字符第一次出现的位置\" class=\"headerlink\" title=\"indexOf() 返回字符串中检索指定字符第一次出现的位置\"></a><code>indexOf()</code> 返回字符串中检索指定字符第一次出现的位置</h3><blockquote>\n<p>string.indexOf(searchvalue, start)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world, welcome to the JavaScript!'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s.indexOf(<span class=\"string\">'l'</span>);  <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lastIndexOf-从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\"><a href=\"#lastIndexOf-从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\" class=\"headerlink\" title=\"lastIndexOf() 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\"></a><code>lastIndexOf()</code> 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置</h3><blockquote>\n<p>string.lastIndexOf(searchvalue, start)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s.lastIndexOf(<span class=\"string\">'l'</span>);  <span class=\"comment\">// 8 索引从后(0)到前</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"slice-返回两个指定索引区间的字符\"><a href=\"#slice-返回两个指定索引区间的字符\" class=\"headerlink\" title=\"slice() 返回两个指定\b索引区间的字符\"></a><code>slice()</code> 返回两个指定\b索引区间的字符</h3><blockquote>\n<p>string.slice(start, end)</p>\n</blockquote>\n<p>  提示： 如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world'</span>;</span><br><span class=\"line\">s.slice(<span class=\"number\">0</span>, <span class=\"number\">5</span>);  <span class=\"comment\">// Hello 从索引0开始到5（不包括5）</span></span><br><span class=\"line\">s.slice(<span class=\"number\">6</span>);  <span class=\"comment\">// world 从索引6开始到结束</span></span><br><span class=\"line\">s.slice(<span class=\"number\">-1</span>);  <span class=\"comment\">// d 最后一个字符</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"substring-返回两个指定的索引区间的字符\"><a href=\"#substring-返回两个指定的索引区间的字符\" class=\"headerlink\" title=\"substring() 返回两个指定的索引区间的字符\"></a><code>substring()</code> 返回两个指定的索引区间的字符</h3><blockquote>\n<p>string.substring(from, to)</p>\n</blockquote>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world'</span>;</span><br><span class=\"line\">s.substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>);  <span class=\"comment\">// Hello 从索引0开始到5（不包括5）</span></span><br><span class=\"line\">s.substring(<span class=\"number\">6</span>);  <span class=\"comment\">// world 从索引6开始到结束</span></span><br></pre></td></tr></table></figure></code></pre><h3 id=\"substr-返回从索引开始指定长度的字符\"><a href=\"#substr-返回从索引开始指定长度的字符\" class=\"headerlink\" title=\"substr() 返回从索引开始指定长度的字符\"></a><code>substr()</code> 返回从索引开始指定长度的字符</h3><blockquote>\n<p>string.substr(start, length)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world'</span>;</span><br><span class=\"line\">s.substr(<span class=\"number\">1</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// el 从索引1开始2个长度</span></span><br><span class=\"line\">s.substr(<span class=\"number\">6</span>);  <span class=\"comment\">// lo world  从索引6开始到结束</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>\b思考</strong>：<code>slice()</code>、<code>substring()</code>、<code>substr()</code>区别</p>\n<p><code>substring()</code>以两个参数中较小一个作为起始位置，较大的参数作为结束位置<br>当参数为负数时，<br><code>slice()</code>将它字符串的长度与对应的负数相加，结果作为参数<br><code>substring()</code>将负参数都直接转换为0<br><code>substr()</code>将第一个参数与字符串长度相加后的结果作为第一个参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// substring</span></span><br><span class=\"line\">s.substring(<span class=\"number\">2</span>, <span class=\"number\">8</span>);  <span class=\"comment\">// llo wo</span></span><br><span class=\"line\">s.substring(<span class=\"number\">8</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// llo wo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 负数</span></span><br><span class=\"line\">s.slice(<span class=\"number\">-3</span>);      <span class=\"comment\">//  </span></span><br><span class=\"line\">s.substring(<span class=\"number\">-3</span>);  <span class=\"comment\">// hello world</span></span><br><span class=\"line\">s.substr(<span class=\"number\">-3</span>);     <span class=\"comment\">// rld</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.slice(<span class=\"number\">3</span>, <span class=\"number\">-4</span>);   <span class=\"comment\">// lo w (3, 7)</span></span><br><span class=\"line\">s.substring(<span class=\"number\">3</span>, <span class=\"number\">-4</span>); <span class=\"comment\">// hel (0, 3)</span></span><br><span class=\"line\">s.substr(<span class=\"number\">3</span>, <span class=\"number\">-4</span>);    <span class=\"comment\">// 空字符串 索引为3长度为0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意:</strong> IE对substr接收负值的处理有错，它会返回原始字符串。</p>\n<h3 id=\"match-找到一个或多个正则表达式的匹配\"><a href=\"#match-找到一个或多个正则表达式的匹配\" class=\"headerlink\" title=\"match() 找到一个或多个正则表达式的匹配\"></a><code>match()</code> 找到一个或多个正则表达式的匹配</h3><p>  如果没有找到任何匹配的文本，<code>match()</code>将返回<code>null</code>。否则，它将返回一个<code>array</code>，其中存放了与它找到的匹配文本有关的信息</p>\n<blockquote>\n<p>string.match(regexp)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"The rain in SPAIN stays mainly in the plain\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = str.match(<span class=\"regexp\">/ain/g</span>);  <span class=\"comment\">// ain, ain, ain</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不区分大小写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = str.match(<span class=\"regexp\">/ain/gi</span>);  <span class=\"comment\">// ain, AIN, ain, ain</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"search-检索与正则表达式相匹配的值\"><a href=\"#search-检索与正则表达式相匹配的值\" class=\"headerlink\" title=\"search() 检索与正则表达式相匹配的值\"></a><code>search()</code> 检索与正则表达式相匹配的值</h3><p>  如果没有找到任何匹配的子串，则返回 -1。</p>\n<blockquote>\n<p>string.search(searchvalue)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"Mr. Blue has a blue house\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = str.search(<span class=\"string\">\"blue\"</span>);  <span class=\"comment\">// 15</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = str.search(<span class=\"regexp\">/blue/i</span>);  <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toUpperCase-把一个字符串全部变为大写\"><a href=\"#toUpperCase-把一个字符串全部变为大写\" class=\"headerlink\" title=\"toUpperCase() 把一个字符串全部变为大写\"></a><code>toUpperCase()</code> 把一个字符串全部变为大写</h3><blockquote>\n<p>string.toUpperCase()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world'</span>;</span><br><span class=\"line\">s.toUpperCase();  <span class=\"comment\">// HELLO WORLD</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toLowerCase-把一个字符串全部变成小写\"><a href=\"#toLowerCase-把一个字符串全部变成小写\" class=\"headerlink\" title=\"toLowerCase() 把一个字符串全部变成小写\"></a><code>toLowerCase()</code> 把一个字符串全部变成小写</h3><blockquote>\n<p>string.toLowerCase()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world'</span>;</span><br><span class=\"line\">s.toLowerCase();  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"concat-连接两个或多个字符串，返回连接后的字符串\"><a href=\"#concat-连接两个或多个字符串，返回连接后的字符串\" class=\"headerlink\" title=\"concat() 连接两个或多个字符串，返回连接后的字符串\"></a><code>concat()</code> 连接两个或多个字符串，返回连接后的字符串</h3><blockquote>\n<p>string.concat(string1, string2, …, stringX)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">'Hello '</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"string\">'world!'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s1.concat(s2);   <span class=\"comment\">// Hello world!</span></span><br><span class=\"line\"><span class=\"comment\">// 连接多个 , 隔开</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"string\">' How are you!'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = s1.concat(s2, s3)  <span class=\"comment\">// Hello world! How are you!</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"replace-替换与正则表达式匹配的子串\"><a href=\"#replace-替换与正则表达式匹配的子串\" class=\"headerlink\" title=\"replace() 替换与正则表达式匹配的子串\"></a><code>replace()</code> 替换与正则表达式匹配的子串</h3><p>  注意：<code>replace()</code>方法不改变原始字符串。只执行一次替换</p>\n<blockquote>\n<p>string.replace(searchvalue, newvalue)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello world, good world'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s.replace(<span class=\"string\">'world'</span>, <span class=\"string\">'javascript'</span>);  <span class=\"comment\">// hello javascript, good world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行一个全局替换 正则表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"Mr Blue has a blue house and a blue car\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = str.replace(<span class=\"regexp\">/blue/g</span>,<span class=\"string\">\"red\"</span>); <span class=\"comment\">// Mr Blue has a red house and a red car</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行一个全局替换 忽略大小写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = str.replace(<span class=\"regexp\">/blue/gi</span>, <span class=\"string\">\"red\"</span>); <span class=\"comment\">// Mr red has a red house and a red car</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"split-把字符串分割为字符串数组\"><a href=\"#split-把字符串分割为字符串数组\" class=\"headerlink\" title=\"split() 把字符串分割为字符串数组\"></a><code>split()</code> 把字符串分割为字符串数组</h3><p>  注意：<code>split()</code>方法不改变原始字符串。<br>  如果把空字符串<code>(&quot;&quot;)</code>用作<code>separator</code>，那么<code>stringObject</code>中的每个字符之间都会被分割.</p>\n<blockquote>\n<p>string.split(separator, limit)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\">s.split(<span class=\"string\">\"\"</span>);  <span class=\"comment\">// ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']</span></span><br><span class=\"line\">s.split(<span class=\"string\">\" \"</span>);  <span class=\"comment\">// ['hello', 'world']</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"trim-去除字符串两边的空白\"><a href=\"#trim-去除字符串两边的空白\" class=\"headerlink\" title=\"trim() 去除字符串两边的空白\"></a><code>trim()</code> 去除字符串两边的空白</h3><blockquote>\n<p>string.trim()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">' hello world    '</span>;</span><br><span class=\"line\">s.trim();  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"valueOf-返回某个字符串对象的原始值\"><a href=\"#valueOf-返回某个字符串对象的原始值\" class=\"headerlink\" title=\"valueOf() 返回某个字符串对象的原始值\"></a><code>valueOf()</code> 返回某个字符串对象的原始值</h3><blockquote>\n<p>string.valueOf()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\">s.valueOf();  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"字符串属性和方法\"><a href=\"#字符串属性和方法\" class=\"headerlink\" title=\"字符串属性和方法\"></a>字符串属性和方法</h1><h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><h3 id=\"constructor-返回创建字符串属性的函数\"><a href=\"#constructor-返回创建字符串属性的函数\" class=\"headerlink\" title=\"constructor 返回创建字符串属性的函数\"></a><code>constructor</code> 返回创建字符串属性的函数</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello, world!'</span>;</span><br><span class=\"line\">s.constructor;   <span class=\"comment\">// function String() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"prototype-允许您向对象添加属性和方法\"><a href=\"#prototype-允许您向对象添加属性和方法\" class=\"headerlink\" title=\"prototype 允许您向对象添加属性和方法\"></a><code>prototype</code> 允许您向对象添加属性和方法</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'Jion'</span>);</span><br><span class=\"line\">s.prototype.name = <span class=\"string\">'world'</span>; <span class=\"comment\">// 添加属性name</span></span><br><span class=\"line\">s.name;   <span class=\"comment\">// world</span></span><br><span class=\"line\">s.prototype.myFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;  <span class=\"comment\">// 添加方法</span></span><br><span class=\"line\">s.myFunc();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"length-返回字符串的长度-字符数\"><a href=\"#length-返回字符串的长度-字符数\" class=\"headerlink\" title=\"length 返回字符串的长度(字符数)\"></a><code>length</code> 返回字符串的长度(字符数)</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello, world!'</span>;</span><br><span class=\"line\">s.length;  <span class=\"comment\">// 13</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"charAt-返回指定索引位置的字符\"><a href=\"#charAt-返回指定索引位置的字符\" class=\"headerlink\" title=\"charAt() 返回指定索引位置的字符\"></a><code>charAt()</code> 返回指定索引位置的字符</h3><blockquote>\n<p>string.charCodeAt(index)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello, world'</span>;</span><br><span class=\"line\">s.charAt(<span class=\"number\">1</span>);  <span class=\"comment\">// e 索引从0开始</span></span><br><span class=\"line\">s.charAt(s.length<span class=\"number\">-1</span>);  <span class=\"comment\">// d 最后一个字符串</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"charCodeAt-返回指定索引位置字符的Unicode值\"><a href=\"#charCodeAt-返回指定索引位置字符的Unicode值\" class=\"headerlink\" title=\"charCodeAt() 返回指定索引位置字符的Unicode值\"></a><code>charCodeAt()</code> 返回指定索引位置字符的<code>Unicode</code>值</h3><blockquote>\n<p>string.charCodeAt(index)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello, world'</span>;</span><br><span class=\"line\">s.charCodeAt(<span class=\"number\">0</span>);  <span class=\"comment\">// 72</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fromCharCode-将Unicode转换为字符串\"><a href=\"#fromCharCode-将Unicode转换为字符串\" class=\"headerlink\" title=\"fromCharCode() 将Unicode转换为字符串\"></a><code>fromCharCode()</code> 将<code>Unicode</code>转换为字符串</h3><blockquote>\n<p>String.fromCharCode(n1, n2, …, nX)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">72</span>, <span class=\"number\">69</span>, <span class=\"number\">76</span>, <span class=\"number\">76</span>, <span class=\"number\">79</span>);  <span class=\"comment\">// HELLO</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"indexOf-返回字符串中检索指定字符第一次出现的位置\"><a href=\"#indexOf-返回字符串中检索指定字符第一次出现的位置\" class=\"headerlink\" title=\"indexOf() 返回字符串中检索指定字符第一次出现的位置\"></a><code>indexOf()</code> 返回字符串中检索指定字符第一次出现的位置</h3><blockquote>\n<p>string.indexOf(searchvalue, start)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world, welcome to the JavaScript!'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s.indexOf(<span class=\"string\">'l'</span>);  <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lastIndexOf-从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\"><a href=\"#lastIndexOf-从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\" class=\"headerlink\" title=\"lastIndexOf() 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\"></a><code>lastIndexOf()</code> 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置</h3><blockquote>\n<p>string.lastIndexOf(searchvalue, start)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s.lastIndexOf(<span class=\"string\">'l'</span>);  <span class=\"comment\">// 8 索引从后(0)到前</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"slice-返回两个指定索引区间的字符\"><a href=\"#slice-返回两个指定索引区间的字符\" class=\"headerlink\" title=\"slice() 返回两个指定\b索引区间的字符\"></a><code>slice()</code> 返回两个指定\b索引区间的字符</h3><blockquote>\n<p>string.slice(start, end)</p>\n</blockquote>\n<p>  提示： 如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world'</span>;</span><br><span class=\"line\">s.slice(<span class=\"number\">0</span>, <span class=\"number\">5</span>);  <span class=\"comment\">// Hello 从索引0开始到5（不包括5）</span></span><br><span class=\"line\">s.slice(<span class=\"number\">6</span>);  <span class=\"comment\">// world 从索引6开始到结束</span></span><br><span class=\"line\">s.slice(<span class=\"number\">-1</span>);  <span class=\"comment\">// d 最后一个字符</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"substring-返回两个指定的索引区间的字符\"><a href=\"#substring-返回两个指定的索引区间的字符\" class=\"headerlink\" title=\"substring() 返回两个指定的索引区间的字符\"></a><code>substring()</code> 返回两个指定的索引区间的字符</h3><blockquote>\n<p>string.substring(from, to)</p>\n</blockquote>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world'</span>;</span><br><span class=\"line\">s.substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>);  <span class=\"comment\">// Hello 从索引0开始到5（不包括5）</span></span><br><span class=\"line\">s.substring(<span class=\"number\">6</span>);  <span class=\"comment\">// world 从索引6开始到结束</span></span><br></pre></td></tr></table></figure></code></pre><h3 id=\"substr-返回从索引开始指定长度的字符\"><a href=\"#substr-返回从索引开始指定长度的字符\" class=\"headerlink\" title=\"substr() 返回从索引开始指定长度的字符\"></a><code>substr()</code> 返回从索引开始指定长度的字符</h3><blockquote>\n<p>string.substr(start, length)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world'</span>;</span><br><span class=\"line\">s.substr(<span class=\"number\">1</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// el 从索引1开始2个长度</span></span><br><span class=\"line\">s.substr(<span class=\"number\">6</span>);  <span class=\"comment\">// lo world  从索引6开始到结束</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>\b思考</strong>：<code>slice()</code>、<code>substring()</code>、<code>substr()</code>区别</p>\n<p><code>substring()</code>以两个参数中较小一个作为起始位置，较大的参数作为结束位置<br>当参数为负数时，<br><code>slice()</code>将它字符串的长度与对应的负数相加，结果作为参数<br><code>substring()</code>将负参数都直接转换为0<br><code>substr()</code>将第一个参数与字符串长度相加后的结果作为第一个参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// substring</span></span><br><span class=\"line\">s.substring(<span class=\"number\">2</span>, <span class=\"number\">8</span>);  <span class=\"comment\">// llo wo</span></span><br><span class=\"line\">s.substring(<span class=\"number\">8</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// llo wo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 负数</span></span><br><span class=\"line\">s.slice(<span class=\"number\">-3</span>);      <span class=\"comment\">//  </span></span><br><span class=\"line\">s.substring(<span class=\"number\">-3</span>);  <span class=\"comment\">// hello world</span></span><br><span class=\"line\">s.substr(<span class=\"number\">-3</span>);     <span class=\"comment\">// rld</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.slice(<span class=\"number\">3</span>, <span class=\"number\">-4</span>);   <span class=\"comment\">// lo w (3, 7)</span></span><br><span class=\"line\">s.substring(<span class=\"number\">3</span>, <span class=\"number\">-4</span>); <span class=\"comment\">// hel (0, 3)</span></span><br><span class=\"line\">s.substr(<span class=\"number\">3</span>, <span class=\"number\">-4</span>);    <span class=\"comment\">// 空字符串 索引为3长度为0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意:</strong> IE对substr接收负值的处理有错，它会返回原始字符串。</p>\n<h3 id=\"match-找到一个或多个正则表达式的匹配\"><a href=\"#match-找到一个或多个正则表达式的匹配\" class=\"headerlink\" title=\"match() 找到一个或多个正则表达式的匹配\"></a><code>match()</code> 找到一个或多个正则表达式的匹配</h3><p>  如果没有找到任何匹配的文本，<code>match()</code>将返回<code>null</code>。否则，它将返回一个<code>array</code>，其中存放了与它找到的匹配文本有关的信息</p>\n<blockquote>\n<p>string.match(regexp)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"The rain in SPAIN stays mainly in the plain\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = str.match(<span class=\"regexp\">/ain/g</span>);  <span class=\"comment\">// ain, ain, ain</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不区分大小写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = str.match(<span class=\"regexp\">/ain/gi</span>);  <span class=\"comment\">// ain, AIN, ain, ain</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"search-检索与正则表达式相匹配的值\"><a href=\"#search-检索与正则表达式相匹配的值\" class=\"headerlink\" title=\"search() 检索与正则表达式相匹配的值\"></a><code>search()</code> 检索与正则表达式相匹配的值</h3><p>  如果没有找到任何匹配的子串，则返回 -1。</p>\n<blockquote>\n<p>string.search(searchvalue)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"Mr. Blue has a blue house\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = str.search(<span class=\"string\">\"blue\"</span>);  <span class=\"comment\">// 15</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = str.search(<span class=\"regexp\">/blue/i</span>);  <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toUpperCase-把一个字符串全部变为大写\"><a href=\"#toUpperCase-把一个字符串全部变为大写\" class=\"headerlink\" title=\"toUpperCase() 把一个字符串全部变为大写\"></a><code>toUpperCase()</code> 把一个字符串全部变为大写</h3><blockquote>\n<p>string.toUpperCase()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world'</span>;</span><br><span class=\"line\">s.toUpperCase();  <span class=\"comment\">// HELLO WORLD</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toLowerCase-把一个字符串全部变成小写\"><a href=\"#toLowerCase-把一个字符串全部变成小写\" class=\"headerlink\" title=\"toLowerCase() 把一个字符串全部变成小写\"></a><code>toLowerCase()</code> 把一个字符串全部变成小写</h3><blockquote>\n<p>string.toLowerCase()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world'</span>;</span><br><span class=\"line\">s.toLowerCase();  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"concat-连接两个或多个字符串，返回连接后的字符串\"><a href=\"#concat-连接两个或多个字符串，返回连接后的字符串\" class=\"headerlink\" title=\"concat() 连接两个或多个字符串，返回连接后的字符串\"></a><code>concat()</code> 连接两个或多个字符串，返回连接后的字符串</h3><blockquote>\n<p>string.concat(string1, string2, …, stringX)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">'Hello '</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"string\">'world!'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s1.concat(s2);   <span class=\"comment\">// Hello world!</span></span><br><span class=\"line\"><span class=\"comment\">// 连接多个 , 隔开</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"string\">' How are you!'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = s1.concat(s2, s3)  <span class=\"comment\">// Hello world! How are you!</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"replace-替换与正则表达式匹配的子串\"><a href=\"#replace-替换与正则表达式匹配的子串\" class=\"headerlink\" title=\"replace() 替换与正则表达式匹配的子串\"></a><code>replace()</code> 替换与正则表达式匹配的子串</h3><p>  注意：<code>replace()</code>方法不改变原始字符串。只执行一次替换</p>\n<blockquote>\n<p>string.replace(searchvalue, newvalue)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello world, good world'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s.replace(<span class=\"string\">'world'</span>, <span class=\"string\">'javascript'</span>);  <span class=\"comment\">// hello javascript, good world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行一个全局替换 正则表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"Mr Blue has a blue house and a blue car\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = str.replace(<span class=\"regexp\">/blue/g</span>,<span class=\"string\">\"red\"</span>); <span class=\"comment\">// Mr Blue has a red house and a red car</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行一个全局替换 忽略大小写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = str.replace(<span class=\"regexp\">/blue/gi</span>, <span class=\"string\">\"red\"</span>); <span class=\"comment\">// Mr red has a red house and a red car</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"split-把字符串分割为字符串数组\"><a href=\"#split-把字符串分割为字符串数组\" class=\"headerlink\" title=\"split() 把字符串分割为字符串数组\"></a><code>split()</code> 把字符串分割为字符串数组</h3><p>  注意：<code>split()</code>方法不改变原始字符串。<br>  如果把空字符串<code>(&quot;&quot;)</code>用作<code>separator</code>，那么<code>stringObject</code>中的每个字符之间都会被分割.</p>\n<blockquote>\n<p>string.split(separator, limit)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\">s.split(<span class=\"string\">\"\"</span>);  <span class=\"comment\">// ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']</span></span><br><span class=\"line\">s.split(<span class=\"string\">\" \"</span>);  <span class=\"comment\">// ['hello', 'world']</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"trim-去除字符串两边的空白\"><a href=\"#trim-去除字符串两边的空白\" class=\"headerlink\" title=\"trim() 去除字符串两边的空白\"></a><code>trim()</code> 去除字符串两边的空白</h3><blockquote>\n<p>string.trim()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">' hello world    '</span>;</span><br><span class=\"line\">s.trim();  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"valueOf-返回某个字符串对象的原始值\"><a href=\"#valueOf-返回某个字符串对象的原始值\" class=\"headerlink\" title=\"valueOf() 返回某个字符串对象的原始值\"></a><code>valueOf()</code> 返回某个字符串对象的原始值</h3><blockquote>\n<p>string.valueOf()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\">s.valueOf();  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Android三方库","date":"2019-10-18T05:03:15.000Z","_content":"\n# Android Studio 2.3\n\n## Android Butterknife(黄油刀)\n\nButterKnife是一个专注于Android系统的View注入框架，减少findViewById来找View对象，使用ButterKnife对性能基本没有损失，因为ButterKnife用到的注解并不是在运行时反射的，而是在编译的时候生成新的class\n\nButterKnife项目地址：https://github.com/JakeWharton/butterknife\n\n* ButterKnife的优势\n\n> 1、强大的View绑定和Click事件处理功能，简化代码，提升开发效率\n>\n> 2、方便的处理Adapter里的ViewHolder绑定问题\n>\n> 3、运行时不会影响APP效率，使用配置方便\n>\n> 4、代码清晰，可读性强\n\n* ButterKnife的基本配置\n\n在android Studio项目中配置使用ButterKnife\n\n1、 在Project的 build.gradle 中添加如下代码：\n\n```Java\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.3.3'\n        classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1'  // 添加这一行\n    }\n}\n```\n\n2、 在App的 build.gradle 中添加如下代码：\n\n```Java\napply plugin: 'com.jakewharton.butterknife'\n```\n\ndependencies中添加：\n\n```Java\ncompile 'com.jakewharton:butterknife:8.8.1'\nannotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'\n```\n\n* ButterKnife的使用\n\n> 1、在Activity 类中绑定 ：ButterKnife.bind(this);必须在setContentView();之后绑定；且父类bind绑定后，子类不需要再bind。\n>\n> 2、在非Activity 类（eg：Fragment、ViewHold）中绑定： ButterKnife.bind(this，view);这里的this不能替换成getActivity（）。\n>\n> 3、在Activity中不需要做解绑操作，在Fragment 中必须在onDestroyView()中做解绑操作。\n>\n> 4、使用ButterKnife修饰的方法和控件，不能用private or static 修饰，否则会报错。错误: @BindView fields must not be private or static. (com.zyj.wifi.ButterknifeActivity.button1)\n>\n> 5、setContentView()不能通过注解实现。（其他的有些注解框架可以）\n>\n> 6、使用Activity为根视图绑定任意对象时，如果你使用类似MVC的设计模式你可以在Activity 调用ButterKnife.bind(this, activity)，来绑定Controller。\n>\n> 7、使用ButterKnife.bind(this，view)绑定一个view的子节点字段。如果你在子View的布局里或者自定义view的构造方法里 使用了inflate,你可以立刻调用此方法。或者，从XML inflate来的自定义view类型可以在onFinishInflate回调方法中使用它。\n\n待续。。。。。。\n\n## Logger(日志打印)\n\nLogger项目地址：https://github.com/orhanobut/logger\n\n配置：\n\n```Java\ncompile 'com.orhanobut:logger:2.0.0'\n```\n\n初始化\n\n```Java\nLogger.addLogAdapter(new AndroidLogAdapter());\n\n// 日志适配器通过检查此功能来检查是否应打印日志。如果要禁用/隐藏日志以进行输出，请重写isLoggable方法。 true将打印日志消息，false将其忽略\nLogger.addLogAdapter(new AndroidLogAdapter() {\n  @Override public boolean isLoggable(int priority, String tag) {\n    return BuildConfig.DEBUG;\n  }\n});\n\n```\n\n使用\n\n```Java\nLogger.d(\"hello\");\n```\n","source":"_posts/Android/Android三方库.md","raw":"---\ntitle: Android三方库\ndate: 2019-10-18 13:03:15\ntags:\ncategories: Android\n---\n\n# Android Studio 2.3\n\n## Android Butterknife(黄油刀)\n\nButterKnife是一个专注于Android系统的View注入框架，减少findViewById来找View对象，使用ButterKnife对性能基本没有损失，因为ButterKnife用到的注解并不是在运行时反射的，而是在编译的时候生成新的class\n\nButterKnife项目地址：https://github.com/JakeWharton/butterknife\n\n* ButterKnife的优势\n\n> 1、强大的View绑定和Click事件处理功能，简化代码，提升开发效率\n>\n> 2、方便的处理Adapter里的ViewHolder绑定问题\n>\n> 3、运行时不会影响APP效率，使用配置方便\n>\n> 4、代码清晰，可读性强\n\n* ButterKnife的基本配置\n\n在android Studio项目中配置使用ButterKnife\n\n1、 在Project的 build.gradle 中添加如下代码：\n\n```Java\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.3.3'\n        classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1'  // 添加这一行\n    }\n}\n```\n\n2、 在App的 build.gradle 中添加如下代码：\n\n```Java\napply plugin: 'com.jakewharton.butterknife'\n```\n\ndependencies中添加：\n\n```Java\ncompile 'com.jakewharton:butterknife:8.8.1'\nannotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'\n```\n\n* ButterKnife的使用\n\n> 1、在Activity 类中绑定 ：ButterKnife.bind(this);必须在setContentView();之后绑定；且父类bind绑定后，子类不需要再bind。\n>\n> 2、在非Activity 类（eg：Fragment、ViewHold）中绑定： ButterKnife.bind(this，view);这里的this不能替换成getActivity（）。\n>\n> 3、在Activity中不需要做解绑操作，在Fragment 中必须在onDestroyView()中做解绑操作。\n>\n> 4、使用ButterKnife修饰的方法和控件，不能用private or static 修饰，否则会报错。错误: @BindView fields must not be private or static. (com.zyj.wifi.ButterknifeActivity.button1)\n>\n> 5、setContentView()不能通过注解实现。（其他的有些注解框架可以）\n>\n> 6、使用Activity为根视图绑定任意对象时，如果你使用类似MVC的设计模式你可以在Activity 调用ButterKnife.bind(this, activity)，来绑定Controller。\n>\n> 7、使用ButterKnife.bind(this，view)绑定一个view的子节点字段。如果你在子View的布局里或者自定义view的构造方法里 使用了inflate,你可以立刻调用此方法。或者，从XML inflate来的自定义view类型可以在onFinishInflate回调方法中使用它。\n\n待续。。。。。。\n\n## Logger(日志打印)\n\nLogger项目地址：https://github.com/orhanobut/logger\n\n配置：\n\n```Java\ncompile 'com.orhanobut:logger:2.0.0'\n```\n\n初始化\n\n```Java\nLogger.addLogAdapter(new AndroidLogAdapter());\n\n// 日志适配器通过检查此功能来检查是否应打印日志。如果要禁用/隐藏日志以进行输出，请重写isLoggable方法。 true将打印日志消息，false将其忽略\nLogger.addLogAdapter(new AndroidLogAdapter() {\n  @Override public boolean isLoggable(int priority, String tag) {\n    return BuildConfig.DEBUG;\n  }\n});\n\n```\n\n使用\n\n```Java\nLogger.d(\"hello\");\n```\n","slug":"Android/Android三方库","published":1,"updated":"2019-10-18T10:01:14.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp2q000hib36oa6uz1d5","content":"<h1 id=\"Android-Studio-2-3\"><a href=\"#Android-Studio-2-3\" class=\"headerlink\" title=\"Android Studio 2.3\"></a>Android Studio 2.3</h1><h2 id=\"Android-Butterknife-黄油刀\"><a href=\"#Android-Butterknife-黄油刀\" class=\"headerlink\" title=\"Android Butterknife(黄油刀)\"></a>Android Butterknife(黄油刀)</h2><p>ButterKnife是一个专注于Android系统的View注入框架，减少findViewById来找View对象，使用ButterKnife对性能基本没有损失，因为ButterKnife用到的注解并不是在运行时反射的，而是在编译的时候生成新的class</p>\n<p>ButterKnife项目地址：<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"noopener\">https://github.com/JakeWharton/butterknife</a></p>\n<ul>\n<li>ButterKnife的优势</li>\n</ul>\n<blockquote>\n<p>1、强大的View绑定和Click事件处理功能，简化代码，提升开发效率</p>\n<p>2、方便的处理Adapter里的ViewHolder绑定问题</p>\n<p>3、运行时不会影响APP效率，使用配置方便</p>\n<p>4、代码清晰，可读性强</p>\n</blockquote>\n<ul>\n<li>ButterKnife的基本配置</li>\n</ul>\n<p>在android Studio项目中配置使用ButterKnife</p>\n<p>1、 在Project的 build.gradle 中添加如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">'com.android.tools.build:gradle:2.3.3'</span></span><br><span class=\"line\">        classpath <span class=\"string\">'com.jakewharton:butterknife-gradle-plugin:8.8.1'</span>  <span class=\"comment\">// 添加这一行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、 在App的 build.gradle 中添加如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">'com.jakewharton.butterknife'</span></span><br></pre></td></tr></table></figure>\n\n<p>dependencies中添加：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">'com.jakewharton:butterknife:8.8.1'</span></span><br><span class=\"line\">annotationProcessor <span class=\"string\">'com.jakewharton:butterknife-compiler:8.8.1'</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ButterKnife的使用</li>\n</ul>\n<blockquote>\n<p>1、在Activity 类中绑定 ：ButterKnife.bind(this);必须在setContentView();之后绑定；且父类bind绑定后，子类不需要再bind。</p>\n<p>2、在非Activity 类（eg：Fragment、ViewHold）中绑定： ButterKnife.bind(this，view);这里的this不能替换成getActivity（）。</p>\n<p>3、在Activity中不需要做解绑操作，在Fragment 中必须在onDestroyView()中做解绑操作。</p>\n<p>4、使用ButterKnife修饰的方法和控件，不能用private or static 修饰，否则会报错。错误: @BindView fields must not be private or static. (com.zyj.wifi.ButterknifeActivity.button1)</p>\n<p>5、setContentView()不能通过注解实现。（其他的有些注解框架可以）</p>\n<p>6、使用Activity为根视图绑定任意对象时，如果你使用类似MVC的设计模式你可以在Activity 调用ButterKnife.bind(this, activity)，来绑定Controller。</p>\n<p>7、使用ButterKnife.bind(this，view)绑定一个view的子节点字段。如果你在子View的布局里或者自定义view的构造方法里 使用了inflate,你可以立刻调用此方法。或者，从XML inflate来的自定义view类型可以在onFinishInflate回调方法中使用它。</p>\n</blockquote>\n<p>待续。。。。。。</p>\n<h2 id=\"Logger-日志打印\"><a href=\"#Logger-日志打印\" class=\"headerlink\" title=\"Logger(日志打印)\"></a>Logger(日志打印)</h2><p>Logger项目地址：<a href=\"https://github.com/orhanobut/logger\" target=\"_blank\" rel=\"noopener\">https://github.com/orhanobut/logger</a></p>\n<p>配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">'com.orhanobut:logger:2.0.0'</span></span><br></pre></td></tr></table></figure>\n\n<p>初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logger.addLogAdapter(<span class=\"keyword\">new</span> AndroidLogAdapter());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 日志适配器通过检查此功能来检查是否应打印日志。如果要禁用/隐藏日志以进行输出，请重写isLoggable方法。 true将打印日志消息，false将其忽略</span></span><br><span class=\"line\">Logger.addLogAdapter(<span class=\"keyword\">new</span> AndroidLogAdapter() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLoggable</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, String tag)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BuildConfig.DEBUG;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logger.d(<span class=\"string\">\"hello\"</span>);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Android-Studio-2-3\"><a href=\"#Android-Studio-2-3\" class=\"headerlink\" title=\"Android Studio 2.3\"></a>Android Studio 2.3</h1><h2 id=\"Android-Butterknife-黄油刀\"><a href=\"#Android-Butterknife-黄油刀\" class=\"headerlink\" title=\"Android Butterknife(黄油刀)\"></a>Android Butterknife(黄油刀)</h2><p>ButterKnife是一个专注于Android系统的View注入框架，减少findViewById来找View对象，使用ButterKnife对性能基本没有损失，因为ButterKnife用到的注解并不是在运行时反射的，而是在编译的时候生成新的class</p>\n<p>ButterKnife项目地址：<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"noopener\">https://github.com/JakeWharton/butterknife</a></p>\n<ul>\n<li>ButterKnife的优势</li>\n</ul>\n<blockquote>\n<p>1、强大的View绑定和Click事件处理功能，简化代码，提升开发效率</p>\n<p>2、方便的处理Adapter里的ViewHolder绑定问题</p>\n<p>3、运行时不会影响APP效率，使用配置方便</p>\n<p>4、代码清晰，可读性强</p>\n</blockquote>\n<ul>\n<li>ButterKnife的基本配置</li>\n</ul>\n<p>在android Studio项目中配置使用ButterKnife</p>\n<p>1、 在Project的 build.gradle 中添加如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">'com.android.tools.build:gradle:2.3.3'</span></span><br><span class=\"line\">        classpath <span class=\"string\">'com.jakewharton:butterknife-gradle-plugin:8.8.1'</span>  <span class=\"comment\">// 添加这一行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、 在App的 build.gradle 中添加如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">'com.jakewharton.butterknife'</span></span><br></pre></td></tr></table></figure>\n\n<p>dependencies中添加：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">'com.jakewharton:butterknife:8.8.1'</span></span><br><span class=\"line\">annotationProcessor <span class=\"string\">'com.jakewharton:butterknife-compiler:8.8.1'</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ButterKnife的使用</li>\n</ul>\n<blockquote>\n<p>1、在Activity 类中绑定 ：ButterKnife.bind(this);必须在setContentView();之后绑定；且父类bind绑定后，子类不需要再bind。</p>\n<p>2、在非Activity 类（eg：Fragment、ViewHold）中绑定： ButterKnife.bind(this，view);这里的this不能替换成getActivity（）。</p>\n<p>3、在Activity中不需要做解绑操作，在Fragment 中必须在onDestroyView()中做解绑操作。</p>\n<p>4、使用ButterKnife修饰的方法和控件，不能用private or static 修饰，否则会报错。错误: @BindView fields must not be private or static. (com.zyj.wifi.ButterknifeActivity.button1)</p>\n<p>5、setContentView()不能通过注解实现。（其他的有些注解框架可以）</p>\n<p>6、使用Activity为根视图绑定任意对象时，如果你使用类似MVC的设计模式你可以在Activity 调用ButterKnife.bind(this, activity)，来绑定Controller。</p>\n<p>7、使用ButterKnife.bind(this，view)绑定一个view的子节点字段。如果你在子View的布局里或者自定义view的构造方法里 使用了inflate,你可以立刻调用此方法。或者，从XML inflate来的自定义view类型可以在onFinishInflate回调方法中使用它。</p>\n</blockquote>\n<p>待续。。。。。。</p>\n<h2 id=\"Logger-日志打印\"><a href=\"#Logger-日志打印\" class=\"headerlink\" title=\"Logger(日志打印)\"></a>Logger(日志打印)</h2><p>Logger项目地址：<a href=\"https://github.com/orhanobut/logger\" target=\"_blank\" rel=\"noopener\">https://github.com/orhanobut/logger</a></p>\n<p>配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">'com.orhanobut:logger:2.0.0'</span></span><br></pre></td></tr></table></figure>\n\n<p>初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logger.addLogAdapter(<span class=\"keyword\">new</span> AndroidLogAdapter());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 日志适配器通过检查此功能来检查是否应打印日志。如果要禁用/隐藏日志以进行输出，请重写isLoggable方法。 true将打印日志消息，false将其忽略</span></span><br><span class=\"line\">Logger.addLogAdapter(<span class=\"keyword\">new</span> AndroidLogAdapter() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLoggable</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, String tag)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BuildConfig.DEBUG;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logger.d(<span class=\"string\">\"hello\"</span>);</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Android开发环境搭建","date":"2019-10-24T05:46:30.000Z","_content":"\n\n## Android开发环境搭建（Windows）\n\n* 四步骤完成Android开发环境的搭建\n\n> 1、下载安装JDK  \n2、配置Windows上JDK的变量环境  \n3、下载安装Android Studio  \n4、下载安装Android SDK\n\n### 一、JDK安装\n\nJDK的全称是Java SE Development Kit，也就是Java 开发工具箱。SE表示标准版。JDK是Java的核心，包含了Java的运行环境（Java Runtime Environment），一堆Java工具和给开发者开发应用程序时调用的Java类库。\n\nJDK下载地址：https://www.oracle.com/technetwork/java/javase/downloads/index.html\n\n### 二、JDK环境变量\n\n> 详细步骤配置参考：https://www.runoob.com/java/java-environment-setup.html\n\n为了配置JDK的系统环境变量，我们需要设置三个系统变量，分别是JAVA_HOME，Path和CLASSPATH。下面是这三个变量的设置范例：\n\n`JAVA_HOME`\n先设置这个系统变量名称，变量值为JDK在你电脑上的安装路径：`C:\\Program Files\\Java\\jdk1.8.0_20`。创建好后则可以利用%JAVA_HOME%作为JDK安装目录的统一引用路径。\n\n`Path`\nPATH属性已存在，可直接编辑，在原来变量后追加：`;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin`。\n\n`CLASSPATH `\n设置系统变量名为：CLASSPATH  变量值为：`.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar` 。\n注意变量值字符串前面有一个\".\"表示当前目录，设置CLASSPATH 的目的，在于告诉Java执行环境，在哪些目录下可以找到您所要执行的Java程序所需要的类或者包。\n\n### 三、安装Android Studio\n\nAndroid Studio 下载地址：https://developer.android.google.cn/studio\n\n\n### 四、安装Android SDK\n\nAndroid Studio中下载Android SDK，翻墙除外\n \n 参考方法：https://blog.csdn.net/qq_23599965/article/details/80910202\n\n 方式一、设置HTTP Proxy，反正我没成功过\n \n 设置 Host name 为：mirrors.neusoft.edu.cn   \n 设置 Port number 为：80 \n\n 方式二、 更改hosts文件\n  \n  得取消设置HTTP Proxy，为了方便Hosts文件下载地址：https://github.com/googlehosts/hosts 可直接替换掉hosts文件\n\n hosts系统文件地址：C:\\WINDOWS\\System32\\drivers\\etc\\hosts \n\n 后面就轻松多了。。。。。。\n\n 注明：Android相关下载工具地址：https://www.androiddevtools.cn/\n","source":"_posts/Android/Android开发环境搭建.md","raw":"---\ntitle: Android开发环境搭建\ndate: 2019-10-24 13:46:30\ntags:\ncategories: Android\n---\n\n\n## Android开发环境搭建（Windows）\n\n* 四步骤完成Android开发环境的搭建\n\n> 1、下载安装JDK  \n2、配置Windows上JDK的变量环境  \n3、下载安装Android Studio  \n4、下载安装Android SDK\n\n### 一、JDK安装\n\nJDK的全称是Java SE Development Kit，也就是Java 开发工具箱。SE表示标准版。JDK是Java的核心，包含了Java的运行环境（Java Runtime Environment），一堆Java工具和给开发者开发应用程序时调用的Java类库。\n\nJDK下载地址：https://www.oracle.com/technetwork/java/javase/downloads/index.html\n\n### 二、JDK环境变量\n\n> 详细步骤配置参考：https://www.runoob.com/java/java-environment-setup.html\n\n为了配置JDK的系统环境变量，我们需要设置三个系统变量，分别是JAVA_HOME，Path和CLASSPATH。下面是这三个变量的设置范例：\n\n`JAVA_HOME`\n先设置这个系统变量名称，变量值为JDK在你电脑上的安装路径：`C:\\Program Files\\Java\\jdk1.8.0_20`。创建好后则可以利用%JAVA_HOME%作为JDK安装目录的统一引用路径。\n\n`Path`\nPATH属性已存在，可直接编辑，在原来变量后追加：`;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin`。\n\n`CLASSPATH `\n设置系统变量名为：CLASSPATH  变量值为：`.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar` 。\n注意变量值字符串前面有一个\".\"表示当前目录，设置CLASSPATH 的目的，在于告诉Java执行环境，在哪些目录下可以找到您所要执行的Java程序所需要的类或者包。\n\n### 三、安装Android Studio\n\nAndroid Studio 下载地址：https://developer.android.google.cn/studio\n\n\n### 四、安装Android SDK\n\nAndroid Studio中下载Android SDK，翻墙除外\n \n 参考方法：https://blog.csdn.net/qq_23599965/article/details/80910202\n\n 方式一、设置HTTP Proxy，反正我没成功过\n \n 设置 Host name 为：mirrors.neusoft.edu.cn   \n 设置 Port number 为：80 \n\n 方式二、 更改hosts文件\n  \n  得取消设置HTTP Proxy，为了方便Hosts文件下载地址：https://github.com/googlehosts/hosts 可直接替换掉hosts文件\n\n hosts系统文件地址：C:\\WINDOWS\\System32\\drivers\\etc\\hosts \n\n 后面就轻松多了。。。。。。\n\n 注明：Android相关下载工具地址：https://www.androiddevtools.cn/\n","slug":"Android/Android开发环境搭建","published":1,"updated":"2020-03-23T10:01:50.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp2s000iib36a78c5ssu","content":"<h2 id=\"Android开发环境搭建（Windows）\"><a href=\"#Android开发环境搭建（Windows）\" class=\"headerlink\" title=\"Android开发环境搭建（Windows）\"></a>Android开发环境搭建（Windows）</h2><ul>\n<li>四步骤完成Android开发环境的搭建</li>\n</ul>\n<blockquote>\n<p>1、下载安装JDK<br>2、配置Windows上JDK的变量环境<br>3、下载安装Android Studio<br>4、下载安装Android SDK</p>\n</blockquote>\n<h3 id=\"一、JDK安装\"><a href=\"#一、JDK安装\" class=\"headerlink\" title=\"一、JDK安装\"></a>一、JDK安装</h3><p>JDK的全称是Java SE Development Kit，也就是Java 开发工具箱。SE表示标准版。JDK是Java的核心，包含了Java的运行环境（Java Runtime Environment），一堆Java工具和给开发者开发应用程序时调用的Java类库。</p>\n<p>JDK下载地址：<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>\n<h3 id=\"二、JDK环境变量\"><a href=\"#二、JDK环境变量\" class=\"headerlink\" title=\"二、JDK环境变量\"></a>二、JDK环境变量</h3><blockquote>\n<p>详细步骤配置参考：<a href=\"https://www.runoob.com/java/java-environment-setup.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/java/java-environment-setup.html</a></p>\n</blockquote>\n<p>为了配置JDK的系统环境变量，我们需要设置三个系统变量，分别是JAVA_HOME，Path和CLASSPATH。下面是这三个变量的设置范例：</p>\n<p><code>JAVA_HOME</code><br>先设置这个系统变量名称，变量值为JDK在你电脑上的安装路径：<code>C:\\Program Files\\Java\\jdk1.8.0_20</code>。创建好后则可以利用%JAVA_HOME%作为JDK安装目录的统一引用路径。</p>\n<p><code>Path</code><br>PATH属性已存在，可直接编辑，在原来变量后追加：<code>;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin</code>。</p>\n<p><code>CLASSPATH</code><br>设置系统变量名为：CLASSPATH  变量值为：<code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar</code> 。<br>注意变量值字符串前面有一个”.”表示当前目录，设置CLASSPATH 的目的，在于告诉Java执行环境，在哪些目录下可以找到您所要执行的Java程序所需要的类或者包。</p>\n<h3 id=\"三、安装Android-Studio\"><a href=\"#三、安装Android-Studio\" class=\"headerlink\" title=\"三、安装Android Studio\"></a>三、安装Android Studio</h3><p>Android Studio 下载地址：<a href=\"https://developer.android.google.cn/studio\" target=\"_blank\" rel=\"noopener\">https://developer.android.google.cn/studio</a></p>\n<h3 id=\"四、安装Android-SDK\"><a href=\"#四、安装Android-SDK\" class=\"headerlink\" title=\"四、安装Android SDK\"></a>四、安装Android SDK</h3><p>Android Studio中下载Android SDK，翻墙除外</p>\n<p> 参考方法：<a href=\"https://blog.csdn.net/qq_23599965/article/details/80910202\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_23599965/article/details/80910202</a></p>\n<p> 方式一、设置HTTP Proxy，反正我没成功过</p>\n<p> 设置 Host name 为：mirrors.neusoft.edu.cn<br> 设置 Port number 为：80 </p>\n<p> 方式二、 更改hosts文件</p>\n<p>  得取消设置HTTP Proxy，为了方便Hosts文件下载地址：<a href=\"https://github.com/googlehosts/hosts\" target=\"_blank\" rel=\"noopener\">https://github.com/googlehosts/hosts</a> 可直接替换掉hosts文件</p>\n<p> hosts系统文件地址：C:\\WINDOWS\\System32\\drivers\\etc\\hosts </p>\n<p> 后面就轻松多了。。。。。。</p>\n<p> 注明：Android相关下载工具地址：<a href=\"https://www.androiddevtools.cn/\" target=\"_blank\" rel=\"noopener\">https://www.androiddevtools.cn/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Android开发环境搭建（Windows）\"><a href=\"#Android开发环境搭建（Windows）\" class=\"headerlink\" title=\"Android开发环境搭建（Windows）\"></a>Android开发环境搭建（Windows）</h2><ul>\n<li>四步骤完成Android开发环境的搭建</li>\n</ul>\n<blockquote>\n<p>1、下载安装JDK<br>2、配置Windows上JDK的变量环境<br>3、下载安装Android Studio<br>4、下载安装Android SDK</p>\n</blockquote>\n<h3 id=\"一、JDK安装\"><a href=\"#一、JDK安装\" class=\"headerlink\" title=\"一、JDK安装\"></a>一、JDK安装</h3><p>JDK的全称是Java SE Development Kit，也就是Java 开发工具箱。SE表示标准版。JDK是Java的核心，包含了Java的运行环境（Java Runtime Environment），一堆Java工具和给开发者开发应用程序时调用的Java类库。</p>\n<p>JDK下载地址：<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>\n<h3 id=\"二、JDK环境变量\"><a href=\"#二、JDK环境变量\" class=\"headerlink\" title=\"二、JDK环境变量\"></a>二、JDK环境变量</h3><blockquote>\n<p>详细步骤配置参考：<a href=\"https://www.runoob.com/java/java-environment-setup.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/java/java-environment-setup.html</a></p>\n</blockquote>\n<p>为了配置JDK的系统环境变量，我们需要设置三个系统变量，分别是JAVA_HOME，Path和CLASSPATH。下面是这三个变量的设置范例：</p>\n<p><code>JAVA_HOME</code><br>先设置这个系统变量名称，变量值为JDK在你电脑上的安装路径：<code>C:\\Program Files\\Java\\jdk1.8.0_20</code>。创建好后则可以利用%JAVA_HOME%作为JDK安装目录的统一引用路径。</p>\n<p><code>Path</code><br>PATH属性已存在，可直接编辑，在原来变量后追加：<code>;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin</code>。</p>\n<p><code>CLASSPATH</code><br>设置系统变量名为：CLASSPATH  变量值为：<code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar</code> 。<br>注意变量值字符串前面有一个”.”表示当前目录，设置CLASSPATH 的目的，在于告诉Java执行环境，在哪些目录下可以找到您所要执行的Java程序所需要的类或者包。</p>\n<h3 id=\"三、安装Android-Studio\"><a href=\"#三、安装Android-Studio\" class=\"headerlink\" title=\"三、安装Android Studio\"></a>三、安装Android Studio</h3><p>Android Studio 下载地址：<a href=\"https://developer.android.google.cn/studio\" target=\"_blank\" rel=\"noopener\">https://developer.android.google.cn/studio</a></p>\n<h3 id=\"四、安装Android-SDK\"><a href=\"#四、安装Android-SDK\" class=\"headerlink\" title=\"四、安装Android SDK\"></a>四、安装Android SDK</h3><p>Android Studio中下载Android SDK，翻墙除外</p>\n<p> 参考方法：<a href=\"https://blog.csdn.net/qq_23599965/article/details/80910202\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_23599965/article/details/80910202</a></p>\n<p> 方式一、设置HTTP Proxy，反正我没成功过</p>\n<p> 设置 Host name 为：mirrors.neusoft.edu.cn<br> 设置 Port number 为：80 </p>\n<p> 方式二、 更改hosts文件</p>\n<p>  得取消设置HTTP Proxy，为了方便Hosts文件下载地址：<a href=\"https://github.com/googlehosts/hosts\" target=\"_blank\" rel=\"noopener\">https://github.com/googlehosts/hosts</a> 可直接替换掉hosts文件</p>\n<p> hosts系统文件地址：C:\\WINDOWS\\System32\\drivers\\etc\\hosts </p>\n<p> 后面就轻松多了。。。。。。</p>\n<p> 注明：Android相关下载工具地址：<a href=\"https://www.androiddevtools.cn/\" target=\"_blank\" rel=\"noopener\">https://www.androiddevtools.cn/</a></p>\n"},{"title":"CocoaPods安装及简单使用","date":"2019-07-02T08:50:27.000Z","_content":"\n# CocoaPods ios 三方管理工具\n\n## Ruby镜像 更换源\n\n```gem\nsudo gem update --system\n\ngem sources --remove https://rubygems.org/\n\ngem sources --add https://gems.ruby-china.com/\n\n```\n\n### 验证是否成功\n\n```gem\ngem sources -l\n\n# success\n*** CURRENT SOURCES ***\n\nhttps://gems.ruby-china.com/\n\n```\n\n## 安装CocoaPods\n\n`sudo gem install -n /usr/local/bin cocoapods`\n\n## 安装本地库\n\n`pod setup`\n\n## CocoaPods的使用\n\n使用终端cd进入Xcode工程根目录\n\n创建Podfile文件：\n\n```pod\npod init\n```\n\n编辑Podfile文件\n\n```pod\nvim Podfile\n```\n\n写入以下内容并保存 小提示：（终端vim文件 按 i 可编辑 ，esc 退出编辑，：wq  可保存退出）\n\n添加相关库：\n\n```pod\npod 'AFNetworking'\n```\n\n`:wq` 保持后退出\n\n开始下载：\n\n```pod\npod install\n```\n\n参考： https://www.jianshu.com/p/ab6411a05bc2","source":"_posts/CocoaPods/CocoaPods安装及简单使用.md","raw":"---\ntitle: CocoaPods安装及简单使用\ndate: 2019-07-02 16:50:27\ntags:\ncategories: CocoaPods\n---\n\n# CocoaPods ios 三方管理工具\n\n## Ruby镜像 更换源\n\n```gem\nsudo gem update --system\n\ngem sources --remove https://rubygems.org/\n\ngem sources --add https://gems.ruby-china.com/\n\n```\n\n### 验证是否成功\n\n```gem\ngem sources -l\n\n# success\n*** CURRENT SOURCES ***\n\nhttps://gems.ruby-china.com/\n\n```\n\n## 安装CocoaPods\n\n`sudo gem install -n /usr/local/bin cocoapods`\n\n## 安装本地库\n\n`pod setup`\n\n## CocoaPods的使用\n\n使用终端cd进入Xcode工程根目录\n\n创建Podfile文件：\n\n```pod\npod init\n```\n\n编辑Podfile文件\n\n```pod\nvim Podfile\n```\n\n写入以下内容并保存 小提示：（终端vim文件 按 i 可编辑 ，esc 退出编辑，：wq  可保存退出）\n\n添加相关库：\n\n```pod\npod 'AFNetworking'\n```\n\n`:wq` 保持后退出\n\n开始下载：\n\n```pod\npod install\n```\n\n参考： https://www.jianshu.com/p/ab6411a05bc2","slug":"CocoaPods/CocoaPods安装及简单使用","published":1,"updated":"2019-07-12T02:25:36.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp2v000kib36t8qizl5z","content":"<h1 id=\"CocoaPods-ios-三方管理工具\"><a href=\"#CocoaPods-ios-三方管理工具\" class=\"headerlink\" title=\"CocoaPods ios 三方管理工具\"></a>CocoaPods ios 三方管理工具</h1><h2 id=\"Ruby镜像-更换源\"><a href=\"#Ruby镜像-更换源\" class=\"headerlink\" title=\"Ruby镜像 更换源\"></a>Ruby镜像 更换源</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem update --system</span><br><span class=\"line\"></span><br><span class=\"line\">gem sources --remove https://rubygems.org/</span><br><span class=\"line\"></span><br><span class=\"line\">gem sources --add https://gems.ruby-china.com/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证是否成功\"><a href=\"#验证是否成功\" class=\"headerlink\" title=\"验证是否成功\"></a>验证是否成功</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources -l</span><br><span class=\"line\"></span><br><span class=\"line\"># success</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://gems.ruby-china.com/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装CocoaPods\"><a href=\"#安装CocoaPods\" class=\"headerlink\" title=\"安装CocoaPods\"></a>安装CocoaPods</h2><p><code>sudo gem install -n /usr/local/bin cocoapods</code></p>\n<h2 id=\"安装本地库\"><a href=\"#安装本地库\" class=\"headerlink\" title=\"安装本地库\"></a>安装本地库</h2><p><code>pod setup</code></p>\n<h2 id=\"CocoaPods的使用\"><a href=\"#CocoaPods的使用\" class=\"headerlink\" title=\"CocoaPods的使用\"></a>CocoaPods的使用</h2><p>使用终端cd进入Xcode工程根目录</p>\n<p>创建Podfile文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod init</span><br></pre></td></tr></table></figure>\n\n<p>编辑Podfile文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim Podfile</span><br></pre></td></tr></table></figure>\n\n<p>写入以下内容并保存 小提示：（终端vim文件 按 i 可编辑 ，esc 退出编辑，：wq  可保存退出）</p>\n<p>添加相关库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &apos;AFNetworking&apos;</span><br></pre></td></tr></table></figure>\n\n<p><code>:wq</code> 保持后退出</p>\n<p>开始下载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod install</span><br></pre></td></tr></table></figure>\n\n<p>参考： <a href=\"https://www.jianshu.com/p/ab6411a05bc2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ab6411a05bc2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CocoaPods-ios-三方管理工具\"><a href=\"#CocoaPods-ios-三方管理工具\" class=\"headerlink\" title=\"CocoaPods ios 三方管理工具\"></a>CocoaPods ios 三方管理工具</h1><h2 id=\"Ruby镜像-更换源\"><a href=\"#Ruby镜像-更换源\" class=\"headerlink\" title=\"Ruby镜像 更换源\"></a>Ruby镜像 更换源</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem update --system</span><br><span class=\"line\"></span><br><span class=\"line\">gem sources --remove https://rubygems.org/</span><br><span class=\"line\"></span><br><span class=\"line\">gem sources --add https://gems.ruby-china.com/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证是否成功\"><a href=\"#验证是否成功\" class=\"headerlink\" title=\"验证是否成功\"></a>验证是否成功</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources -l</span><br><span class=\"line\"></span><br><span class=\"line\"># success</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://gems.ruby-china.com/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装CocoaPods\"><a href=\"#安装CocoaPods\" class=\"headerlink\" title=\"安装CocoaPods\"></a>安装CocoaPods</h2><p><code>sudo gem install -n /usr/local/bin cocoapods</code></p>\n<h2 id=\"安装本地库\"><a href=\"#安装本地库\" class=\"headerlink\" title=\"安装本地库\"></a>安装本地库</h2><p><code>pod setup</code></p>\n<h2 id=\"CocoaPods的使用\"><a href=\"#CocoaPods的使用\" class=\"headerlink\" title=\"CocoaPods的使用\"></a>CocoaPods的使用</h2><p>使用终端cd进入Xcode工程根目录</p>\n<p>创建Podfile文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod init</span><br></pre></td></tr></table></figure>\n\n<p>编辑Podfile文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim Podfile</span><br></pre></td></tr></table></figure>\n\n<p>写入以下内容并保存 小提示：（终端vim文件 按 i 可编辑 ，esc 退出编辑，：wq  可保存退出）</p>\n<p>添加相关库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &apos;AFNetworking&apos;</span><br></pre></td></tr></table></figure>\n\n<p><code>:wq</code> 保持后退出</p>\n<p>开始下载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod install</span><br></pre></td></tr></table></figure>\n\n<p>参考： <a href=\"https://www.jianshu.com/p/ab6411a05bc2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ab6411a05bc2</a></p>\n"},{"_content":"Unix/Linux 系统中的 Operation Not Permitted 问题\n\nOS X EI Capitan 的 SIP\n\nApple 在 OS X 10.11 以后的版本中默认启动了一项系统保护程序，叫做 System Integrity Protection，也被唤作 rootless（寓意让 root 弱一点），该程序意在保护电脑不被恶意程序攻击，但是对于我们这群程序员，很多保护是多余的，甚至给我们带来了很多麻烦。\n\nSIP 会锁定几个系统文件目录：\n\n```\n/System\n/sbin\n/usr （/usr/local 除外）\n```\n\n在 SIP 的保护下，部分软件、功能、脚本都会失效，我们可以通过如下步骤关闭 SIP：\n\n重启电脑，按下 Command + R 直到听到开机声音，此时电脑会进入恢复模式（Recovery Mode）\n当 OSX 工具出现在屏幕中时，下拉工具（Utilities）菜单，选择终端（Terminal）\n键入 csrutil disable，回车\n电脑重启后，SIP 就关闭了\n\n恢复 SIP 的方式同上，只不过终端中键入 csrutil enable。通过 csrutil status 可以检测系统当前 SIP 的启动状态：\n\n```\n$ csrutil status\nSystem Integrity Protection status: enabled.\n```\n\n**参考：** https://www.barretlee.com/blog/2016/04/06/operation-not-permitted-problem-in-linux-or-unix-system/\n\n\n","source":"_posts/Unix/Linux系统权限.md","raw":"Unix/Linux 系统中的 Operation Not Permitted 问题\n\nOS X EI Capitan 的 SIP\n\nApple 在 OS X 10.11 以后的版本中默认启动了一项系统保护程序，叫做 System Integrity Protection，也被唤作 rootless（寓意让 root 弱一点），该程序意在保护电脑不被恶意程序攻击，但是对于我们这群程序员，很多保护是多余的，甚至给我们带来了很多麻烦。\n\nSIP 会锁定几个系统文件目录：\n\n```\n/System\n/sbin\n/usr （/usr/local 除外）\n```\n\n在 SIP 的保护下，部分软件、功能、脚本都会失效，我们可以通过如下步骤关闭 SIP：\n\n重启电脑，按下 Command + R 直到听到开机声音，此时电脑会进入恢复模式（Recovery Mode）\n当 OSX 工具出现在屏幕中时，下拉工具（Utilities）菜单，选择终端（Terminal）\n键入 csrutil disable，回车\n电脑重启后，SIP 就关闭了\n\n恢复 SIP 的方式同上，只不过终端中键入 csrutil enable。通过 csrutil status 可以检测系统当前 SIP 的启动状态：\n\n```\n$ csrutil status\nSystem Integrity Protection status: enabled.\n```\n\n**参考：** https://www.barretlee.com/blog/2016/04/06/operation-not-permitted-problem-in-linux-or-unix-system/\n\n\n","slug":"Unix/Linux系统权限","published":1,"date":"2019-07-08T06:06:28.761Z","updated":"2019-07-08T06:06:28.761Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp2w000lib36rk7bkx34","content":"<p>Unix/Linux 系统中的 Operation Not Permitted 问题</p>\n<p>OS X EI Capitan 的 SIP</p>\n<p>Apple 在 OS X 10.11 以后的版本中默认启动了一项系统保护程序，叫做 System Integrity Protection，也被唤作 rootless（寓意让 root 弱一点），该程序意在保护电脑不被恶意程序攻击，但是对于我们这群程序员，很多保护是多余的，甚至给我们带来了很多麻烦。</p>\n<p>SIP 会锁定几个系统文件目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/System</span><br><span class=\"line\">/sbin</span><br><span class=\"line\">/usr （/usr/local 除外）</span><br></pre></td></tr></table></figure>\n\n<p>在 SIP 的保护下，部分软件、功能、脚本都会失效，我们可以通过如下步骤关闭 SIP：</p>\n<p>重启电脑，按下 Command + R 直到听到开机声音，此时电脑会进入恢复模式（Recovery Mode）<br>当 OSX 工具出现在屏幕中时，下拉工具（Utilities）菜单，选择终端（Terminal）<br>键入 csrutil disable，回车<br>电脑重启后，SIP 就关闭了</p>\n<p>恢复 SIP 的方式同上，只不过终端中键入 csrutil enable。通过 csrutil status 可以检测系统当前 SIP 的启动状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ csrutil status</span><br><span class=\"line\">System Integrity Protection status: enabled.</span><br></pre></td></tr></table></figure>\n\n<p><strong>参考：</strong> <a href=\"https://www.barretlee.com/blog/2016/04/06/operation-not-permitted-problem-in-linux-or-unix-system/\" target=\"_blank\" rel=\"noopener\">https://www.barretlee.com/blog/2016/04/06/operation-not-permitted-problem-in-linux-or-unix-system/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Unix/Linux 系统中的 Operation Not Permitted 问题</p>\n<p>OS X EI Capitan 的 SIP</p>\n<p>Apple 在 OS X 10.11 以后的版本中默认启动了一项系统保护程序，叫做 System Integrity Protection，也被唤作 rootless（寓意让 root 弱一点），该程序意在保护电脑不被恶意程序攻击，但是对于我们这群程序员，很多保护是多余的，甚至给我们带来了很多麻烦。</p>\n<p>SIP 会锁定几个系统文件目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/System</span><br><span class=\"line\">/sbin</span><br><span class=\"line\">/usr （/usr/local 除外）</span><br></pre></td></tr></table></figure>\n\n<p>在 SIP 的保护下，部分软件、功能、脚本都会失效，我们可以通过如下步骤关闭 SIP：</p>\n<p>重启电脑，按下 Command + R 直到听到开机声音，此时电脑会进入恢复模式（Recovery Mode）<br>当 OSX 工具出现在屏幕中时，下拉工具（Utilities）菜单，选择终端（Terminal）<br>键入 csrutil disable，回车<br>电脑重启后，SIP 就关闭了</p>\n<p>恢复 SIP 的方式同上，只不过终端中键入 csrutil enable。通过 csrutil status 可以检测系统当前 SIP 的启动状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ csrutil status</span><br><span class=\"line\">System Integrity Protection status: enabled.</span><br></pre></td></tr></table></figure>\n\n<p><strong>参考：</strong> <a href=\"https://www.barretlee.com/blog/2016/04/06/operation-not-permitted-problem-in-linux-or-unix-system/\" target=\"_blank\" rel=\"noopener\">https://www.barretlee.com/blog/2016/04/06/operation-not-permitted-problem-in-linux-or-unix-system/</a></p>\n"},{"title":"OC-Keywords","date":"2018-11-09T04:53:32.000Z","_content":"\n# 关键字\n## `nullable`和`nonnull`\n\niOS9新出的关键字：用来修饰属性 方法的参数和返回值\n\n#### 在属性中使用nullable和nonnull：\n\n`nullable`: 表示修饰的属性或参数可以为空\n\n`nonnull`:非空，表示修饰的属性或参数不能为空\n\n**注意：nonnull,nullable只能修饰对象，不能修饰基本数据类型**\n\n3\b种写法：\n```\n@property (nonatomic, strong, nullable) NSString * name;\n@property (nonatomic, strong) NSString *_Nullable name;\n@property (nonatomic, strong) NSString *__nullable name;\n//\n@property (nonatomic, strong, nonnull) NSString * price;\n@property (nonatomic, strong) NSString *_Nullable name;\n@property (nonatomic, strong) NSString *__nullable name;\n```\n\n#### 在方法中使用nullable和nonnull：\n\n```\n- (nullable NSString *)buyBook:(nullable NSString *)book;\n- (NSString *__nullable)buyBook:( NSString *__nullable)book;\n- (NSString *_Nullable)buyBook:( NSString *_Nullable)book;\n```\n#### Nonnull区域设置(Audited Regions)\n宏定义\n```\nNS_ASSUME_NONNULL_BEGIN\n@property (nonatomic, strong) NSString * name;\n...\nNS_ASSUME_NONNULL_END\n```\n\n之间定义的所有属性和方法参数和返回值默认加上nonnull修饰\n\n为了**安全**起见，苹果还制定了几条**规则**：\n\n> 1.typedef定义的类型的nullability特性通常依赖于上下文，即使是在Audited Regions中，也不能假定它为nonnull。\n> 2.复杂的指针类型(如id *)必须显示去指定是nonnull还是nullable。例如，指定一个指向nullable对象的nonnull指针，可以使用”__nullable id * __nonnull”。\n> 3.我们经常使用的NSError **通常是被假定为一个指向nullable NSError对象的nullable指针。\n\n#### null_resettable\n**null_resettable: get方法:不能返回为空，set方法可以为空**\n```\n @property (nonatomic, strong, null_resettable) NSNumber * number;\n\n```\n当属性策略中使用了null_resettable修饰，就必须保证该属性的get方法返回不为空，否则编译器会如上图那样报警告⚠️。可以在set方法或get方法中做非空处理，以下是在get方法中做处理：\n```\n- (NSNumber *)number{\n    \n    if (_number == nil) {\n        _number = @11;\n    }\n    return _number;\n}\n```\n\n#### null_unspecified\n**null_unspecified:不确定是否为空,使用方式有三种：**\n```\n// 方法一\n@property(nonatomic,strong) NSNumber *_Null_unspecified height;\n// 方法二\n@property(nonatomic,strong) NSNumber *__null_unspecified height;\n// 方法三\n@property(nonatomic,strong,null_unspecified) NSNumber * height;\n```\n\n\n\n\n\n","source":"_posts/iOS/OC-Keywords.md","raw":"---\ntitle: OC-Keywords\ndate: 2018-11-09 12:53:32\ntags:\ncategories: Objective-C\n---\n\n# 关键字\n## `nullable`和`nonnull`\n\niOS9新出的关键字：用来修饰属性 方法的参数和返回值\n\n#### 在属性中使用nullable和nonnull：\n\n`nullable`: 表示修饰的属性或参数可以为空\n\n`nonnull`:非空，表示修饰的属性或参数不能为空\n\n**注意：nonnull,nullable只能修饰对象，不能修饰基本数据类型**\n\n3\b种写法：\n```\n@property (nonatomic, strong, nullable) NSString * name;\n@property (nonatomic, strong) NSString *_Nullable name;\n@property (nonatomic, strong) NSString *__nullable name;\n//\n@property (nonatomic, strong, nonnull) NSString * price;\n@property (nonatomic, strong) NSString *_Nullable name;\n@property (nonatomic, strong) NSString *__nullable name;\n```\n\n#### 在方法中使用nullable和nonnull：\n\n```\n- (nullable NSString *)buyBook:(nullable NSString *)book;\n- (NSString *__nullable)buyBook:( NSString *__nullable)book;\n- (NSString *_Nullable)buyBook:( NSString *_Nullable)book;\n```\n#### Nonnull区域设置(Audited Regions)\n宏定义\n```\nNS_ASSUME_NONNULL_BEGIN\n@property (nonatomic, strong) NSString * name;\n...\nNS_ASSUME_NONNULL_END\n```\n\n之间定义的所有属性和方法参数和返回值默认加上nonnull修饰\n\n为了**安全**起见，苹果还制定了几条**规则**：\n\n> 1.typedef定义的类型的nullability特性通常依赖于上下文，即使是在Audited Regions中，也不能假定它为nonnull。\n> 2.复杂的指针类型(如id *)必须显示去指定是nonnull还是nullable。例如，指定一个指向nullable对象的nonnull指针，可以使用”__nullable id * __nonnull”。\n> 3.我们经常使用的NSError **通常是被假定为一个指向nullable NSError对象的nullable指针。\n\n#### null_resettable\n**null_resettable: get方法:不能返回为空，set方法可以为空**\n```\n @property (nonatomic, strong, null_resettable) NSNumber * number;\n\n```\n当属性策略中使用了null_resettable修饰，就必须保证该属性的get方法返回不为空，否则编译器会如上图那样报警告⚠️。可以在set方法或get方法中做非空处理，以下是在get方法中做处理：\n```\n- (NSNumber *)number{\n    \n    if (_number == nil) {\n        _number = @11;\n    }\n    return _number;\n}\n```\n\n#### null_unspecified\n**null_unspecified:不确定是否为空,使用方式有三种：**\n```\n// 方法一\n@property(nonatomic,strong) NSNumber *_Null_unspecified height;\n// 方法二\n@property(nonatomic,strong) NSNumber *__null_unspecified height;\n// 方法三\n@property(nonatomic,strong,null_unspecified) NSNumber * height;\n```\n\n\n\n\n\n","slug":"iOS/OC-Keywords","published":1,"updated":"2019-08-09T05:52:32.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp2x000mib36mfp1lv0c","content":"<h1 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h1><h2 id=\"nullable和nonnull\"><a href=\"#nullable和nonnull\" class=\"headerlink\" title=\"nullable和nonnull\"></a><code>nullable</code>和<code>nonnull</code></h2><p>iOS9新出的关键字：用来修饰属性 方法的参数和返回值</p>\n<h4 id=\"在属性中使用nullable和nonnull：\"><a href=\"#在属性中使用nullable和nonnull：\" class=\"headerlink\" title=\"在属性中使用nullable和nonnull：\"></a>在属性中使用nullable和nonnull：</h4><p><code>nullable</code>: 表示修饰的属性或参数可以为空</p>\n<p><code>nonnull</code>:非空，表示修饰的属性或参数不能为空</p>\n<p><strong>注意：nonnull,nullable只能修饰对象，不能修饰基本数据类型</strong></p>\n<p>3\b种写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong, nullable) NSString * name;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *_Nullable name;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *__nullable name;</span><br><span class=\"line\">//</span><br><span class=\"line\">@property (nonatomic, strong, nonnull) NSString * price;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *_Nullable name;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *__nullable name;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在方法中使用nullable和nonnull：\"><a href=\"#在方法中使用nullable和nonnull：\" class=\"headerlink\" title=\"在方法中使用nullable和nonnull：\"></a>在方法中使用nullable和nonnull：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (nullable NSString *)buyBook:(nullable NSString *)book;</span><br><span class=\"line\">- (NSString *__nullable)buyBook:( NSString *__nullable)book;</span><br><span class=\"line\">- (NSString *_Nullable)buyBook:( NSString *_Nullable)book;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Nonnull区域设置-Audited-Regions\"><a href=\"#Nonnull区域设置-Audited-Regions\" class=\"headerlink\" title=\"Nonnull区域设置(Audited Regions)\"></a>Nonnull区域设置(Audited Regions)</h4><p>宏定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NS_ASSUME_NONNULL_BEGIN</span><br><span class=\"line\">@property (nonatomic, strong) NSString * name;</span><br><span class=\"line\">...</span><br><span class=\"line\">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure>\n\n<p>之间定义的所有属性和方法参数和返回值默认加上nonnull修饰</p>\n<p>为了<strong>安全</strong>起见，苹果还制定了几条<strong>规则</strong>：</p>\n<blockquote>\n<p>1.typedef定义的类型的nullability特性通常依赖于上下文，即使是在Audited Regions中，也不能假定它为nonnull。<br>2.复杂的指针类型(如id <em>)必须显示去指定是nonnull还是nullable。例如，指定一个指向nullable对象的nonnull指针，可以使用”__nullable id * __nonnull”。<br>3.我们经常使用的NSError *</em>通常是被假定为一个指向nullable NSError对象的nullable指针。</p>\n</blockquote>\n<h4 id=\"null-resettable\"><a href=\"#null-resettable\" class=\"headerlink\" title=\"null_resettable\"></a>null_resettable</h4><p><strong>null_resettable: get方法:不能返回为空，set方法可以为空</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong, null_resettable) NSNumber * number;</span><br></pre></td></tr></table></figure>\n\n<p>当属性策略中使用了null_resettable修饰，就必须保证该属性的get方法返回不为空，否则编译器会如上图那样报警告⚠️。可以在set方法或get方法中做非空处理，以下是在get方法中做处理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSNumber *)number&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (_number == nil) &#123;</span><br><span class=\"line\">        _number = @11;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"null-unspecified\"><a href=\"#null-unspecified\" class=\"headerlink\" title=\"null_unspecified\"></a>null_unspecified</h4><p><strong>null_unspecified:不确定是否为空,使用方式有三种：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 方法一</span><br><span class=\"line\">@property(nonatomic,strong) NSNumber *_Null_unspecified height;</span><br><span class=\"line\">// 方法二</span><br><span class=\"line\">@property(nonatomic,strong) NSNumber *__null_unspecified height;</span><br><span class=\"line\">// 方法三</span><br><span class=\"line\">@property(nonatomic,strong,null_unspecified) NSNumber * height;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h1><h2 id=\"nullable和nonnull\"><a href=\"#nullable和nonnull\" class=\"headerlink\" title=\"nullable和nonnull\"></a><code>nullable</code>和<code>nonnull</code></h2><p>iOS9新出的关键字：用来修饰属性 方法的参数和返回值</p>\n<h4 id=\"在属性中使用nullable和nonnull：\"><a href=\"#在属性中使用nullable和nonnull：\" class=\"headerlink\" title=\"在属性中使用nullable和nonnull：\"></a>在属性中使用nullable和nonnull：</h4><p><code>nullable</code>: 表示修饰的属性或参数可以为空</p>\n<p><code>nonnull</code>:非空，表示修饰的属性或参数不能为空</p>\n<p><strong>注意：nonnull,nullable只能修饰对象，不能修饰基本数据类型</strong></p>\n<p>3\b种写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong, nullable) NSString * name;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *_Nullable name;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *__nullable name;</span><br><span class=\"line\">//</span><br><span class=\"line\">@property (nonatomic, strong, nonnull) NSString * price;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *_Nullable name;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *__nullable name;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在方法中使用nullable和nonnull：\"><a href=\"#在方法中使用nullable和nonnull：\" class=\"headerlink\" title=\"在方法中使用nullable和nonnull：\"></a>在方法中使用nullable和nonnull：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (nullable NSString *)buyBook:(nullable NSString *)book;</span><br><span class=\"line\">- (NSString *__nullable)buyBook:( NSString *__nullable)book;</span><br><span class=\"line\">- (NSString *_Nullable)buyBook:( NSString *_Nullable)book;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Nonnull区域设置-Audited-Regions\"><a href=\"#Nonnull区域设置-Audited-Regions\" class=\"headerlink\" title=\"Nonnull区域设置(Audited Regions)\"></a>Nonnull区域设置(Audited Regions)</h4><p>宏定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NS_ASSUME_NONNULL_BEGIN</span><br><span class=\"line\">@property (nonatomic, strong) NSString * name;</span><br><span class=\"line\">...</span><br><span class=\"line\">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure>\n\n<p>之间定义的所有属性和方法参数和返回值默认加上nonnull修饰</p>\n<p>为了<strong>安全</strong>起见，苹果还制定了几条<strong>规则</strong>：</p>\n<blockquote>\n<p>1.typedef定义的类型的nullability特性通常依赖于上下文，即使是在Audited Regions中，也不能假定它为nonnull。<br>2.复杂的指针类型(如id <em>)必须显示去指定是nonnull还是nullable。例如，指定一个指向nullable对象的nonnull指针，可以使用”__nullable id * __nonnull”。<br>3.我们经常使用的NSError *</em>通常是被假定为一个指向nullable NSError对象的nullable指针。</p>\n</blockquote>\n<h4 id=\"null-resettable\"><a href=\"#null-resettable\" class=\"headerlink\" title=\"null_resettable\"></a>null_resettable</h4><p><strong>null_resettable: get方法:不能返回为空，set方法可以为空</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong, null_resettable) NSNumber * number;</span><br></pre></td></tr></table></figure>\n\n<p>当属性策略中使用了null_resettable修饰，就必须保证该属性的get方法返回不为空，否则编译器会如上图那样报警告⚠️。可以在set方法或get方法中做非空处理，以下是在get方法中做处理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSNumber *)number&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (_number == nil) &#123;</span><br><span class=\"line\">        _number = @11;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"null-unspecified\"><a href=\"#null-unspecified\" class=\"headerlink\" title=\"null_unspecified\"></a>null_unspecified</h4><p><strong>null_unspecified:不确定是否为空,使用方式有三种：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 方法一</span><br><span class=\"line\">@property(nonatomic,strong) NSNumber *_Null_unspecified height;</span><br><span class=\"line\">// 方法二</span><br><span class=\"line\">@property(nonatomic,strong) NSNumber *__null_unspecified height;</span><br><span class=\"line\">// 方法三</span><br><span class=\"line\">@property(nonatomic,strong,null_unspecified) NSNumber * height;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"CocoaPods创建公有Pod库","date":"2019-03-08T03:50:31.000Z","_content":"\n# 1.注册CocoaPods账号信息\n\n> pod trunk register 邮箱地址 用户名 --verbose\n\n在邮箱中收到确认邮箱，在浏览器中点击链接确认即注册成功\n\n查看注册信息及自己开源pod库\n\n> pod trunk me\n\n# 2.Github创建仓库（略）\n\n# 3.创建共享库文件并上传到公有仓库\n\n> pod lib create 库名\n\n配置*.podspec文件\n\n# 4.推送到远程仓库\n\n# 5.打tag, 发布一个release版本\n\n> git tag -m 'first release' '1.0.1'\n> git push --tags #推送tag到远端仓库\n\n# 6.trunk push pod\n\n> pod trunk push TestPod.podspec --allow-warnings\n\n# 7.search pod\n\n> pod search TestPod 检验是否可用\n\n* 问题\n\n> [!] Unable to find a pod with name, author, summary, or description matching `TestPod`\n\n* 解决办法\n\n> rm ~/Library/Caches/CocoaPods/search_index.json","source":"_posts/CocoaPods/CocoaPods创建公有Pod库.md","raw":"---\ntitle: CocoaPods创建公有Pod库\ndate: 2019-03-08 11:50:31\ntags: \ncategories: CocoaPods\n---\n\n# 1.注册CocoaPods账号信息\n\n> pod trunk register 邮箱地址 用户名 --verbose\n\n在邮箱中收到确认邮箱，在浏览器中点击链接确认即注册成功\n\n查看注册信息及自己开源pod库\n\n> pod trunk me\n\n# 2.Github创建仓库（略）\n\n# 3.创建共享库文件并上传到公有仓库\n\n> pod lib create 库名\n\n配置*.podspec文件\n\n# 4.推送到远程仓库\n\n# 5.打tag, 发布一个release版本\n\n> git tag -m 'first release' '1.0.1'\n> git push --tags #推送tag到远端仓库\n\n# 6.trunk push pod\n\n> pod trunk push TestPod.podspec --allow-warnings\n\n# 7.search pod\n\n> pod search TestPod 检验是否可用\n\n* 问题\n\n> [!] Unable to find a pod with name, author, summary, or description matching `TestPod`\n\n* 解决办法\n\n> rm ~/Library/Caches/CocoaPods/search_index.json","slug":"CocoaPods/CocoaPods创建公有Pod库","published":1,"updated":"2019-07-08T06:06:28.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp2y000oib36one4uauo","content":"<h1 id=\"1-注册CocoaPods账号信息\"><a href=\"#1-注册CocoaPods账号信息\" class=\"headerlink\" title=\"1.注册CocoaPods账号信息\"></a>1.注册CocoaPods账号信息</h1><blockquote>\n<p>pod trunk register 邮箱地址 用户名 –verbose</p>\n</blockquote>\n<p>在邮箱中收到确认邮箱，在浏览器中点击链接确认即注册成功</p>\n<p>查看注册信息及自己开源pod库</p>\n<blockquote>\n<p>pod trunk me</p>\n</blockquote>\n<h1 id=\"2-Github创建仓库（略）\"><a href=\"#2-Github创建仓库（略）\" class=\"headerlink\" title=\"2.Github创建仓库（略）\"></a>2.Github创建仓库（略）</h1><h1 id=\"3-创建共享库文件并上传到公有仓库\"><a href=\"#3-创建共享库文件并上传到公有仓库\" class=\"headerlink\" title=\"3.创建共享库文件并上传到公有仓库\"></a>3.创建共享库文件并上传到公有仓库</h1><blockquote>\n<p>pod lib create 库名</p>\n</blockquote>\n<p>配置*.podspec文件</p>\n<h1 id=\"4-推送到远程仓库\"><a href=\"#4-推送到远程仓库\" class=\"headerlink\" title=\"4.推送到远程仓库\"></a>4.推送到远程仓库</h1><h1 id=\"5-打tag-发布一个release版本\"><a href=\"#5-打tag-发布一个release版本\" class=\"headerlink\" title=\"5.打tag, 发布一个release版本\"></a>5.打tag, 发布一个release版本</h1><blockquote>\n<p>git tag -m ‘first release’ ‘1.0.1’<br>git push –tags #推送tag到远端仓库</p>\n</blockquote>\n<h1 id=\"6-trunk-push-pod\"><a href=\"#6-trunk-push-pod\" class=\"headerlink\" title=\"6.trunk push pod\"></a>6.trunk push pod</h1><blockquote>\n<p>pod trunk push TestPod.podspec –allow-warnings</p>\n</blockquote>\n<h1 id=\"7-search-pod\"><a href=\"#7-search-pod\" class=\"headerlink\" title=\"7.search pod\"></a>7.search pod</h1><blockquote>\n<p>pod search TestPod 检验是否可用</p>\n</blockquote>\n<ul>\n<li>问题</li>\n</ul>\n<blockquote>\n<p>[!] Unable to find a pod with name, author, summary, or description matching <code>TestPod</code></p>\n</blockquote>\n<ul>\n<li>解决办法</li>\n</ul>\n<blockquote>\n<p>rm ~/Library/Caches/CocoaPods/search_index.json</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-注册CocoaPods账号信息\"><a href=\"#1-注册CocoaPods账号信息\" class=\"headerlink\" title=\"1.注册CocoaPods账号信息\"></a>1.注册CocoaPods账号信息</h1><blockquote>\n<p>pod trunk register 邮箱地址 用户名 –verbose</p>\n</blockquote>\n<p>在邮箱中收到确认邮箱，在浏览器中点击链接确认即注册成功</p>\n<p>查看注册信息及自己开源pod库</p>\n<blockquote>\n<p>pod trunk me</p>\n</blockquote>\n<h1 id=\"2-Github创建仓库（略）\"><a href=\"#2-Github创建仓库（略）\" class=\"headerlink\" title=\"2.Github创建仓库（略）\"></a>2.Github创建仓库（略）</h1><h1 id=\"3-创建共享库文件并上传到公有仓库\"><a href=\"#3-创建共享库文件并上传到公有仓库\" class=\"headerlink\" title=\"3.创建共享库文件并上传到公有仓库\"></a>3.创建共享库文件并上传到公有仓库</h1><blockquote>\n<p>pod lib create 库名</p>\n</blockquote>\n<p>配置*.podspec文件</p>\n<h1 id=\"4-推送到远程仓库\"><a href=\"#4-推送到远程仓库\" class=\"headerlink\" title=\"4.推送到远程仓库\"></a>4.推送到远程仓库</h1><h1 id=\"5-打tag-发布一个release版本\"><a href=\"#5-打tag-发布一个release版本\" class=\"headerlink\" title=\"5.打tag, 发布一个release版本\"></a>5.打tag, 发布一个release版本</h1><blockquote>\n<p>git tag -m ‘first release’ ‘1.0.1’<br>git push –tags #推送tag到远端仓库</p>\n</blockquote>\n<h1 id=\"6-trunk-push-pod\"><a href=\"#6-trunk-push-pod\" class=\"headerlink\" title=\"6.trunk push pod\"></a>6.trunk push pod</h1><blockquote>\n<p>pod trunk push TestPod.podspec –allow-warnings</p>\n</blockquote>\n<h1 id=\"7-search-pod\"><a href=\"#7-search-pod\" class=\"headerlink\" title=\"7.search pod\"></a>7.search pod</h1><blockquote>\n<p>pod search TestPod 检验是否可用</p>\n</blockquote>\n<ul>\n<li>问题</li>\n</ul>\n<blockquote>\n<p>[!] Unable to find a pod with name, author, summary, or description matching <code>TestPod</code></p>\n</blockquote>\n<ul>\n<li>解决办法</li>\n</ul>\n<blockquote>\n<p>rm ~/Library/Caches/CocoaPods/search_index.json</p>\n</blockquote>\n"},{"_content":"# MAC系统 Apache+PHP配置\n\n## 开启apache\n\n> sudo apachectl start\n\n重启apache：\n> sudo apachectl restart\n\n关闭apache：\n> sudo apachectl stop\n\n开启apache：\n> sudo apachectl start\n\n版本apache：\n> httpd -v\n\n## 开启PHP\n\n查看本地php版本：\n> php -v\n\n打开文件\n> /etc/apache2/httpd.conf\n\nphp5:\n> LoadModule php5_module libexec/apache2/libphp5.so\n\nphp7:\n> LoadModule php7_module libexec/apache2/libphp7.so\n\n去掉前面的`#`\n\n重启apache：\n> sudo apachectl restart\n\n## 修改apache本地服务器路径\n\n默认路径：`/Library/WebServer/Documents`\n\n具体步骤：（我mac的用户名为henry，以下均以henry为例）\n\n1. 在用户名下创建文件夹Sites\n\n2. 打开文件/etc/apache2/httpd.conf\n\n    * 去掉前面的`#`\n    > LoadModule userdir_module libexec/apache2/mod_userdir.so\n\n    * 修改`DocumentRoot`为：\n\n        ```t\n        DocumentRoot \"/Users/henry/Sites\"\n        <Directory \"/Users/henry/Sites\">\n        ```\n\n    * `Options FollowSymLinks Multiviews` 修改为 `Options FollowSymLinks Multiviews Indexes`\n\n3. 创建文件/etc/apache2/users/henry.conf\n\n    输入以下内容：\n\n    ```t\n    <Directory \"/Users/henry/Sites/\">\n        Options Indexes MultiViews\n        AllowOverride All\n    </Directory>\n    ```\n\n4. 重启apache服务器\n\n    > sudo apachectl restart","source":"_posts/apache/apache.md","raw":"# MAC系统 Apache+PHP配置\n\n## 开启apache\n\n> sudo apachectl start\n\n重启apache：\n> sudo apachectl restart\n\n关闭apache：\n> sudo apachectl stop\n\n开启apache：\n> sudo apachectl start\n\n版本apache：\n> httpd -v\n\n## 开启PHP\n\n查看本地php版本：\n> php -v\n\n打开文件\n> /etc/apache2/httpd.conf\n\nphp5:\n> LoadModule php5_module libexec/apache2/libphp5.so\n\nphp7:\n> LoadModule php7_module libexec/apache2/libphp7.so\n\n去掉前面的`#`\n\n重启apache：\n> sudo apachectl restart\n\n## 修改apache本地服务器路径\n\n默认路径：`/Library/WebServer/Documents`\n\n具体步骤：（我mac的用户名为henry，以下均以henry为例）\n\n1. 在用户名下创建文件夹Sites\n\n2. 打开文件/etc/apache2/httpd.conf\n\n    * 去掉前面的`#`\n    > LoadModule userdir_module libexec/apache2/mod_userdir.so\n\n    * 修改`DocumentRoot`为：\n\n        ```t\n        DocumentRoot \"/Users/henry/Sites\"\n        <Directory \"/Users/henry/Sites\">\n        ```\n\n    * `Options FollowSymLinks Multiviews` 修改为 `Options FollowSymLinks Multiviews Indexes`\n\n3. 创建文件/etc/apache2/users/henry.conf\n\n    输入以下内容：\n\n    ```t\n    <Directory \"/Users/henry/Sites/\">\n        Options Indexes MultiViews\n        AllowOverride All\n    </Directory>\n    ```\n\n4. 重启apache服务器\n\n    > sudo apachectl restart","slug":"apache/apache","published":1,"date":"2019-07-08T06:06:28.761Z","updated":"2019-11-22T08:09:55.418Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp2z000pib36y0v429iq","content":"<h1 id=\"MAC系统-Apache-PHP配置\"><a href=\"#MAC系统-Apache-PHP配置\" class=\"headerlink\" title=\"MAC系统 Apache+PHP配置\"></a>MAC系统 Apache+PHP配置</h1><h2 id=\"开启apache\"><a href=\"#开启apache\" class=\"headerlink\" title=\"开启apache\"></a>开启apache</h2><blockquote>\n<p>sudo apachectl start</p>\n</blockquote>\n<p>重启apache：</p>\n<blockquote>\n<p>sudo apachectl restart</p>\n</blockquote>\n<p>关闭apache：</p>\n<blockquote>\n<p>sudo apachectl stop</p>\n</blockquote>\n<p>开启apache：</p>\n<blockquote>\n<p>sudo apachectl start</p>\n</blockquote>\n<p>版本apache：</p>\n<blockquote>\n<p>httpd -v</p>\n</blockquote>\n<h2 id=\"开启PHP\"><a href=\"#开启PHP\" class=\"headerlink\" title=\"开启PHP\"></a>开启PHP</h2><p>查看本地php版本：</p>\n<blockquote>\n<p>php -v</p>\n</blockquote>\n<p>打开文件</p>\n<blockquote>\n<p>/etc/apache2/httpd.conf</p>\n</blockquote>\n<p>php5:</p>\n<blockquote>\n<p>LoadModule php5_module libexec/apache2/libphp5.so</p>\n</blockquote>\n<p>php7:</p>\n<blockquote>\n<p>LoadModule php7_module libexec/apache2/libphp7.so</p>\n</blockquote>\n<p>去掉前面的<code>#</code></p>\n<p>重启apache：</p>\n<blockquote>\n<p>sudo apachectl restart</p>\n</blockquote>\n<h2 id=\"修改apache本地服务器路径\"><a href=\"#修改apache本地服务器路径\" class=\"headerlink\" title=\"修改apache本地服务器路径\"></a>修改apache本地服务器路径</h2><p>默认路径：<code>/Library/WebServer/Documents</code></p>\n<p>具体步骤：（我mac的用户名为henry，以下均以henry为例）</p>\n<ol>\n<li><p>在用户名下创建文件夹Sites</p>\n</li>\n<li><p>打开文件/etc/apache2/httpd.conf</p>\n<ul>\n<li><p>去掉前面的<code>#</code></p>\n<blockquote>\n<p>LoadModule userdir_module libexec/apache2/mod_userdir.so</p>\n</blockquote>\n</li>\n<li><p>修改<code>DocumentRoot</code>为：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DocumentRoot &quot;/Users/henry/Sites&quot;</span><br><span class=\"line\">&lt;Directory &quot;/Users/henry/Sites&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Options FollowSymLinks Multiviews</code> 修改为 <code>Options FollowSymLinks Multiviews Indexes</code></p>\n</li>\n</ul>\n</li>\n<li><p>创建文件/etc/apache2/users/henry.conf</p>\n<p> 输入以下内容：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory &quot;/Users/henry/Sites/&quot;&gt;</span><br><span class=\"line\">    Options Indexes MultiViews</span><br><span class=\"line\">    AllowOverride All</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启apache服务器</p>\n<blockquote>\n<p>sudo apachectl restart</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MAC系统-Apache-PHP配置\"><a href=\"#MAC系统-Apache-PHP配置\" class=\"headerlink\" title=\"MAC系统 Apache+PHP配置\"></a>MAC系统 Apache+PHP配置</h1><h2 id=\"开启apache\"><a href=\"#开启apache\" class=\"headerlink\" title=\"开启apache\"></a>开启apache</h2><blockquote>\n<p>sudo apachectl start</p>\n</blockquote>\n<p>重启apache：</p>\n<blockquote>\n<p>sudo apachectl restart</p>\n</blockquote>\n<p>关闭apache：</p>\n<blockquote>\n<p>sudo apachectl stop</p>\n</blockquote>\n<p>开启apache：</p>\n<blockquote>\n<p>sudo apachectl start</p>\n</blockquote>\n<p>版本apache：</p>\n<blockquote>\n<p>httpd -v</p>\n</blockquote>\n<h2 id=\"开启PHP\"><a href=\"#开启PHP\" class=\"headerlink\" title=\"开启PHP\"></a>开启PHP</h2><p>查看本地php版本：</p>\n<blockquote>\n<p>php -v</p>\n</blockquote>\n<p>打开文件</p>\n<blockquote>\n<p>/etc/apache2/httpd.conf</p>\n</blockquote>\n<p>php5:</p>\n<blockquote>\n<p>LoadModule php5_module libexec/apache2/libphp5.so</p>\n</blockquote>\n<p>php7:</p>\n<blockquote>\n<p>LoadModule php7_module libexec/apache2/libphp7.so</p>\n</blockquote>\n<p>去掉前面的<code>#</code></p>\n<p>重启apache：</p>\n<blockquote>\n<p>sudo apachectl restart</p>\n</blockquote>\n<h2 id=\"修改apache本地服务器路径\"><a href=\"#修改apache本地服务器路径\" class=\"headerlink\" title=\"修改apache本地服务器路径\"></a>修改apache本地服务器路径</h2><p>默认路径：<code>/Library/WebServer/Documents</code></p>\n<p>具体步骤：（我mac的用户名为henry，以下均以henry为例）</p>\n<ol>\n<li><p>在用户名下创建文件夹Sites</p>\n</li>\n<li><p>打开文件/etc/apache2/httpd.conf</p>\n<ul>\n<li><p>去掉前面的<code>#</code></p>\n<blockquote>\n<p>LoadModule userdir_module libexec/apache2/mod_userdir.so</p>\n</blockquote>\n</li>\n<li><p>修改<code>DocumentRoot</code>为：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DocumentRoot &quot;/Users/henry/Sites&quot;</span><br><span class=\"line\">&lt;Directory &quot;/Users/henry/Sites&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Options FollowSymLinks Multiviews</code> 修改为 <code>Options FollowSymLinks Multiviews Indexes</code></p>\n</li>\n</ul>\n</li>\n<li><p>创建文件/etc/apache2/users/henry.conf</p>\n<p> 输入以下内容：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory &quot;/Users/henry/Sites/&quot;&gt;</span><br><span class=\"line\">    Options Indexes MultiViews</span><br><span class=\"line\">    AllowOverride All</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启apache服务器</p>\n<blockquote>\n<p>sudo apachectl restart</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"OC-Property","date":"2018-12-19T05:19:32.000Z","_content":"\n## 属性 @property\n\n@property = 实例变量 + get方法 + set方法\n\nExample\n```\n@property (nonatomic, copy) NSString *name;\n```\n属性name生成的setter方法\n```\n- (void)setName:(NSString *)name;\n\n// rewrite setter\n- (void)setName:(NSString *)name {\n    _name = name;\n}\n```\n属性name生成的getter方法\n```\n- (NSString *)name;\n\n// rewrite getter\n- (NSString *)name {\n    return _name;\n}\n```\n\n#### 自动合成\n> 定义一个@property，在*编译*期间，编译器会*自动*生成*\b实例变量*、*getter方法*、*setter方法*，这些方法、变量是通过*自动合成*（`autosynthesize`）的方式生成并添加到类中。\n实际上，一个类经过编译后，会生成变量列表`ivar_list`和\b方法列表`method_list`，每添加\b一个属性，在\b变量列表`ivar_list`会添加对应的*\b变量*，方法列表`method_list\b`会添加对应的*setter*方法和*getter*方法。\n\n\b对应的代码：\n```\n@synthesize name = _name;\n```\n编译器自动生成，无需手动添加\n\n#### 动态合成\n\n```\n@dynamic sex;\n```\n这样代码告诉编译器，sex属性的变量名、getter方法、setter方法由开发者自己来添加，编译器无需处理。\n\n\b**特别注明：**\n> `getter方法中不能用self.,会造成死循环`\n\n```\n- (NSString *)name {\n    return self.name;  // 错误的写法，会造成死循环\n}\n```\n`self.name`实际上就是执行了属性name的getter方法，getter方法中又调用了`self.name`，会一直递归调用，直到程序崩溃\n\n```\nself.name = @\"aaa\";\n```\n这样的方式，setter方法会被调用。\n\n### @property修饰符\n\n修饰符有四种：\n\n> 1. 原子性：`nonatomic`、`atomic`：不能绝对保证线程安全，会耗费一些性能，默认`nonatomic`\n> 2. 读写权限：`readwrite`、`readonly` 默认`readwrite`\n> 3. 内存管理：`assign`、`strong`、`weak`、`copy`、`unsafe_unretained`\n> 4. set、get方法名\n> 5. 可为空 nullable、nonnull\n\n#### nonatomic非原子性 atomic原子性\n\n不写默认是`atomic`原子性\n\n*区别*：系统自动生成的getter/setter方法不一样。\n\n`atomic`的属性，系统生成的getter/setter会保证get、set操作的完整性，不受其他线程的影响。比如，线程 A 的 getter 方法运行到一半，线程 B 调用了 setter：那么线程 A 的 getter 还是能得到一个完好无损的对象。\n\n`nonatomic`的属性，没有这个保证，`nonatomic`的速度要比`atomic`快\n\n`atomic`并不能保证线程安全。如果线程 A 调了 getter，与此同时线程 B 、线程 C 都调了 setter——那最后线程 A get 到的值，3种都有可能：可能是 B、C set 之前原始的值，也可能是 B set 的值，也可能是 C set 的值。同时，最终这个属性的值，可能是 B set 的值，也有可能是 C set 的值。\n\n*保证数据完整性——这个多线程编程的最大挑战之一*\n\n#### assign\n\n`assion`用于非指针变量。基础数据类型（例如NSInteger）和C数据类型（int、float、double、char等），以及id类型。\n\n用于对基本数据类型进行复制操作，不更改引用计数。也可以用来修饰对象，但是\b，被`assign`修饰的对象在释放后，指针的地址还是存在的，也就是说指针并没有被置为nil，成为野指针。如果后续在分配到堆上的\b某块内存时，正好分到这块内存，程序就会crash。之说以可以修饰基本数据类型，因为基本数据类型一般分配到栈上，栈的内存会由系统自动处理，不会造成野指针。\n\n#### weak\n\n`weak`修饰Object类型，ARC下修饰delegate属性\n\n在ARC环境下，所有指向这个对象的weak指针都将被置为nil。\n修饰Object类型，修饰的对象在释放后，指针\b地址会被置为nil，是\b\b一种弱\b\n\n\n","source":"_posts/iOS/OC-Property.md","raw":"---\ntitle: OC-Property\ndate: 2018-12-19 13:19:32\ntags:\ncategories: Objective-C\n---\n\n## 属性 @property\n\n@property = 实例变量 + get方法 + set方法\n\nExample\n```\n@property (nonatomic, copy) NSString *name;\n```\n属性name生成的setter方法\n```\n- (void)setName:(NSString *)name;\n\n// rewrite setter\n- (void)setName:(NSString *)name {\n    _name = name;\n}\n```\n属性name生成的getter方法\n```\n- (NSString *)name;\n\n// rewrite getter\n- (NSString *)name {\n    return _name;\n}\n```\n\n#### 自动合成\n> 定义一个@property，在*编译*期间，编译器会*自动*生成*\b实例变量*、*getter方法*、*setter方法*，这些方法、变量是通过*自动合成*（`autosynthesize`）的方式生成并添加到类中。\n实际上，一个类经过编译后，会生成变量列表`ivar_list`和\b方法列表`method_list`，每添加\b一个属性，在\b变量列表`ivar_list`会添加对应的*\b变量*，方法列表`method_list\b`会添加对应的*setter*方法和*getter*方法。\n\n\b对应的代码：\n```\n@synthesize name = _name;\n```\n编译器自动生成，无需手动添加\n\n#### 动态合成\n\n```\n@dynamic sex;\n```\n这样代码告诉编译器，sex属性的变量名、getter方法、setter方法由开发者自己来添加，编译器无需处理。\n\n\b**特别注明：**\n> `getter方法中不能用self.,会造成死循环`\n\n```\n- (NSString *)name {\n    return self.name;  // 错误的写法，会造成死循环\n}\n```\n`self.name`实际上就是执行了属性name的getter方法，getter方法中又调用了`self.name`，会一直递归调用，直到程序崩溃\n\n```\nself.name = @\"aaa\";\n```\n这样的方式，setter方法会被调用。\n\n### @property修饰符\n\n修饰符有四种：\n\n> 1. 原子性：`nonatomic`、`atomic`：不能绝对保证线程安全，会耗费一些性能，默认`nonatomic`\n> 2. 读写权限：`readwrite`、`readonly` 默认`readwrite`\n> 3. 内存管理：`assign`、`strong`、`weak`、`copy`、`unsafe_unretained`\n> 4. set、get方法名\n> 5. 可为空 nullable、nonnull\n\n#### nonatomic非原子性 atomic原子性\n\n不写默认是`atomic`原子性\n\n*区别*：系统自动生成的getter/setter方法不一样。\n\n`atomic`的属性，系统生成的getter/setter会保证get、set操作的完整性，不受其他线程的影响。比如，线程 A 的 getter 方法运行到一半，线程 B 调用了 setter：那么线程 A 的 getter 还是能得到一个完好无损的对象。\n\n`nonatomic`的属性，没有这个保证，`nonatomic`的速度要比`atomic`快\n\n`atomic`并不能保证线程安全。如果线程 A 调了 getter，与此同时线程 B 、线程 C 都调了 setter——那最后线程 A get 到的值，3种都有可能：可能是 B、C set 之前原始的值，也可能是 B set 的值，也可能是 C set 的值。同时，最终这个属性的值，可能是 B set 的值，也有可能是 C set 的值。\n\n*保证数据完整性——这个多线程编程的最大挑战之一*\n\n#### assign\n\n`assion`用于非指针变量。基础数据类型（例如NSInteger）和C数据类型（int、float、double、char等），以及id类型。\n\n用于对基本数据类型进行复制操作，不更改引用计数。也可以用来修饰对象，但是\b，被`assign`修饰的对象在释放后，指针的地址还是存在的，也就是说指针并没有被置为nil，成为野指针。如果后续在分配到堆上的\b某块内存时，正好分到这块内存，程序就会crash。之说以可以修饰基本数据类型，因为基本数据类型一般分配到栈上，栈的内存会由系统自动处理，不会造成野指针。\n\n#### weak\n\n`weak`修饰Object类型，ARC下修饰delegate属性\n\n在ARC环境下，所有指向这个对象的weak指针都将被置为nil。\n修饰Object类型，修饰的对象在释放后，指针\b地址会被置为nil，是\b\b一种弱\b\n\n\n","slug":"iOS/OC-Property","published":1,"updated":"2019-08-09T05:52:41.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp30000sib36ti2uam9v","content":"<h2 id=\"属性-property\"><a href=\"#属性-property\" class=\"headerlink\" title=\"属性 @property\"></a>属性 @property</h2><p>@property = 实例变量 + get方法 + set方法</p>\n<p>Example</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, copy) NSString *name;</span><br></pre></td></tr></table></figure>\n\n<p>属性name生成的setter方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setName:(NSString *)name;</span><br><span class=\"line\"></span><br><span class=\"line\">// rewrite setter</span><br><span class=\"line\">- (void)setName:(NSString *)name &#123;</span><br><span class=\"line\">    _name = name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>属性name生成的getter方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)name;</span><br><span class=\"line\"></span><br><span class=\"line\">// rewrite getter</span><br><span class=\"line\">- (NSString *)name &#123;</span><br><span class=\"line\">    return _name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自动合成\"><a href=\"#自动合成\" class=\"headerlink\" title=\"自动合成\"></a>自动合成</h4><blockquote>\n<p>定义一个@property，在<em>编译</em>期间，编译器会<em>自动</em>生成<em>\b实例变量</em>、<em>getter方法</em>、<em>setter方法</em>，这些方法、变量是通过<em>自动合成</em>（<code>autosynthesize</code>）的方式生成并添加到类中。<br>实际上，一个类经过编译后，会生成变量列表<code>ivar_list</code>和\b方法列表<code>method_list</code>，每添加\b一个属性，在\b变量列表<code>ivar_list</code>会添加对应的<em>\b变量</em>，方法列表<code>method_list\b</code>会添加对应的<em>setter</em>方法和<em>getter</em>方法。</p>\n</blockquote>\n<p>\b对应的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@synthesize name = _name;</span><br></pre></td></tr></table></figure>\n\n<p>编译器自动生成，无需手动添加</p>\n<h4 id=\"动态合成\"><a href=\"#动态合成\" class=\"headerlink\" title=\"动态合成\"></a>动态合成</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@dynamic sex;</span><br></pre></td></tr></table></figure>\n\n<p>这样代码告诉编译器，sex属性的变量名、getter方法、setter方法由开发者自己来添加，编译器无需处理。</p>\n<p>\b<strong>特别注明：</strong></p>\n<blockquote>\n<p><code>getter方法中不能用self.,会造成死循环</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)name &#123;</span><br><span class=\"line\">    return self.name;  // 错误的写法，会造成死循环</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>self.name</code>实际上就是执行了属性name的getter方法，getter方法中又调用了<code>self.name</code>，会一直递归调用，直到程序崩溃</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.name = @&quot;aaa&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>这样的方式，setter方法会被调用。</p>\n<h3 id=\"property修饰符\"><a href=\"#property修饰符\" class=\"headerlink\" title=\"@property修饰符\"></a>@property修饰符</h3><p>修饰符有四种：</p>\n<blockquote>\n<ol>\n<li>原子性：<code>nonatomic</code>、<code>atomic</code>：不能绝对保证线程安全，会耗费一些性能，默认<code>nonatomic</code></li>\n<li>读写权限：<code>readwrite</code>、<code>readonly</code> 默认<code>readwrite</code></li>\n<li>内存管理：<code>assign</code>、<code>strong</code>、<code>weak</code>、<code>copy</code>、<code>unsafe_unretained</code></li>\n<li>set、get方法名</li>\n<li>可为空 nullable、nonnull</li>\n</ol>\n</blockquote>\n<h4 id=\"nonatomic非原子性-atomic原子性\"><a href=\"#nonatomic非原子性-atomic原子性\" class=\"headerlink\" title=\"nonatomic非原子性 atomic原子性\"></a>nonatomic非原子性 atomic原子性</h4><p>不写默认是<code>atomic</code>原子性</p>\n<p><em>区别</em>：系统自动生成的getter/setter方法不一样。</p>\n<p><code>atomic</code>的属性，系统生成的getter/setter会保证get、set操作的完整性，不受其他线程的影响。比如，线程 A 的 getter 方法运行到一半，线程 B 调用了 setter：那么线程 A 的 getter 还是能得到一个完好无损的对象。</p>\n<p><code>nonatomic</code>的属性，没有这个保证，<code>nonatomic</code>的速度要比<code>atomic</code>快</p>\n<p><code>atomic</code>并不能保证线程安全。如果线程 A 调了 getter，与此同时线程 B 、线程 C 都调了 setter——那最后线程 A get 到的值，3种都有可能：可能是 B、C set 之前原始的值，也可能是 B set 的值，也可能是 C set 的值。同时，最终这个属性的值，可能是 B set 的值，也有可能是 C set 的值。</p>\n<p><em>保证数据完整性——这个多线程编程的最大挑战之一</em></p>\n<h4 id=\"assign\"><a href=\"#assign\" class=\"headerlink\" title=\"assign\"></a>assign</h4><p><code>assion</code>用于非指针变量。基础数据类型（例如NSInteger）和C数据类型（int、float、double、char等），以及id类型。</p>\n<p>用于对基本数据类型进行复制操作，不更改引用计数。也可以用来修饰对象，但是\b，被<code>assign</code>修饰的对象在释放后，指针的地址还是存在的，也就是说指针并没有被置为nil，成为野指针。如果后续在分配到堆上的\b某块内存时，正好分到这块内存，程序就会crash。之说以可以修饰基本数据类型，因为基本数据类型一般分配到栈上，栈的内存会由系统自动处理，不会造成野指针。</p>\n<h4 id=\"weak\"><a href=\"#weak\" class=\"headerlink\" title=\"weak\"></a>weak</h4><p><code>weak</code>修饰Object类型，ARC下修饰delegate属性</p>\n<p>在ARC环境下，所有指向这个对象的weak指针都将被置为nil。<br>修饰Object类型，修饰的对象在释放后，指针\b地址会被置为nil，是\b\b一种弱\b</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"属性-property\"><a href=\"#属性-property\" class=\"headerlink\" title=\"属性 @property\"></a>属性 @property</h2><p>@property = 实例变量 + get方法 + set方法</p>\n<p>Example</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, copy) NSString *name;</span><br></pre></td></tr></table></figure>\n\n<p>属性name生成的setter方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setName:(NSString *)name;</span><br><span class=\"line\"></span><br><span class=\"line\">// rewrite setter</span><br><span class=\"line\">- (void)setName:(NSString *)name &#123;</span><br><span class=\"line\">    _name = name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>属性name生成的getter方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)name;</span><br><span class=\"line\"></span><br><span class=\"line\">// rewrite getter</span><br><span class=\"line\">- (NSString *)name &#123;</span><br><span class=\"line\">    return _name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自动合成\"><a href=\"#自动合成\" class=\"headerlink\" title=\"自动合成\"></a>自动合成</h4><blockquote>\n<p>定义一个@property，在<em>编译</em>期间，编译器会<em>自动</em>生成<em>\b实例变量</em>、<em>getter方法</em>、<em>setter方法</em>，这些方法、变量是通过<em>自动合成</em>（<code>autosynthesize</code>）的方式生成并添加到类中。<br>实际上，一个类经过编译后，会生成变量列表<code>ivar_list</code>和\b方法列表<code>method_list</code>，每添加\b一个属性，在\b变量列表<code>ivar_list</code>会添加对应的<em>\b变量</em>，方法列表<code>method_list\b</code>会添加对应的<em>setter</em>方法和<em>getter</em>方法。</p>\n</blockquote>\n<p>\b对应的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@synthesize name = _name;</span><br></pre></td></tr></table></figure>\n\n<p>编译器自动生成，无需手动添加</p>\n<h4 id=\"动态合成\"><a href=\"#动态合成\" class=\"headerlink\" title=\"动态合成\"></a>动态合成</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@dynamic sex;</span><br></pre></td></tr></table></figure>\n\n<p>这样代码告诉编译器，sex属性的变量名、getter方法、setter方法由开发者自己来添加，编译器无需处理。</p>\n<p>\b<strong>特别注明：</strong></p>\n<blockquote>\n<p><code>getter方法中不能用self.,会造成死循环</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)name &#123;</span><br><span class=\"line\">    return self.name;  // 错误的写法，会造成死循环</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>self.name</code>实际上就是执行了属性name的getter方法，getter方法中又调用了<code>self.name</code>，会一直递归调用，直到程序崩溃</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.name = @&quot;aaa&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>这样的方式，setter方法会被调用。</p>\n<h3 id=\"property修饰符\"><a href=\"#property修饰符\" class=\"headerlink\" title=\"@property修饰符\"></a>@property修饰符</h3><p>修饰符有四种：</p>\n<blockquote>\n<ol>\n<li>原子性：<code>nonatomic</code>、<code>atomic</code>：不能绝对保证线程安全，会耗费一些性能，默认<code>nonatomic</code></li>\n<li>读写权限：<code>readwrite</code>、<code>readonly</code> 默认<code>readwrite</code></li>\n<li>内存管理：<code>assign</code>、<code>strong</code>、<code>weak</code>、<code>copy</code>、<code>unsafe_unretained</code></li>\n<li>set、get方法名</li>\n<li>可为空 nullable、nonnull</li>\n</ol>\n</blockquote>\n<h4 id=\"nonatomic非原子性-atomic原子性\"><a href=\"#nonatomic非原子性-atomic原子性\" class=\"headerlink\" title=\"nonatomic非原子性 atomic原子性\"></a>nonatomic非原子性 atomic原子性</h4><p>不写默认是<code>atomic</code>原子性</p>\n<p><em>区别</em>：系统自动生成的getter/setter方法不一样。</p>\n<p><code>atomic</code>的属性，系统生成的getter/setter会保证get、set操作的完整性，不受其他线程的影响。比如，线程 A 的 getter 方法运行到一半，线程 B 调用了 setter：那么线程 A 的 getter 还是能得到一个完好无损的对象。</p>\n<p><code>nonatomic</code>的属性，没有这个保证，<code>nonatomic</code>的速度要比<code>atomic</code>快</p>\n<p><code>atomic</code>并不能保证线程安全。如果线程 A 调了 getter，与此同时线程 B 、线程 C 都调了 setter——那最后线程 A get 到的值，3种都有可能：可能是 B、C set 之前原始的值，也可能是 B set 的值，也可能是 C set 的值。同时，最终这个属性的值，可能是 B set 的值，也有可能是 C set 的值。</p>\n<p><em>保证数据完整性——这个多线程编程的最大挑战之一</em></p>\n<h4 id=\"assign\"><a href=\"#assign\" class=\"headerlink\" title=\"assign\"></a>assign</h4><p><code>assion</code>用于非指针变量。基础数据类型（例如NSInteger）和C数据类型（int、float、double、char等），以及id类型。</p>\n<p>用于对基本数据类型进行复制操作，不更改引用计数。也可以用来修饰对象，但是\b，被<code>assign</code>修饰的对象在释放后，指针的地址还是存在的，也就是说指针并没有被置为nil，成为野指针。如果后续在分配到堆上的\b某块内存时，正好分到这块内存，程序就会crash。之说以可以修饰基本数据类型，因为基本数据类型一般分配到栈上，栈的内存会由系统自动处理，不会造成野指针。</p>\n<h4 id=\"weak\"><a href=\"#weak\" class=\"headerlink\" title=\"weak\"></a>weak</h4><p><code>weak</code>修饰Object类型，ARC下修饰delegate属性</p>\n<p>在ARC环境下，所有指向这个对象的weak指针都将被置为nil。<br>修饰Object类型，修饰的对象在释放后，指针\b地址会被置为nil，是\b\b一种弱\b</p>\n"},{"title":"Mac命令","date":"2018-12-15T14:29:10.000Z","_content":"\n1、创建目录\n```\nmkdir dirname\n```\n\n2、创建文件\n```\ntouch name\n```","source":"_posts/iOS/Mac命令.md","raw":"---\ntitle: Mac命令\ndate: 2018-12-15 22:29:10\ntags:\ncategories: Mac\n---\n\n1、创建目录\n```\nmkdir dirname\n```\n\n2、创建文件\n```\ntouch name\n```","slug":"iOS/Mac命令","published":1,"updated":"2019-08-09T05:53:06.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp31000tib36ygxvnozi","content":"<p>1、创建目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir dirname</span><br></pre></td></tr></table></figure>\n\n<p>2、创建文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch name</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>1、创建目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir dirname</span><br></pre></td></tr></table></figure>\n\n<p>2、创建文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch name</span><br></pre></td></tr></table></figure>"},{"title":"Xcode自定义代码块","date":"2018-12-17T03:41:50.000Z","_content":"\n# Xcode自定义代码块\n\n### 创建\b代码块\n代码编辑区右击 -> Create Code Snippet\n\n### 删除代码块\n选中要删除的代码块，按键delete，确定Delete\n\n### \b参数规\b则\n```\n<#prarm#>\n```\n\n**Xcode自定义代码块位置**\n\n>~/Library/Developer/Xcode/UserData/CodeSnippets\n\n定义过的代码块，可拷贝到该目录下使用，或者在这个文件夹下建一个Git仓库，到哪都可以用。\n\nhttps://github.com/hutaol/XcodeCodeSnippet\n\n\n","source":"_posts/iOS/Xcode自定义代码块.md","raw":"---\ntitle: Xcode自定义代码块\ndate: 2018-12-17 11:41:50\ntags:\ncategories: Xcode\n---\n\n# Xcode自定义代码块\n\n### 创建\b代码块\n代码编辑区右击 -> Create Code Snippet\n\n### 删除代码块\n选中要删除的代码块，按键delete，确定Delete\n\n### \b参数规\b则\n```\n<#prarm#>\n```\n\n**Xcode自定义代码块位置**\n\n>~/Library/Developer/Xcode/UserData/CodeSnippets\n\n定义过的代码块，可拷贝到该目录下使用，或者在这个文件夹下建一个Git仓库，到哪都可以用。\n\nhttps://github.com/hutaol/XcodeCodeSnippet\n\n\n","slug":"iOS/Xcode自定义代码块","published":1,"updated":"2019-08-09T05:52:56.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp32000wib366fgcbx1d","content":"<h1 id=\"Xcode自定义代码块\"><a href=\"#Xcode自定义代码块\" class=\"headerlink\" title=\"Xcode自定义代码块\"></a>Xcode自定义代码块</h1><h3 id=\"创建代码块\"><a href=\"#创建代码块\" class=\"headerlink\" title=\"创建\b代码块\"></a>创建\b代码块</h3><p>代码编辑区右击 -&gt; Create Code Snippet</p>\n<h3 id=\"删除代码块\"><a href=\"#删除代码块\" class=\"headerlink\" title=\"删除代码块\"></a>删除代码块</h3><p>选中要删除的代码块，按键delete，确定Delete</p>\n<h3 id=\"参数规则\"><a href=\"#参数规则\" class=\"headerlink\" title=\"\b参数规\b则\"></a>\b参数规\b则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;#prarm#&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Xcode自定义代码块位置</strong></p>\n<blockquote>\n<p>~/Library/Developer/Xcode/UserData/CodeSnippets</p>\n</blockquote>\n<p>定义过的代码块，可拷贝到该目录下使用，或者在这个文件夹下建一个Git仓库，到哪都可以用。</p>\n<p><a href=\"https://github.com/hutaol/XcodeCodeSnippet\" target=\"_blank\" rel=\"noopener\">https://github.com/hutaol/XcodeCodeSnippet</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Xcode自定义代码块\"><a href=\"#Xcode自定义代码块\" class=\"headerlink\" title=\"Xcode自定义代码块\"></a>Xcode自定义代码块</h1><h3 id=\"创建代码块\"><a href=\"#创建代码块\" class=\"headerlink\" title=\"创建\b代码块\"></a>创建\b代码块</h3><p>代码编辑区右击 -&gt; Create Code Snippet</p>\n<h3 id=\"删除代码块\"><a href=\"#删除代码块\" class=\"headerlink\" title=\"删除代码块\"></a>删除代码块</h3><p>选中要删除的代码块，按键delete，确定Delete</p>\n<h3 id=\"参数规则\"><a href=\"#参数规则\" class=\"headerlink\" title=\"\b参数规\b则\"></a>\b参数规\b则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;#prarm#&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Xcode自定义代码块位置</strong></p>\n<blockquote>\n<p>~/Library/Developer/Xcode/UserData/CodeSnippets</p>\n</blockquote>\n<p>定义过的代码块，可拷贝到该目录下使用，或者在这个文件夹下建一个Git仓库，到哪都可以用。</p>\n<p><a href=\"https://github.com/hutaol/XcodeCodeSnippet\" target=\"_blank\" rel=\"noopener\">https://github.com/hutaol/XcodeCodeSnippet</a></p>\n"},{"title":"Xcode工具","date":"2018-12-16T14:12:51.000Z","_content":"\n1.查找未使用的Objective-C导入。 \n\n####[fui](https://github.com/dblock/fui)\n\n```\ngem install fui  // 安装\n\nfui help  // 帮助\n\nfui find  // 在当前目录中查找未使用的类\n```\n\n\n","source":"_posts/iOS/Xcode工具.md","raw":"---\ntitle: Xcode工具\ndate: 2018-12-16 22:12:51\ntags:\ncategories: Xcode\n---\n\n1.查找未使用的Objective-C导入。 \n\n####[fui](https://github.com/dblock/fui)\n\n```\ngem install fui  // 安装\n\nfui help  // 帮助\n\nfui find  // 在当前目录中查找未使用的类\n```\n\n\n","slug":"iOS/Xcode工具","published":1,"updated":"2019-08-09T05:52:56.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp33000xib36r7a877t8","content":"<p>1.查找未使用的Objective-C导入。 </p>\n<p>####<a href=\"https://github.com/dblock/fui\" target=\"_blank\" rel=\"noopener\">fui</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install fui  // 安装</span><br><span class=\"line\"></span><br><span class=\"line\">fui help  // 帮助</span><br><span class=\"line\"></span><br><span class=\"line\">fui find  // 在当前目录中查找未使用的类</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>1.查找未使用的Objective-C导入。 </p>\n<p>####<a href=\"https://github.com/dblock/fui\" target=\"_blank\" rel=\"noopener\">fui</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install fui  // 安装</span><br><span class=\"line\"></span><br><span class=\"line\">fui help  // 帮助</span><br><span class=\"line\"></span><br><span class=\"line\">fui find  // 在当前目录中查找未使用的类</span><br></pre></td></tr></table></figure>\n\n"},{"title":"iOS持久化方式","date":"2018-12-16T14:34:06.000Z","_content":"\n### iOS持久化方式\n\n>1.NSUserDefaults\n>2.NSKeyedArchiver\n>3.沙盒Document\n>4.sqlite3\n>5.KeyChain\n\n持久化分为两类：沙盒内和沙盒外。\n\n#### 一、沙盒目录结构和各个目录的路径获取方法\n\n>**AppName.app**:  应用程序包目录\n\n>**Documents**：存储用户数据，您应该将所有的应用程序数据文件写入到这个目录下。该路径可通过配置实现iTunes共享文件。会被iTunes同步。\n\n>**Library**：有两个子目录Preferences和Caches，除Caches以外，都会被iTunes备份。\n>>**Preferences**：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好。结果在目录下面以plist的方式存储\n>>**Caches**：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息。可创建子文件夹。可以用来放置您希望被备份但不希望被用户看到的数据。\n\n>**SystemData**：系统数据\n\n>**tmp**：用来存放应用再次启动时不需要的临时文件，该目录下的东西随时可能被系统清理掉，不会被iTunes同步。\n\n##### 沙盒主目录\n```\nNSString *homeDir = NSHomeDirectory();\n```\n\n##### Documents目录\n```\nNSString *documentsDir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];\n```\n\n##### Library目录\n```\n// 获取Library的目录路径\nNSString *libraryDir = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) firstObject];\n\n// 获取Caches目录路径\nNSString *cachesDir = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject];\n```\n\n##### tmp目录\n```\nNSString *tmpDir =  NSTemporaryDirectory();\n```\n\n##### AppBundle目录路径\n```\n// 获取AppBundle目录路径\nNSLog(@\"%@\",[[NSBundle mainBundle] bundlePath]);\n \nNSString *imagePath = [[NSBundle mainBundle] pathForResource:@\"apple\" ofType:@\"png\"];\n \nUIImage *appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];\n```\n\n#### 二、沙盒内的持久化方式\n**NSKeyedArchiver** 归档\n\n\n\n\n\n\n\n\n","source":"_posts/iOS/iOS持久化方式.md","raw":"---\ntitle: iOS持久化方式\ndate: 2018-12-16 22:34:06\ntags:\ncategories: iOS\n---\n\n### iOS持久化方式\n\n>1.NSUserDefaults\n>2.NSKeyedArchiver\n>3.沙盒Document\n>4.sqlite3\n>5.KeyChain\n\n持久化分为两类：沙盒内和沙盒外。\n\n#### 一、沙盒目录结构和各个目录的路径获取方法\n\n>**AppName.app**:  应用程序包目录\n\n>**Documents**：存储用户数据，您应该将所有的应用程序数据文件写入到这个目录下。该路径可通过配置实现iTunes共享文件。会被iTunes同步。\n\n>**Library**：有两个子目录Preferences和Caches，除Caches以外，都会被iTunes备份。\n>>**Preferences**：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好。结果在目录下面以plist的方式存储\n>>**Caches**：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息。可创建子文件夹。可以用来放置您希望被备份但不希望被用户看到的数据。\n\n>**SystemData**：系统数据\n\n>**tmp**：用来存放应用再次启动时不需要的临时文件，该目录下的东西随时可能被系统清理掉，不会被iTunes同步。\n\n##### 沙盒主目录\n```\nNSString *homeDir = NSHomeDirectory();\n```\n\n##### Documents目录\n```\nNSString *documentsDir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];\n```\n\n##### Library目录\n```\n// 获取Library的目录路径\nNSString *libraryDir = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) firstObject];\n\n// 获取Caches目录路径\nNSString *cachesDir = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject];\n```\n\n##### tmp目录\n```\nNSString *tmpDir =  NSTemporaryDirectory();\n```\n\n##### AppBundle目录路径\n```\n// 获取AppBundle目录路径\nNSLog(@\"%@\",[[NSBundle mainBundle] bundlePath]);\n \nNSString *imagePath = [[NSBundle mainBundle] pathForResource:@\"apple\" ofType:@\"png\"];\n \nUIImage *appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];\n```\n\n#### 二、沙盒内的持久化方式\n**NSKeyedArchiver** 归档\n\n\n\n\n\n\n\n\n","slug":"iOS/iOS持久化方式","published":1,"updated":"2019-08-09T05:52:23.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp340010ib36p91mpe65","content":"<h3 id=\"iOS持久化方式\"><a href=\"#iOS持久化方式\" class=\"headerlink\" title=\"iOS持久化方式\"></a>iOS持久化方式</h3><blockquote>\n<p>1.NSUserDefaults<br>2.NSKeyedArchiver<br>3.沙盒Document<br>4.sqlite3<br>5.KeyChain</p>\n</blockquote>\n<p>持久化分为两类：沙盒内和沙盒外。</p>\n<h4 id=\"一、沙盒目录结构和各个目录的路径获取方法\"><a href=\"#一、沙盒目录结构和各个目录的路径获取方法\" class=\"headerlink\" title=\"一、沙盒目录结构和各个目录的路径获取方法\"></a>一、沙盒目录结构和各个目录的路径获取方法</h4><blockquote>\n<p><strong>AppName.app</strong>:  应用程序包目录</p>\n</blockquote>\n<blockquote>\n<p><strong>Documents</strong>：存储用户数据，您应该将所有的应用程序数据文件写入到这个目录下。该路径可通过配置实现iTunes共享文件。会被iTunes同步。</p>\n</blockquote>\n<blockquote>\n<p><strong>Library</strong>：有两个子目录Preferences和Caches，除Caches以外，都会被iTunes备份。</p>\n<blockquote>\n<p><strong>Preferences</strong>：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好。结果在目录下面以plist的方式存储<br><strong>Caches</strong>：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息。可创建子文件夹。可以用来放置您希望被备份但不希望被用户看到的数据。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p><strong>SystemData</strong>：系统数据</p>\n</blockquote>\n<blockquote>\n<p><strong>tmp</strong>：用来存放应用再次启动时不需要的临时文件，该目录下的东西随时可能被系统清理掉，不会被iTunes同步。</p>\n</blockquote>\n<h5 id=\"沙盒主目录\"><a href=\"#沙盒主目录\" class=\"headerlink\" title=\"沙盒主目录\"></a>沙盒主目录</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *homeDir = NSHomeDirectory();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Documents目录\"><a href=\"#Documents目录\" class=\"headerlink\" title=\"Documents目录\"></a>Documents目录</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *documentsDir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Library目录\"><a href=\"#Library目录\" class=\"headerlink\" title=\"Library目录\"></a>Library目录</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取Library的目录路径</span><br><span class=\"line\">NSString *libraryDir = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) firstObject];</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取Caches目录路径</span><br><span class=\"line\">NSString *cachesDir = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject];</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"tmp目录\"><a href=\"#tmp目录\" class=\"headerlink\" title=\"tmp目录\"></a>tmp目录</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *tmpDir =  NSTemporaryDirectory();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AppBundle目录路径\"><a href=\"#AppBundle目录路径\" class=\"headerlink\" title=\"AppBundle目录路径\"></a>AppBundle目录路径</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取AppBundle目录路径</span><br><span class=\"line\">NSLog(@&quot;%@&quot;,[[NSBundle mainBundle] bundlePath]);</span><br><span class=\"line\"> </span><br><span class=\"line\">NSString *imagePath = [[NSBundle mainBundle] pathForResource:@&quot;apple&quot; ofType:@&quot;png&quot;];</span><br><span class=\"line\"> </span><br><span class=\"line\">UIImage *appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二、沙盒内的持久化方式\"><a href=\"#二、沙盒内的持久化方式\" class=\"headerlink\" title=\"二、沙盒内的持久化方式\"></a>二、沙盒内的持久化方式</h4><p><strong>NSKeyedArchiver</strong> 归档</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"iOS持久化方式\"><a href=\"#iOS持久化方式\" class=\"headerlink\" title=\"iOS持久化方式\"></a>iOS持久化方式</h3><blockquote>\n<p>1.NSUserDefaults<br>2.NSKeyedArchiver<br>3.沙盒Document<br>4.sqlite3<br>5.KeyChain</p>\n</blockquote>\n<p>持久化分为两类：沙盒内和沙盒外。</p>\n<h4 id=\"一、沙盒目录结构和各个目录的路径获取方法\"><a href=\"#一、沙盒目录结构和各个目录的路径获取方法\" class=\"headerlink\" title=\"一、沙盒目录结构和各个目录的路径获取方法\"></a>一、沙盒目录结构和各个目录的路径获取方法</h4><blockquote>\n<p><strong>AppName.app</strong>:  应用程序包目录</p>\n</blockquote>\n<blockquote>\n<p><strong>Documents</strong>：存储用户数据，您应该将所有的应用程序数据文件写入到这个目录下。该路径可通过配置实现iTunes共享文件。会被iTunes同步。</p>\n</blockquote>\n<blockquote>\n<p><strong>Library</strong>：有两个子目录Preferences和Caches，除Caches以外，都会被iTunes备份。</p>\n<blockquote>\n<p><strong>Preferences</strong>：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好。结果在目录下面以plist的方式存储<br><strong>Caches</strong>：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息。可创建子文件夹。可以用来放置您希望被备份但不希望被用户看到的数据。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p><strong>SystemData</strong>：系统数据</p>\n</blockquote>\n<blockquote>\n<p><strong>tmp</strong>：用来存放应用再次启动时不需要的临时文件，该目录下的东西随时可能被系统清理掉，不会被iTunes同步。</p>\n</blockquote>\n<h5 id=\"沙盒主目录\"><a href=\"#沙盒主目录\" class=\"headerlink\" title=\"沙盒主目录\"></a>沙盒主目录</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *homeDir = NSHomeDirectory();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Documents目录\"><a href=\"#Documents目录\" class=\"headerlink\" title=\"Documents目录\"></a>Documents目录</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *documentsDir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Library目录\"><a href=\"#Library目录\" class=\"headerlink\" title=\"Library目录\"></a>Library目录</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取Library的目录路径</span><br><span class=\"line\">NSString *libraryDir = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) firstObject];</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取Caches目录路径</span><br><span class=\"line\">NSString *cachesDir = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject];</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"tmp目录\"><a href=\"#tmp目录\" class=\"headerlink\" title=\"tmp目录\"></a>tmp目录</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *tmpDir =  NSTemporaryDirectory();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AppBundle目录路径\"><a href=\"#AppBundle目录路径\" class=\"headerlink\" title=\"AppBundle目录路径\"></a>AppBundle目录路径</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取AppBundle目录路径</span><br><span class=\"line\">NSLog(@&quot;%@&quot;,[[NSBundle mainBundle] bundlePath]);</span><br><span class=\"line\"> </span><br><span class=\"line\">NSString *imagePath = [[NSBundle mainBundle] pathForResource:@&quot;apple&quot; ofType:@&quot;png&quot;];</span><br><span class=\"line\"> </span><br><span class=\"line\">UIImage *appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二、沙盒内的持久化方式\"><a href=\"#二、沙盒内的持久化方式\" class=\"headerlink\" title=\"二、沙盒内的持久化方式\"></a>二、沙盒内的持久化方式</h4><p><strong>NSKeyedArchiver</strong> 归档</p>\n"},{"title":"解决GitHub下载速度缓慢","date":"2019-07-02T08:36:12.000Z","_content":"\n# 一、修改本机的Hosts\n\n1. Hosts文件的路径:\n\n```path\n// Windows\n\nC:\\Windows\\System32\\drivers\\etc\n\n// Mac\nsudo vim /etc/hosts\n```\n\n2. 追加域名的IP地址\n \n可以利用`https://www.ipaddress.com/`获得以下两个GitHub域名的IP地址\n\n`github.com`  \n\n`github.global.ssl.fastly.net`\n\n```n\n192.30.253.112 github.com\n151.101.185.194 github.global.ssl.fastly.net\n```\n\n\n","source":"_posts/other/解决GitHub下载速度缓慢.md","raw":"---\ntitle: 解决GitHub下载速度缓慢\ndate: 2019-07-02 16:36:12\ntags:\ncategories: Other\n---\n\n# 一、修改本机的Hosts\n\n1. Hosts文件的路径:\n\n```path\n// Windows\n\nC:\\Windows\\System32\\drivers\\etc\n\n// Mac\nsudo vim /etc/hosts\n```\n\n2. 追加域名的IP地址\n \n可以利用`https://www.ipaddress.com/`获得以下两个GitHub域名的IP地址\n\n`github.com`  \n\n`github.global.ssl.fastly.net`\n\n```n\n192.30.253.112 github.com\n151.101.185.194 github.global.ssl.fastly.net\n```\n\n\n","slug":"other/解决GitHub下载速度缓慢","published":1,"updated":"2019-07-08T06:06:28.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp340011ib36j883qm01","content":"<h1 id=\"一、修改本机的Hosts\"><a href=\"#一、修改本机的Hosts\" class=\"headerlink\" title=\"一、修改本机的Hosts\"></a>一、修改本机的Hosts</h1><ol>\n<li>Hosts文件的路径:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Windows</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\Windows\\System32\\drivers\\etc</span><br><span class=\"line\"></span><br><span class=\"line\">// Mac</span><br><span class=\"line\">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>追加域名的IP地址</li>\n</ol>\n<p>可以利用<code>https://www.ipaddress.com/</code>获得以下两个GitHub域名的IP地址</p>\n<p><code>github.com</code>  </p>\n<p><code>github.global.ssl.fastly.net</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.30.253.112 github.com</span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、修改本机的Hosts\"><a href=\"#一、修改本机的Hosts\" class=\"headerlink\" title=\"一、修改本机的Hosts\"></a>一、修改本机的Hosts</h1><ol>\n<li>Hosts文件的路径:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Windows</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\Windows\\System32\\drivers\\etc</span><br><span class=\"line\"></span><br><span class=\"line\">// Mac</span><br><span class=\"line\">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>追加域名的IP地址</li>\n</ol>\n<p>可以利用<code>https://www.ipaddress.com/</code>获得以下两个GitHub域名的IP地址</p>\n<p><code>github.com</code>  </p>\n<p><code>github.global.ssl.fastly.net</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.30.253.112 github.com</span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>\n\n"},{"title":"PHP管理工具Composer","date":"2019-06-19T03:42:44.000Z","_content":"\n# Composer\n\n## 全局安装\n\n```php\ncurl -sS https://getcomposer.org/installer | php\n\nmv composer.phar /usr/local/bin/composer\n```\n\n# Composer 国内镜像\n\n全局配置\n\n```php\ncomposer config -g repo.packagist composer https://packagist.phpcomposer.com\n\n```\n\n解除镜像并恢复到packagist官方源\n\n```php\ncomposer config -g --unset repos.packagist\n```\n\n*参考*：http://www.yanchat.com/75.html","source":"_posts/php/PHP管理工具Composer.md","raw":"---\ntitle: PHP管理工具Composer\ndate: 2019-06-19 11:42:44\ntags:\ncategories:\n---\n\n# Composer\n\n## 全局安装\n\n```php\ncurl -sS https://getcomposer.org/installer | php\n\nmv composer.phar /usr/local/bin/composer\n```\n\n# Composer 国内镜像\n\n全局配置\n\n```php\ncomposer config -g repo.packagist composer https://packagist.phpcomposer.com\n\n```\n\n解除镜像并恢复到packagist官方源\n\n```php\ncomposer config -g --unset repos.packagist\n```\n\n*参考*：http://www.yanchat.com/75.html","slug":"php/PHP管理工具Composer","published":1,"updated":"2019-07-08T06:06:28.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp350014ib36ob6ifv4x","content":"<h1 id=\"Composer\"><a href=\"#Composer\" class=\"headerlink\" title=\"Composer\"></a>Composer</h1><h2 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sS https:<span class=\"comment\">//getcomposer.org/installer | php</span></span><br><span class=\"line\"></span><br><span class=\"line\">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Composer-国内镜像\"><a href=\"#Composer-国内镜像\" class=\"headerlink\" title=\"Composer 国内镜像\"></a>Composer 国内镜像</h1><p>全局配置</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g repo.packagist composer https:<span class=\"comment\">//packagist.phpcomposer.com</span></span><br></pre></td></tr></table></figure>\n\n<p>解除镜像并恢复到packagist官方源</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g --<span class=\"keyword\">unset</span> repos.packagist</span><br></pre></td></tr></table></figure>\n\n<p><em>参考</em>：<a href=\"http://www.yanchat.com/75.html\" target=\"_blank\" rel=\"noopener\">http://www.yanchat.com/75.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Composer\"><a href=\"#Composer\" class=\"headerlink\" title=\"Composer\"></a>Composer</h1><h2 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sS https:<span class=\"comment\">//getcomposer.org/installer | php</span></span><br><span class=\"line\"></span><br><span class=\"line\">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Composer-国内镜像\"><a href=\"#Composer-国内镜像\" class=\"headerlink\" title=\"Composer 国内镜像\"></a>Composer 国内镜像</h1><p>全局配置</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g repo.packagist composer https:<span class=\"comment\">//packagist.phpcomposer.com</span></span><br></pre></td></tr></table></figure>\n\n<p>解除镜像并恢复到packagist官方源</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g --<span class=\"keyword\">unset</span> repos.packagist</span><br></pre></td></tr></table></figure>\n\n<p><em>参考</em>：<a href=\"http://www.yanchat.com/75.html\" target=\"_blank\" rel=\"noopener\">http://www.yanchat.com/75.html</a></p>\n"},{"title":"Mac工具","date":"2019-07-02T08:10:10.000Z","_content":"\n# Mac 必备工具\n\n## Homebrew 包管理工具\n\n安装/卸载/更新各种软件包，如：nodejs, elasticsearch, kibana, mysql, mongodb 等等，快速搭建各种本地环境，程序员必备工具\n\n### 安装 brew\n\n```u\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### 基本用法\n\n以 nodejs 为例，安装目录在 /usr/local/Cellar\n\n```brew\n// 安装 nodejs\nbrew install nodejs\n\n// 更新\nbrew upgrade nodejs\n\n// 卸载\nbrew remove nodejs\n\n// 列出当前安装的软件\nbrew list\n\n// 查询与 nodejs 相关的可用软件\nbrew search nodejs\n\n// 查询 nodejs 的安装信息\nbrew info nodejs\n```\n\n**注：** 如果需要指定版本，可以在`brew search`查看有没有需要的版本，在`@`后面指定版本号，例如`brew install thrift@0.9`\n\n## npm nodejs的包管理器\n\n用于node插件管理（包括安装、卸载、管理依赖等）, NPM是随同NodeJS一起安装的包管理工具\n\n安装npm 或者直接安装nodejs\n\n```brew\nbrew install npm\n```\n\nnodejs官网链接下载安装 https://nodejs.org/\n\n","source":"_posts/tools/Mac工具.md","raw":"---\ntitle: Mac工具\ndate: 2019-07-02 16:10:10\ntags:\ncategories: Mac\n---\n\n# Mac 必备工具\n\n## Homebrew 包管理工具\n\n安装/卸载/更新各种软件包，如：nodejs, elasticsearch, kibana, mysql, mongodb 等等，快速搭建各种本地环境，程序员必备工具\n\n### 安装 brew\n\n```u\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### 基本用法\n\n以 nodejs 为例，安装目录在 /usr/local/Cellar\n\n```brew\n// 安装 nodejs\nbrew install nodejs\n\n// 更新\nbrew upgrade nodejs\n\n// 卸载\nbrew remove nodejs\n\n// 列出当前安装的软件\nbrew list\n\n// 查询与 nodejs 相关的可用软件\nbrew search nodejs\n\n// 查询 nodejs 的安装信息\nbrew info nodejs\n```\n\n**注：** 如果需要指定版本，可以在`brew search`查看有没有需要的版本，在`@`后面指定版本号，例如`brew install thrift@0.9`\n\n## npm nodejs的包管理器\n\n用于node插件管理（包括安装、卸载、管理依赖等）, NPM是随同NodeJS一起安装的包管理工具\n\n安装npm 或者直接安装nodejs\n\n```brew\nbrew install npm\n```\n\nnodejs官网链接下载安装 https://nodejs.org/\n\n","slug":"tools/Mac工具","published":1,"updated":"2019-07-08T06:06:28.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp360015ib36rfowsnbf","content":"<h1 id=\"Mac-必备工具\"><a href=\"#Mac-必备工具\" class=\"headerlink\" title=\"Mac 必备工具\"></a>Mac 必备工具</h1><h2 id=\"Homebrew-包管理工具\"><a href=\"#Homebrew-包管理工具\" class=\"headerlink\" title=\"Homebrew 包管理工具\"></a>Homebrew 包管理工具</h2><p>安装/卸载/更新各种软件包，如：nodejs, elasticsearch, kibana, mysql, mongodb 等等，快速搭建各种本地环境，程序员必备工具</p>\n<h3 id=\"安装-brew\"><a href=\"#安装-brew\" class=\"headerlink\" title=\"安装 brew\"></a>安装 brew</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>以 nodejs 为例，安装目录在 /usr/local/Cellar</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装 nodejs</span><br><span class=\"line\">brew install nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 更新</span><br><span class=\"line\">brew upgrade nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 卸载</span><br><span class=\"line\">brew remove nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 列出当前安装的软件</span><br><span class=\"line\">brew list</span><br><span class=\"line\"></span><br><span class=\"line\">// 查询与 nodejs 相关的可用软件</span><br><span class=\"line\">brew search nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 查询 nodejs 的安装信息</span><br><span class=\"line\">brew info nodejs</span><br></pre></td></tr></table></figure>\n\n<p><strong>注：</strong> 如果需要指定版本，可以在<code>brew search</code>查看有没有需要的版本，在<code>@</code>后面指定版本号，例如<code>brew install thrift@0.9</code></p>\n<h2 id=\"npm-nodejs的包管理器\"><a href=\"#npm-nodejs的包管理器\" class=\"headerlink\" title=\"npm nodejs的包管理器\"></a>npm nodejs的包管理器</h2><p>用于node插件管理（包括安装、卸载、管理依赖等）, NPM是随同NodeJS一起安装的包管理工具</p>\n<p>安装npm 或者直接安装nodejs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install npm</span><br></pre></td></tr></table></figure>\n\n<p>nodejs官网链接下载安装 <a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mac-必备工具\"><a href=\"#Mac-必备工具\" class=\"headerlink\" title=\"Mac 必备工具\"></a>Mac 必备工具</h1><h2 id=\"Homebrew-包管理工具\"><a href=\"#Homebrew-包管理工具\" class=\"headerlink\" title=\"Homebrew 包管理工具\"></a>Homebrew 包管理工具</h2><p>安装/卸载/更新各种软件包，如：nodejs, elasticsearch, kibana, mysql, mongodb 等等，快速搭建各种本地环境，程序员必备工具</p>\n<h3 id=\"安装-brew\"><a href=\"#安装-brew\" class=\"headerlink\" title=\"安装 brew\"></a>安装 brew</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>以 nodejs 为例，安装目录在 /usr/local/Cellar</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装 nodejs</span><br><span class=\"line\">brew install nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 更新</span><br><span class=\"line\">brew upgrade nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 卸载</span><br><span class=\"line\">brew remove nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 列出当前安装的软件</span><br><span class=\"line\">brew list</span><br><span class=\"line\"></span><br><span class=\"line\">// 查询与 nodejs 相关的可用软件</span><br><span class=\"line\">brew search nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 查询 nodejs 的安装信息</span><br><span class=\"line\">brew info nodejs</span><br></pre></td></tr></table></figure>\n\n<p><strong>注：</strong> 如果需要指定版本，可以在<code>brew search</code>查看有没有需要的版本，在<code>@</code>后面指定版本号，例如<code>brew install thrift@0.9</code></p>\n<h2 id=\"npm-nodejs的包管理器\"><a href=\"#npm-nodejs的包管理器\" class=\"headerlink\" title=\"npm nodejs的包管理器\"></a>npm nodejs的包管理器</h2><p>用于node插件管理（包括安装、卸载、管理依赖等）, NPM是随同NodeJS一起安装的包管理工具</p>\n<p>安装npm 或者直接安装nodejs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install npm</span><br></pre></td></tr></table></figure>\n\n<p>nodejs官网链接下载安装 <a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/</a></p>\n"},{"title":"CentOS6安装Python3.6环境","date":"2019-08-09T03:07:50.000Z","_content":"\n# CentOS6.5安装python3.6.9\n\nCentOS6安装python3.7，会出现问题：pip is configured with locations that require TLS/SSL\n\n系统版本centos6.5，其中openssl的版本为OpenSSL 1.0.1e-fips 11 Feb 2013,而python3.7需要的openssl的版本为1.0.2或者1.1.x,需要对openssl进行升级，并重新编译python3.7.0。yum 安装的openssl 版本都比较低。\n\n解决办法可参考地址：https://www.cnblogs.com/khstudy/p/11102633.html\n嫌麻烦，安装python3.6.9\n\n## 1、安装Python前的库环境\n\n```shell\nyum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel -y\nyum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel readline-devel.x86_64 -y\n```\n\n## 2、下载Python源码包\n\n```shell\nwget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz\n\n// wget: command not found 安装wget\nyum -y install wget\n```\n\n## 3、 安装Python\n\n```shell\ntar zxvf Python-3.6.9.tgz\ncd Python-3.6.9\n./configure --prefix=/usr/local/python3\nmake && make install\n```\n\n## 4、设置软连接\n\n```shell\nln -s /usr/local/python3/bin/python3.6 /usr/local/bin/python3\nln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3\n```\n\n## 5、查看python3版本以及pip3版本\n\n```shell\npython3\nexit() // 退出python\npip3 -V\n```\n\n## 6、更新pip3版本\n\n```shell\npip3 install --upgrade pip\n```\n\n**注意**：Centos系统中自带Python2，不过没有安装pip `centos -bash: pip: command not found\n`\n\n```shell\n// 安装EPEL\nyum -y install epel-release\n// 启用EPEL\nyum install -y yum-utils && yum-config-manager --enable epel\n// 安装pip\nyum install -y python-pip\n// 更新\npip install --upgrade pip\n```\n\n\n\n\n# 卸载python3\n\n```shell\nrpm -qa|grep python3|xargs rpm -ev --allmatches --nodeps       // 卸载pyhton3\nwhereis python3 |xargs rm -frv           // 删除所有残余文件\nwhereis   python       // 查看现有安装的python\n```\n\n# 安装Django\n\n```shell\npip3 install django\n\n// 给Django设置软连接\nln -s /usr/local/python3/bin/django-admin /usr/local/bin/django-admin\n```\n\n// 出现错误：SQLite 3.8.3 or later is required\n解决方法1：给django降级\n\n```shell\n卸载django:   pip3 uninstall django\n安装低版本：   pip3 install django==2.1.8\n```\n\n解决方法2：升级SQLite\n\n```shell\n// 查看版本\nsqlite3 --version\n```\n\n还是嫌麻烦选择降级，降级后又出现错误：`django.db.utils.NotSupportedError: URIs not supported`\n\n。。。。。。还是老老实实升级吧\n\n参考地址：https://blog.csdn.net/qq_39969226/article/details/92218635\n\n\n# 安装git\n\n```shell\nyum install git -y\n```\n\n# 安装MySQL\n\n## 1、查看是否安装了MySQL\n\n```shell\nrpm -qa | grep mysql\n```\n\n## 2、删除原来的数据库\n\n```shell\nrpm -e   mysql; // 一般删除，如果提示依赖的其他文件，则不能删除\nrpm -e  --nodeps mysql; // 强力删除，如果有其他依赖文件，则可以对其进行强力删除\n```\n\n## 3、mysql安装\n\n```shell\n// 将mysql,mysql-server,mysql-devel都安装好\nyum install -y mysql-server mysql mysql-devel\n```\n\n## 4、数据库安装成功之后，查看mysql-server的命令\n\n```shell\nrpm  -qi mysql-server\n```\n\n## 5、启动mysql服务\n\n```shell\nservice mysqld start\n```\n\n## MySql相关命令\n\n```shell\n// 查看mysql数据库服务是否设置成开机自己启动\nchkconfig --list  | grep mysqld\n\n// 设置mysql数据库服务开机自动启动\nchkconfig  mysqld on\n\n// 给root账号设置密码为 root\nmysqladmin -u root  password 'root';\n\n// 登录数据库\nmysql -u root -p\n\n```\n\n## CentOS6 部署Django+Nginx+uwsgi\n\n\n参考：https://www.cnblogs.com/Black-rainbow/articles/9455927.html\n     https://www.cnblogs.com/khstudy/p/11102633.html","source":"_posts/python/CentOS6安装Python3环境.md","raw":"---\ntitle: CentOS6安装Python3.6环境\ndate: 2019-08-09 11:07:50\ntags:\ncategories: python\n---\n\n# CentOS6.5安装python3.6.9\n\nCentOS6安装python3.7，会出现问题：pip is configured with locations that require TLS/SSL\n\n系统版本centos6.5，其中openssl的版本为OpenSSL 1.0.1e-fips 11 Feb 2013,而python3.7需要的openssl的版本为1.0.2或者1.1.x,需要对openssl进行升级，并重新编译python3.7.0。yum 安装的openssl 版本都比较低。\n\n解决办法可参考地址：https://www.cnblogs.com/khstudy/p/11102633.html\n嫌麻烦，安装python3.6.9\n\n## 1、安装Python前的库环境\n\n```shell\nyum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel -y\nyum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel readline-devel.x86_64 -y\n```\n\n## 2、下载Python源码包\n\n```shell\nwget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz\n\n// wget: command not found 安装wget\nyum -y install wget\n```\n\n## 3、 安装Python\n\n```shell\ntar zxvf Python-3.6.9.tgz\ncd Python-3.6.9\n./configure --prefix=/usr/local/python3\nmake && make install\n```\n\n## 4、设置软连接\n\n```shell\nln -s /usr/local/python3/bin/python3.6 /usr/local/bin/python3\nln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3\n```\n\n## 5、查看python3版本以及pip3版本\n\n```shell\npython3\nexit() // 退出python\npip3 -V\n```\n\n## 6、更新pip3版本\n\n```shell\npip3 install --upgrade pip\n```\n\n**注意**：Centos系统中自带Python2，不过没有安装pip `centos -bash: pip: command not found\n`\n\n```shell\n// 安装EPEL\nyum -y install epel-release\n// 启用EPEL\nyum install -y yum-utils && yum-config-manager --enable epel\n// 安装pip\nyum install -y python-pip\n// 更新\npip install --upgrade pip\n```\n\n\n\n\n# 卸载python3\n\n```shell\nrpm -qa|grep python3|xargs rpm -ev --allmatches --nodeps       // 卸载pyhton3\nwhereis python3 |xargs rm -frv           // 删除所有残余文件\nwhereis   python       // 查看现有安装的python\n```\n\n# 安装Django\n\n```shell\npip3 install django\n\n// 给Django设置软连接\nln -s /usr/local/python3/bin/django-admin /usr/local/bin/django-admin\n```\n\n// 出现错误：SQLite 3.8.3 or later is required\n解决方法1：给django降级\n\n```shell\n卸载django:   pip3 uninstall django\n安装低版本：   pip3 install django==2.1.8\n```\n\n解决方法2：升级SQLite\n\n```shell\n// 查看版本\nsqlite3 --version\n```\n\n还是嫌麻烦选择降级，降级后又出现错误：`django.db.utils.NotSupportedError: URIs not supported`\n\n。。。。。。还是老老实实升级吧\n\n参考地址：https://blog.csdn.net/qq_39969226/article/details/92218635\n\n\n# 安装git\n\n```shell\nyum install git -y\n```\n\n# 安装MySQL\n\n## 1、查看是否安装了MySQL\n\n```shell\nrpm -qa | grep mysql\n```\n\n## 2、删除原来的数据库\n\n```shell\nrpm -e   mysql; // 一般删除，如果提示依赖的其他文件，则不能删除\nrpm -e  --nodeps mysql; // 强力删除，如果有其他依赖文件，则可以对其进行强力删除\n```\n\n## 3、mysql安装\n\n```shell\n// 将mysql,mysql-server,mysql-devel都安装好\nyum install -y mysql-server mysql mysql-devel\n```\n\n## 4、数据库安装成功之后，查看mysql-server的命令\n\n```shell\nrpm  -qi mysql-server\n```\n\n## 5、启动mysql服务\n\n```shell\nservice mysqld start\n```\n\n## MySql相关命令\n\n```shell\n// 查看mysql数据库服务是否设置成开机自己启动\nchkconfig --list  | grep mysqld\n\n// 设置mysql数据库服务开机自动启动\nchkconfig  mysqld on\n\n// 给root账号设置密码为 root\nmysqladmin -u root  password 'root';\n\n// 登录数据库\nmysql -u root -p\n\n```\n\n## CentOS6 部署Django+Nginx+uwsgi\n\n\n参考：https://www.cnblogs.com/Black-rainbow/articles/9455927.html\n     https://www.cnblogs.com/khstudy/p/11102633.html","slug":"python/CentOS6安装Python3环境","published":1,"updated":"2019-08-12T07:58:59.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp370018ib36orpjbjo3","content":"<h1 id=\"CentOS6-5安装python3-6-9\"><a href=\"#CentOS6-5安装python3-6-9\" class=\"headerlink\" title=\"CentOS6.5安装python3.6.9\"></a>CentOS6.5安装python3.6.9</h1><p>CentOS6安装python3.7，会出现问题：pip is configured with locations that require TLS/SSL</p>\n<p>系统版本centos6.5，其中openssl的版本为OpenSSL 1.0.1e-fips 11 Feb 2013,而python3.7需要的openssl的版本为1.0.2或者1.1.x,需要对openssl进行升级，并重新编译python3.7.0。yum 安装的openssl 版本都比较低。</p>\n<p>解决办法可参考地址：<a href=\"https://www.cnblogs.com/khstudy/p/11102633.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/khstudy/p/11102633.html</a><br>嫌麻烦，安装python3.6.9</p>\n<h2 id=\"1、安装Python前的库环境\"><a href=\"#1、安装Python前的库环境\" class=\"headerlink\" title=\"1、安装Python前的库环境\"></a>1、安装Python前的库环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel -y</span><br><span class=\"line\">yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel readline-devel.x86_64 -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、下载Python源码包\"><a href=\"#2、下载Python源码包\" class=\"headerlink\" title=\"2、下载Python源码包\"></a>2、下载Python源码包</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz</span><br><span class=\"line\"></span><br><span class=\"line\">// wget: command not found 安装wget</span><br><span class=\"line\">yum -y install wget</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、-安装Python\"><a href=\"#3、-安装Python\" class=\"headerlink\" title=\"3、 安装Python\"></a>3、 安装Python</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf Python-3.6.9.tgz</span><br><span class=\"line\">cd Python-3.6.9</span><br><span class=\"line\">./configure --prefix=/usr/local/python3</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、设置软连接\"><a href=\"#4、设置软连接\" class=\"headerlink\" title=\"4、设置软连接\"></a>4、设置软连接</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/python3/bin/python3.6 /usr/local/bin/python3</span><br><span class=\"line\">ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、查看python3版本以及pip3版本\"><a href=\"#5、查看python3版本以及pip3版本\" class=\"headerlink\" title=\"5、查看python3版本以及pip3版本\"></a>5、查看python3版本以及pip3版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3</span><br><span class=\"line\">exit() // 退出python</span><br><span class=\"line\">pip3 -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、更新pip3版本\"><a href=\"#6、更新pip3版本\" class=\"headerlink\" title=\"6、更新pip3版本\"></a>6、更新pip3版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：Centos系统中自带Python2，不过没有安装pip <code>centos -bash: pip: command not found</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装EPEL</span><br><span class=\"line\">yum -y install epel-release</span><br><span class=\"line\">// 启用EPEL</span><br><span class=\"line\">yum install -y yum-utils &amp;&amp; yum-config-manager --enable epel</span><br><span class=\"line\">// 安装pip</span><br><span class=\"line\">yum install -y python-pip</span><br><span class=\"line\">// 更新</span><br><span class=\"line\">pip install --upgrade pip</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"卸载python3\"><a href=\"#卸载python3\" class=\"headerlink\" title=\"卸载python3\"></a>卸载python3</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa|grep python3|xargs rpm -ev --allmatches --nodeps       // 卸载pyhton3</span><br><span class=\"line\">whereis python3 |xargs rm -frv           // 删除所有残余文件</span><br><span class=\"line\">whereis   python       // 查看现有安装的python</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装Django\"><a href=\"#安装Django\" class=\"headerlink\" title=\"安装Django\"></a>安装Django</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install django</span><br><span class=\"line\"></span><br><span class=\"line\">// 给Django设置软连接</span><br><span class=\"line\">ln -s /usr/local/python3/bin/django-admin /usr/local/bin/django-admin</span><br></pre></td></tr></table></figure>\n\n<p>// 出现错误：SQLite 3.8.3 or later is required<br>解决方法1：给django降级</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">卸载django:   pip3 uninstall django</span><br><span class=\"line\">安装低版本：   pip3 install django==2.1.8</span><br></pre></td></tr></table></figure>\n\n<p>解决方法2：升级SQLite</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看版本</span><br><span class=\"line\">sqlite3 --version</span><br></pre></td></tr></table></figure>\n\n<p>还是嫌麻烦选择降级，降级后又出现错误：<code>django.db.utils.NotSupportedError: URIs not supported</code></p>\n<p>。。。。。。还是老老实实升级吧</p>\n<p>参考地址：<a href=\"https://blog.csdn.net/qq_39969226/article/details/92218635\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_39969226/article/details/92218635</a></p>\n<h1 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git -y</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h1><h2 id=\"1、查看是否安装了MySQL\"><a href=\"#1、查看是否安装了MySQL\" class=\"headerlink\" title=\"1、查看是否安装了MySQL\"></a>1、查看是否安装了MySQL</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、删除原来的数据库\"><a href=\"#2、删除原来的数据库\" class=\"headerlink\" title=\"2、删除原来的数据库\"></a>2、删除原来的数据库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -e   mysql; // 一般删除，如果提示依赖的其他文件，则不能删除</span><br><span class=\"line\">rpm -e  --nodeps mysql; // 强力删除，如果有其他依赖文件，则可以对其进行强力删除</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、mysql安装\"><a href=\"#3、mysql安装\" class=\"headerlink\" title=\"3、mysql安装\"></a>3、mysql安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将mysql,mysql-server,mysql-devel都安装好</span><br><span class=\"line\">yum install -y mysql-server mysql mysql-devel</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、数据库安装成功之后，查看mysql-server的命令\"><a href=\"#4、数据库安装成功之后，查看mysql-server的命令\" class=\"headerlink\" title=\"4、数据库安装成功之后，查看mysql-server的命令\"></a>4、数据库安装成功之后，查看mysql-server的命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm  -qi mysql-server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、启动mysql服务\"><a href=\"#5、启动mysql服务\" class=\"headerlink\" title=\"5、启动mysql服务\"></a>5、启动mysql服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MySql相关命令\"><a href=\"#MySql相关命令\" class=\"headerlink\" title=\"MySql相关命令\"></a>MySql相关命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看mysql数据库服务是否设置成开机自己启动</span><br><span class=\"line\">chkconfig --list  | grep mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置mysql数据库服务开机自动启动</span><br><span class=\"line\">chkconfig  mysqld on</span><br><span class=\"line\"></span><br><span class=\"line\">// 给root账号设置密码为 root</span><br><span class=\"line\">mysqladmin -u root  password 'root';</span><br><span class=\"line\"></span><br><span class=\"line\">// 登录数据库</span><br><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CentOS6-部署Django-Nginx-uwsgi\"><a href=\"#CentOS6-部署Django-Nginx-uwsgi\" class=\"headerlink\" title=\"CentOS6 部署Django+Nginx+uwsgi\"></a>CentOS6 部署Django+Nginx+uwsgi</h2><p>参考：<a href=\"https://www.cnblogs.com/Black-rainbow/articles/9455927.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Black-rainbow/articles/9455927.html</a><br>     <a href=\"https://www.cnblogs.com/khstudy/p/11102633.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/khstudy/p/11102633.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CentOS6-5安装python3-6-9\"><a href=\"#CentOS6-5安装python3-6-9\" class=\"headerlink\" title=\"CentOS6.5安装python3.6.9\"></a>CentOS6.5安装python3.6.9</h1><p>CentOS6安装python3.7，会出现问题：pip is configured with locations that require TLS/SSL</p>\n<p>系统版本centos6.5，其中openssl的版本为OpenSSL 1.0.1e-fips 11 Feb 2013,而python3.7需要的openssl的版本为1.0.2或者1.1.x,需要对openssl进行升级，并重新编译python3.7.0。yum 安装的openssl 版本都比较低。</p>\n<p>解决办法可参考地址：<a href=\"https://www.cnblogs.com/khstudy/p/11102633.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/khstudy/p/11102633.html</a><br>嫌麻烦，安装python3.6.9</p>\n<h2 id=\"1、安装Python前的库环境\"><a href=\"#1、安装Python前的库环境\" class=\"headerlink\" title=\"1、安装Python前的库环境\"></a>1、安装Python前的库环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel -y</span><br><span class=\"line\">yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel readline-devel.x86_64 -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、下载Python源码包\"><a href=\"#2、下载Python源码包\" class=\"headerlink\" title=\"2、下载Python源码包\"></a>2、下载Python源码包</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz</span><br><span class=\"line\"></span><br><span class=\"line\">// wget: command not found 安装wget</span><br><span class=\"line\">yum -y install wget</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、-安装Python\"><a href=\"#3、-安装Python\" class=\"headerlink\" title=\"3、 安装Python\"></a>3、 安装Python</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf Python-3.6.9.tgz</span><br><span class=\"line\">cd Python-3.6.9</span><br><span class=\"line\">./configure --prefix=/usr/local/python3</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、设置软连接\"><a href=\"#4、设置软连接\" class=\"headerlink\" title=\"4、设置软连接\"></a>4、设置软连接</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/python3/bin/python3.6 /usr/local/bin/python3</span><br><span class=\"line\">ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、查看python3版本以及pip3版本\"><a href=\"#5、查看python3版本以及pip3版本\" class=\"headerlink\" title=\"5、查看python3版本以及pip3版本\"></a>5、查看python3版本以及pip3版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3</span><br><span class=\"line\">exit() // 退出python</span><br><span class=\"line\">pip3 -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、更新pip3版本\"><a href=\"#6、更新pip3版本\" class=\"headerlink\" title=\"6、更新pip3版本\"></a>6、更新pip3版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：Centos系统中自带Python2，不过没有安装pip <code>centos -bash: pip: command not found</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装EPEL</span><br><span class=\"line\">yum -y install epel-release</span><br><span class=\"line\">// 启用EPEL</span><br><span class=\"line\">yum install -y yum-utils &amp;&amp; yum-config-manager --enable epel</span><br><span class=\"line\">// 安装pip</span><br><span class=\"line\">yum install -y python-pip</span><br><span class=\"line\">// 更新</span><br><span class=\"line\">pip install --upgrade pip</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"卸载python3\"><a href=\"#卸载python3\" class=\"headerlink\" title=\"卸载python3\"></a>卸载python3</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa|grep python3|xargs rpm -ev --allmatches --nodeps       // 卸载pyhton3</span><br><span class=\"line\">whereis python3 |xargs rm -frv           // 删除所有残余文件</span><br><span class=\"line\">whereis   python       // 查看现有安装的python</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装Django\"><a href=\"#安装Django\" class=\"headerlink\" title=\"安装Django\"></a>安装Django</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install django</span><br><span class=\"line\"></span><br><span class=\"line\">// 给Django设置软连接</span><br><span class=\"line\">ln -s /usr/local/python3/bin/django-admin /usr/local/bin/django-admin</span><br></pre></td></tr></table></figure>\n\n<p>// 出现错误：SQLite 3.8.3 or later is required<br>解决方法1：给django降级</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">卸载django:   pip3 uninstall django</span><br><span class=\"line\">安装低版本：   pip3 install django==2.1.8</span><br></pre></td></tr></table></figure>\n\n<p>解决方法2：升级SQLite</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看版本</span><br><span class=\"line\">sqlite3 --version</span><br></pre></td></tr></table></figure>\n\n<p>还是嫌麻烦选择降级，降级后又出现错误：<code>django.db.utils.NotSupportedError: URIs not supported</code></p>\n<p>。。。。。。还是老老实实升级吧</p>\n<p>参考地址：<a href=\"https://blog.csdn.net/qq_39969226/article/details/92218635\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_39969226/article/details/92218635</a></p>\n<h1 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git -y</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h1><h2 id=\"1、查看是否安装了MySQL\"><a href=\"#1、查看是否安装了MySQL\" class=\"headerlink\" title=\"1、查看是否安装了MySQL\"></a>1、查看是否安装了MySQL</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、删除原来的数据库\"><a href=\"#2、删除原来的数据库\" class=\"headerlink\" title=\"2、删除原来的数据库\"></a>2、删除原来的数据库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -e   mysql; // 一般删除，如果提示依赖的其他文件，则不能删除</span><br><span class=\"line\">rpm -e  --nodeps mysql; // 强力删除，如果有其他依赖文件，则可以对其进行强力删除</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、mysql安装\"><a href=\"#3、mysql安装\" class=\"headerlink\" title=\"3、mysql安装\"></a>3、mysql安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将mysql,mysql-server,mysql-devel都安装好</span><br><span class=\"line\">yum install -y mysql-server mysql mysql-devel</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、数据库安装成功之后，查看mysql-server的命令\"><a href=\"#4、数据库安装成功之后，查看mysql-server的命令\" class=\"headerlink\" title=\"4、数据库安装成功之后，查看mysql-server的命令\"></a>4、数据库安装成功之后，查看mysql-server的命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm  -qi mysql-server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、启动mysql服务\"><a href=\"#5、启动mysql服务\" class=\"headerlink\" title=\"5、启动mysql服务\"></a>5、启动mysql服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MySql相关命令\"><a href=\"#MySql相关命令\" class=\"headerlink\" title=\"MySql相关命令\"></a>MySql相关命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看mysql数据库服务是否设置成开机自己启动</span><br><span class=\"line\">chkconfig --list  | grep mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置mysql数据库服务开机自动启动</span><br><span class=\"line\">chkconfig  mysqld on</span><br><span class=\"line\"></span><br><span class=\"line\">// 给root账号设置密码为 root</span><br><span class=\"line\">mysqladmin -u root  password 'root';</span><br><span class=\"line\"></span><br><span class=\"line\">// 登录数据库</span><br><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CentOS6-部署Django-Nginx-uwsgi\"><a href=\"#CentOS6-部署Django-Nginx-uwsgi\" class=\"headerlink\" title=\"CentOS6 部署Django+Nginx+uwsgi\"></a>CentOS6 部署Django+Nginx+uwsgi</h2><p>参考：<a href=\"https://www.cnblogs.com/Black-rainbow/articles/9455927.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Black-rainbow/articles/9455927.html</a><br>     <a href=\"https://www.cnblogs.com/khstudy/p/11102633.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/khstudy/p/11102633.html</a></p>\n"},{"_content":"# Mac Vim配置及插件\n\n## 1 macOS（Linux）包管理器 `Homebrew`\n\n安装命令\n\n```brew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\n```\n\n## 2 安装vim\n\n```brew\nbrew install wget\n```\n\n## 3 建立并编辑配置文件\n\n```brew\ncd ~\ntouch .vimrc\nvim .vimrc\n```\n\n编辑配置文件为：\n\n```vim\n\" 输入:make编译并运行\nset makeprg=clear;gcc\\ %\\ &&\\ ./a.out\n\n\" 当前行高亮\nau WinLeave * set nocursorline nocursorcolumn\nau WinEnter * set cursorline\nset cursorline\n\ncolorscheme default       \" 颜色主题\nsyntax enable             \" 启用语法分析着色\nset tabstop=4             \" 设定Tab表示的空格数\nset softtabstop=4         \" 设定输入Tab表示的空格数\nset expandtab             \" 将Tab视为若干空格\nset backspace=2           \" 设置退格键可用\nset number                \" 显示行号\nset showcmd               \" 右下角显示待补全命令\nset hlsearch              \" 搜索字符串时高亮所有结果,:nohlsearch取消高亮\n```\n\n`:wq` 保存退出\n\n## 4 安装Vundle（Vim 插件管理器）\n\n```git\ngit clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n\n// 编辑文件\nvim .vimrc\n```\n\n在配置文件开头添加如下配置：\n\n```vim\n\"---START OF VUNDLE---\nset nocompatible\nfiletype off\n\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\nPlugin 'VundleVim/Vundle.vim'\n\" Plugins start\n\n\" Plugins end\ncall vundle#end()\nfiletype plugin indent on\n\" ---END OF VUNDLE---\n```\n\n## 5 Vundle安装插件\n\n在配置文件 \"Plugins start 和 end 注释之间加入：\n\n```vim\nPlugin '[插件名]'\n\n:wq\nvim .vimrc\n:PluginInstall\n```\n\n## 6 代码自动补全YouCompleteMe安装\n\n```brew\nbrew install cmake\n```\n\n方法一 使用Vundle安装\n\n然后在 `/.vimrc`文件中加入\n\n```vim\nPlugin 'Valloric/YouCompleteMe',{'do':'python3 install.py'}\n\n// Go support\nPlugin 'Valloric/YouCompleteMe',{'do':'python3 install.py --go-completer'}\n// 全部安装\nPlugin 'Valloric/YouCompleteMe',{'do':'python3 install.py --all'}\n```\n\n然后执行`:PluginInstall`，自动安装\n\n**注**： `https://www.jianshu.com/p/edc4bbed92ca`\n\n方法二\n下载ycm源码包\n\n```git\ngit clone https://github.com/Valloric/YouCompleteMe.git\n\n// YouCompleteMe/目录下执行命令\ncd YouCompleteMe\npython install.py\n```\n\n","source":"_posts/vim/vim配置及插件安装.md","raw":"# Mac Vim配置及插件\n\n## 1 macOS（Linux）包管理器 `Homebrew`\n\n安装命令\n\n```brew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\n```\n\n## 2 安装vim\n\n```brew\nbrew install wget\n```\n\n## 3 建立并编辑配置文件\n\n```brew\ncd ~\ntouch .vimrc\nvim .vimrc\n```\n\n编辑配置文件为：\n\n```vim\n\" 输入:make编译并运行\nset makeprg=clear;gcc\\ %\\ &&\\ ./a.out\n\n\" 当前行高亮\nau WinLeave * set nocursorline nocursorcolumn\nau WinEnter * set cursorline\nset cursorline\n\ncolorscheme default       \" 颜色主题\nsyntax enable             \" 启用语法分析着色\nset tabstop=4             \" 设定Tab表示的空格数\nset softtabstop=4         \" 设定输入Tab表示的空格数\nset expandtab             \" 将Tab视为若干空格\nset backspace=2           \" 设置退格键可用\nset number                \" 显示行号\nset showcmd               \" 右下角显示待补全命令\nset hlsearch              \" 搜索字符串时高亮所有结果,:nohlsearch取消高亮\n```\n\n`:wq` 保存退出\n\n## 4 安装Vundle（Vim 插件管理器）\n\n```git\ngit clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n\n// 编辑文件\nvim .vimrc\n```\n\n在配置文件开头添加如下配置：\n\n```vim\n\"---START OF VUNDLE---\nset nocompatible\nfiletype off\n\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\nPlugin 'VundleVim/Vundle.vim'\n\" Plugins start\n\n\" Plugins end\ncall vundle#end()\nfiletype plugin indent on\n\" ---END OF VUNDLE---\n```\n\n## 5 Vundle安装插件\n\n在配置文件 \"Plugins start 和 end 注释之间加入：\n\n```vim\nPlugin '[插件名]'\n\n:wq\nvim .vimrc\n:PluginInstall\n```\n\n## 6 代码自动补全YouCompleteMe安装\n\n```brew\nbrew install cmake\n```\n\n方法一 使用Vundle安装\n\n然后在 `/.vimrc`文件中加入\n\n```vim\nPlugin 'Valloric/YouCompleteMe',{'do':'python3 install.py'}\n\n// Go support\nPlugin 'Valloric/YouCompleteMe',{'do':'python3 install.py --go-completer'}\n// 全部安装\nPlugin 'Valloric/YouCompleteMe',{'do':'python3 install.py --all'}\n```\n\n然后执行`:PluginInstall`，自动安装\n\n**注**： `https://www.jianshu.com/p/edc4bbed92ca`\n\n方法二\n下载ycm源码包\n\n```git\ngit clone https://github.com/Valloric/YouCompleteMe.git\n\n// YouCompleteMe/目录下执行命令\ncd YouCompleteMe\npython install.py\n```\n\n","slug":"vim/vim配置及插件安装","published":1,"date":"2019-07-08T06:06:28.762Z","updated":"2019-07-10T02:07:25.485Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp370019ib366eav1qm8","content":"<h1 id=\"Mac-Vim配置及插件\"><a href=\"#Mac-Vim配置及插件\" class=\"headerlink\" title=\"Mac Vim配置及插件\"></a>Mac Vim配置及插件</h1><h2 id=\"1-macOS（Linux）包管理器-Homebrew\"><a href=\"#1-macOS（Linux）包管理器-Homebrew\" class=\"headerlink\" title=\"1 macOS（Linux）包管理器 Homebrew\"></a>1 macOS（Linux）包管理器 <code>Homebrew</code></h2><p>安装命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装vim\"><a href=\"#2-安装vim\" class=\"headerlink\" title=\"2 安装vim\"></a>2 安装vim</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install wget</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-建立并编辑配置文件\"><a href=\"#3-建立并编辑配置文件\" class=\"headerlink\" title=\"3 建立并编辑配置文件\"></a>3 建立并编辑配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">touch .vimrc</span><br><span class=\"line\">vim .vimrc</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置文件为：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">\" 输入:make编译并运行</span></span><br><span class=\"line\">set makeprg=clear;gcc\\ %\\ &amp;&amp;\\ ./a.out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 当前行高亮</span></span><br><span class=\"line\"><span class=\"keyword\">au</span> WinLeave * <span class=\"keyword\">set</span> nocursorline nocursorcolumn</span><br><span class=\"line\"><span class=\"keyword\">au</span> WinEnter * <span class=\"keyword\">set</span> cursorline</span><br><span class=\"line\"><span class=\"keyword\">set</span> cursorline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">colorscheme</span> default       <span class=\"comment\">\" 颜色主题</span></span><br><span class=\"line\"><span class=\"keyword\">syntax</span> enable             <span class=\"comment\">\" 启用语法分析着色</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> tabstop=<span class=\"number\">4</span>             <span class=\"comment\">\" 设定Tab表示的空格数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> softtabstop=<span class=\"number\">4</span>         <span class=\"comment\">\" 设定输入Tab表示的空格数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> expandtab             <span class=\"comment\">\" 将Tab视为若干空格</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> backspace=<span class=\"number\">2</span>           <span class=\"comment\">\" 设置退格键可用</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">number</span>                <span class=\"comment\">\" 显示行号</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> showcmd               <span class=\"comment\">\" 右下角显示待补全命令</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hlsearch              <span class=\"comment\">\" 搜索字符串时高亮所有结果,:nohlsearch取消高亮</span></span><br></pre></td></tr></table></figure>\n\n<p><code>:wq</code> 保存退出</p>\n<h2 id=\"4-安装Vundle（Vim-插件管理器）\"><a href=\"#4-安装Vundle（Vim-插件管理器）\" class=\"headerlink\" title=\"4 安装Vundle（Vim 插件管理器）\"></a>4 安装Vundle（Vim 插件管理器）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br><span class=\"line\"></span><br><span class=\"line\">// 编辑文件</span><br><span class=\"line\">vim .vimrc</span><br></pre></td></tr></table></figure>\n\n<p>在配置文件开头添加如下配置：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">\"---START OF VUNDLE---</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> nocompatible</span><br><span class=\"line\"><span class=\"keyword\">filetype</span> off</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> rtp+=~/.<span class=\"keyword\">vim</span>/bundle/Vundle.<span class=\"keyword\">vim</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> vundle#begin()</span><br><span class=\"line\">Plugin <span class=\"string\">'VundleVim/Vundle.vim'</span></span><br><span class=\"line\"><span class=\"comment\">\" Plugins start</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Plugins end</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> vundle#end()</span><br><span class=\"line\"><span class=\"keyword\">filetype</span> plugin <span class=\"built_in\">indent</span> <span class=\"keyword\">on</span></span><br><span class=\"line\"><span class=\"comment\">\" ---END OF VUNDLE---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-Vundle安装插件\"><a href=\"#5-Vundle安装插件\" class=\"headerlink\" title=\"5 Vundle安装插件\"></a>5 Vundle安装插件</h2><p>在配置文件 “Plugins start 和 end 注释之间加入：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugin <span class=\"string\">'[插件名]'</span></span><br><span class=\"line\"></span><br><span class=\"line\">:<span class=\"keyword\">wq</span></span><br><span class=\"line\"><span class=\"keyword\">vim</span> .vimrc</span><br><span class=\"line\">:PluginInstall</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-代码自动补全YouCompleteMe安装\"><a href=\"#6-代码自动补全YouCompleteMe安装\" class=\"headerlink\" title=\"6 代码自动补全YouCompleteMe安装\"></a>6 代码自动补全YouCompleteMe安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install cmake</span><br></pre></td></tr></table></figure>\n\n<p>方法一 使用Vundle安装</p>\n<p>然后在 <code>/.vimrc</code>文件中加入</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugin <span class=\"string\">'Valloric/YouCompleteMe'</span>,&#123;<span class=\"string\">'do'</span>:<span class=\"string\">'python3 install.py'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Go support</span><br><span class=\"line\">Plugin <span class=\"string\">'Valloric/YouCompleteMe'</span>,&#123;<span class=\"string\">'do'</span>:<span class=\"string\">'python3 install.py --go-completer'</span>&#125;</span><br><span class=\"line\">// 全部安装</span><br><span class=\"line\">Plugin <span class=\"string\">'Valloric/YouCompleteMe'</span>,&#123;<span class=\"string\">'do'</span>:<span class=\"string\">'python3 install.py --all'</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后执行<code>:PluginInstall</code>，自动安装</p>\n<p><strong>注</strong>： <code>https://www.jianshu.com/p/edc4bbed92ca</code></p>\n<p>方法二<br>下载ycm源码包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Valloric/YouCompleteMe.git</span><br><span class=\"line\"></span><br><span class=\"line\">// YouCompleteMe/目录下执行命令</span><br><span class=\"line\">cd YouCompleteMe</span><br><span class=\"line\">python install.py</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mac-Vim配置及插件\"><a href=\"#Mac-Vim配置及插件\" class=\"headerlink\" title=\"Mac Vim配置及插件\"></a>Mac Vim配置及插件</h1><h2 id=\"1-macOS（Linux）包管理器-Homebrew\"><a href=\"#1-macOS（Linux）包管理器-Homebrew\" class=\"headerlink\" title=\"1 macOS（Linux）包管理器 Homebrew\"></a>1 macOS（Linux）包管理器 <code>Homebrew</code></h2><p>安装命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装vim\"><a href=\"#2-安装vim\" class=\"headerlink\" title=\"2 安装vim\"></a>2 安装vim</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install wget</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-建立并编辑配置文件\"><a href=\"#3-建立并编辑配置文件\" class=\"headerlink\" title=\"3 建立并编辑配置文件\"></a>3 建立并编辑配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">touch .vimrc</span><br><span class=\"line\">vim .vimrc</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置文件为：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">\" 输入:make编译并运行</span></span><br><span class=\"line\">set makeprg=clear;gcc\\ %\\ &amp;&amp;\\ ./a.out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 当前行高亮</span></span><br><span class=\"line\"><span class=\"keyword\">au</span> WinLeave * <span class=\"keyword\">set</span> nocursorline nocursorcolumn</span><br><span class=\"line\"><span class=\"keyword\">au</span> WinEnter * <span class=\"keyword\">set</span> cursorline</span><br><span class=\"line\"><span class=\"keyword\">set</span> cursorline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">colorscheme</span> default       <span class=\"comment\">\" 颜色主题</span></span><br><span class=\"line\"><span class=\"keyword\">syntax</span> enable             <span class=\"comment\">\" 启用语法分析着色</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> tabstop=<span class=\"number\">4</span>             <span class=\"comment\">\" 设定Tab表示的空格数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> softtabstop=<span class=\"number\">4</span>         <span class=\"comment\">\" 设定输入Tab表示的空格数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> expandtab             <span class=\"comment\">\" 将Tab视为若干空格</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> backspace=<span class=\"number\">2</span>           <span class=\"comment\">\" 设置退格键可用</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">number</span>                <span class=\"comment\">\" 显示行号</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> showcmd               <span class=\"comment\">\" 右下角显示待补全命令</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hlsearch              <span class=\"comment\">\" 搜索字符串时高亮所有结果,:nohlsearch取消高亮</span></span><br></pre></td></tr></table></figure>\n\n<p><code>:wq</code> 保存退出</p>\n<h2 id=\"4-安装Vundle（Vim-插件管理器）\"><a href=\"#4-安装Vundle（Vim-插件管理器）\" class=\"headerlink\" title=\"4 安装Vundle（Vim 插件管理器）\"></a>4 安装Vundle（Vim 插件管理器）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br><span class=\"line\"></span><br><span class=\"line\">// 编辑文件</span><br><span class=\"line\">vim .vimrc</span><br></pre></td></tr></table></figure>\n\n<p>在配置文件开头添加如下配置：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">\"---START OF VUNDLE---</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> nocompatible</span><br><span class=\"line\"><span class=\"keyword\">filetype</span> off</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> rtp+=~/.<span class=\"keyword\">vim</span>/bundle/Vundle.<span class=\"keyword\">vim</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> vundle#begin()</span><br><span class=\"line\">Plugin <span class=\"string\">'VundleVim/Vundle.vim'</span></span><br><span class=\"line\"><span class=\"comment\">\" Plugins start</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Plugins end</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> vundle#end()</span><br><span class=\"line\"><span class=\"keyword\">filetype</span> plugin <span class=\"built_in\">indent</span> <span class=\"keyword\">on</span></span><br><span class=\"line\"><span class=\"comment\">\" ---END OF VUNDLE---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-Vundle安装插件\"><a href=\"#5-Vundle安装插件\" class=\"headerlink\" title=\"5 Vundle安装插件\"></a>5 Vundle安装插件</h2><p>在配置文件 “Plugins start 和 end 注释之间加入：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugin <span class=\"string\">'[插件名]'</span></span><br><span class=\"line\"></span><br><span class=\"line\">:<span class=\"keyword\">wq</span></span><br><span class=\"line\"><span class=\"keyword\">vim</span> .vimrc</span><br><span class=\"line\">:PluginInstall</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-代码自动补全YouCompleteMe安装\"><a href=\"#6-代码自动补全YouCompleteMe安装\" class=\"headerlink\" title=\"6 代码自动补全YouCompleteMe安装\"></a>6 代码自动补全YouCompleteMe安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install cmake</span><br></pre></td></tr></table></figure>\n\n<p>方法一 使用Vundle安装</p>\n<p>然后在 <code>/.vimrc</code>文件中加入</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugin <span class=\"string\">'Valloric/YouCompleteMe'</span>,&#123;<span class=\"string\">'do'</span>:<span class=\"string\">'python3 install.py'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Go support</span><br><span class=\"line\">Plugin <span class=\"string\">'Valloric/YouCompleteMe'</span>,&#123;<span class=\"string\">'do'</span>:<span class=\"string\">'python3 install.py --go-completer'</span>&#125;</span><br><span class=\"line\">// 全部安装</span><br><span class=\"line\">Plugin <span class=\"string\">'Valloric/YouCompleteMe'</span>,&#123;<span class=\"string\">'do'</span>:<span class=\"string\">'python3 install.py --all'</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后执行<code>:PluginInstall</code>，自动安装</p>\n<p><strong>注</strong>： <code>https://www.jianshu.com/p/edc4bbed92ca</code></p>\n<p>方法二<br>下载ycm源码包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Valloric/YouCompleteMe.git</span><br><span class=\"line\"></span><br><span class=\"line\">// YouCompleteMe/目录下执行命令</span><br><span class=\"line\">cd YouCompleteMe</span><br><span class=\"line\">python install.py</span><br></pre></td></tr></table></figure>\n\n"},{"_content":"\nmysql连接错误\n\n1、Authentication type： (mysql8.0.0以上版本)\n\n用户的 Authentication type 默认为 caching_sha2_password，导致数据库连接错误，抛出如下异常：\nIlluminate\\Database\\QueryException : SQLSTATE[HY000] [2054] The server requested authentication method unknown to the client\n解决方案：修改密码认证方式\nALTER USER 'youusername'@'localhost' IDENTIFIED WITH mysql_native_password BY 'yourpassword';\n","source":"_posts/mysql/mysql.md","raw":"\nmysql连接错误\n\n1、Authentication type： (mysql8.0.0以上版本)\n\n用户的 Authentication type 默认为 caching_sha2_password，导致数据库连接错误，抛出如下异常：\nIlluminate\\Database\\QueryException : SQLSTATE[HY000] [2054] The server requested authentication method unknown to the client\n解决方案：修改密码认证方式\nALTER USER 'youusername'@'localhost' IDENTIFIED WITH mysql_native_password BY 'yourpassword';\n","slug":"mysql/mysql","published":1,"date":"2019-07-08T06:06:28.762Z","updated":"2019-07-08T06:06:28.762Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp39001cib36j9pq8j2u","content":"<p>mysql连接错误</p>\n<p>1、Authentication type： (mysql8.0.0以上版本)</p>\n<p>用户的 Authentication type 默认为 caching_sha2_password，导致数据库连接错误，抛出如下异常：<br>Illuminate\\Database\\QueryException : SQLSTATE[HY000] [2054] The server requested authentication method unknown to the client<br>解决方案：修改密码认证方式<br>ALTER USER ‘youusername’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘yourpassword’;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>mysql连接错误</p>\n<p>1、Authentication type： (mysql8.0.0以上版本)</p>\n<p>用户的 Authentication type 默认为 caching_sha2_password，导致数据库连接错误，抛出如下异常：<br>Illuminate\\Database\\QueryException : SQLSTATE[HY000] [2054] The server requested authentication method unknown to the client<br>解决方案：修改密码认证方式<br>ALTER USER ‘youusername’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘yourpassword’;</p>\n"},{"title":"Laravel基础学习","date":"2020-03-09T09:59:11.000Z","_content":"\n```php\n// 1.创建模型\nphp artisan make:model Categories\n// 创建模型并生成迁移\nphp artisan make:model Categories -m\n\n// 2.生成迁移\nphp artisan make:migration create_categories_table\n\n// 3.运行数据库迁移\nphp artisan migrate\n\n// admin\n// 4.创建一个对应模型的路由器\nphp artisan admin:make CategoryController --model=App\\\\Category\n\n// 5.将以下路由添加到 app/Admin/routes.php:\n$router->resource('categories', CategoryController::class);\n\n```\n\n## 1、Eloquent ORM\n\n> 提供一个漂亮、简洁的 ActiveRecord 实现来和数据库交互\n\n### 创建Eloquent 模型\n\n所有的 `Eloquent` 模型都继承至 `Illuminate\\Database\\Eloquent\\Model` 类，创建的模型类默认在app目录下，可指定到app目录下的Models目录下，\n\n```php\n// app/Flight\nphp artisan make:model Flight\n\n// app/Models/Flight\nphp artisan make:model Models/Flight\n```\n\n如果要在生成模型的时候生成 数据库迁移 ，可以使用 `--migration` 或 `-m` 选项：\n\n```php\nphp artisan make:model Flight --migration\n\nphp artisan make:model Flight -m\n```\n\n### 数据表\n\n```php\n<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    // 数据库连接 模型指定一个不同的连接\n    protected $connection = 'connection-name';\n\n    // 与模型关联的表名，默认：flights\n    protected $table = 'my_flights';\n\n    // 主键，默认：id\n    protected $primaryKey = 'flight_id';\n\n    // 指示模型主键是否递增，默认：一个自增的整数值\n    public $incrementing = false;\n\n    // 自动递增ID的“类型”\n    protected $keyType = 'string';\n\n    // 指示是否自动维护时间戳， created_at 和 updated_at\n    public $timestamps = false;\n\n    // 自定义时间戳的格式\n    protected $dateFormat = 'U';\n\n    // 自定义存储时间戳的字段名\n    const CREATED_AT = 'creation_date';\n    const UPDATED_AT = 'last_update';\n\n    // 可以被批量赋值的属性\n    protected $fillable = ['name', 'url'];\n    // 不可批量赋值的属性\n    protected $guarded = ['price'];\n\n    // 默认属性值\n    protected $attributes = [\n        'delayed' => false,\n    ];\n}\n```\n\n### 模型检索(Eloquent 模型 查询构造器 )\n\n```php\n<?php\n\n// 所有数据\n$flights = App\\Flight::all();\n\nforeach ($flights as $flight) {\n    echo $flight->name;\n}\n\n// 附加约束\n$flights = App\\Flight::where('active', 1)\n               ->orderBy('name', 'desc')\n               ->take(10)\n               ->get();\n\n// 重新加载模型\n// fresh 和 refresh 方法重新加载模型\n// fresh现有的模型实例不受影响\n$flight = App\\Flight::where('number', 'FR 900')->first();\n$freshFlight = $flight->fresh();\n\n// refresh新数据重新赋值现有模型\n$flight = App\\Flight::where('number', 'FR 900')->first();\n$flight->number = 'FR 456';\n$flight->refresh();\n$flight->number; // \"FR 900\"\n\n```\n\n一些问题\n\n[laravel 图片上传与前端显示问题](https://www.cnblogs.com/linqingvoe/p/11253859.html)\n\n执行命令：\n\n```php\nphp artisan storage:link\n```\n\n","source":"_posts/php/laraval/Laravel基础学习.md","raw":"---\ntitle: Laravel基础学习\ndate: 2020-03-09 17:59:11\ntags:\ncategories:\n---\n\n```php\n// 1.创建模型\nphp artisan make:model Categories\n// 创建模型并生成迁移\nphp artisan make:model Categories -m\n\n// 2.生成迁移\nphp artisan make:migration create_categories_table\n\n// 3.运行数据库迁移\nphp artisan migrate\n\n// admin\n// 4.创建一个对应模型的路由器\nphp artisan admin:make CategoryController --model=App\\\\Category\n\n// 5.将以下路由添加到 app/Admin/routes.php:\n$router->resource('categories', CategoryController::class);\n\n```\n\n## 1、Eloquent ORM\n\n> 提供一个漂亮、简洁的 ActiveRecord 实现来和数据库交互\n\n### 创建Eloquent 模型\n\n所有的 `Eloquent` 模型都继承至 `Illuminate\\Database\\Eloquent\\Model` 类，创建的模型类默认在app目录下，可指定到app目录下的Models目录下，\n\n```php\n// app/Flight\nphp artisan make:model Flight\n\n// app/Models/Flight\nphp artisan make:model Models/Flight\n```\n\n如果要在生成模型的时候生成 数据库迁移 ，可以使用 `--migration` 或 `-m` 选项：\n\n```php\nphp artisan make:model Flight --migration\n\nphp artisan make:model Flight -m\n```\n\n### 数据表\n\n```php\n<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    // 数据库连接 模型指定一个不同的连接\n    protected $connection = 'connection-name';\n\n    // 与模型关联的表名，默认：flights\n    protected $table = 'my_flights';\n\n    // 主键，默认：id\n    protected $primaryKey = 'flight_id';\n\n    // 指示模型主键是否递增，默认：一个自增的整数值\n    public $incrementing = false;\n\n    // 自动递增ID的“类型”\n    protected $keyType = 'string';\n\n    // 指示是否自动维护时间戳， created_at 和 updated_at\n    public $timestamps = false;\n\n    // 自定义时间戳的格式\n    protected $dateFormat = 'U';\n\n    // 自定义存储时间戳的字段名\n    const CREATED_AT = 'creation_date';\n    const UPDATED_AT = 'last_update';\n\n    // 可以被批量赋值的属性\n    protected $fillable = ['name', 'url'];\n    // 不可批量赋值的属性\n    protected $guarded = ['price'];\n\n    // 默认属性值\n    protected $attributes = [\n        'delayed' => false,\n    ];\n}\n```\n\n### 模型检索(Eloquent 模型 查询构造器 )\n\n```php\n<?php\n\n// 所有数据\n$flights = App\\Flight::all();\n\nforeach ($flights as $flight) {\n    echo $flight->name;\n}\n\n// 附加约束\n$flights = App\\Flight::where('active', 1)\n               ->orderBy('name', 'desc')\n               ->take(10)\n               ->get();\n\n// 重新加载模型\n// fresh 和 refresh 方法重新加载模型\n// fresh现有的模型实例不受影响\n$flight = App\\Flight::where('number', 'FR 900')->first();\n$freshFlight = $flight->fresh();\n\n// refresh新数据重新赋值现有模型\n$flight = App\\Flight::where('number', 'FR 900')->first();\n$flight->number = 'FR 456';\n$flight->refresh();\n$flight->number; // \"FR 900\"\n\n```\n\n一些问题\n\n[laravel 图片上传与前端显示问题](https://www.cnblogs.com/linqingvoe/p/11253859.html)\n\n执行命令：\n\n```php\nphp artisan storage:link\n```\n\n","slug":"php/laraval/Laravel基础学习","published":1,"updated":"2020-03-23T16:22:30.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp3h001pib36cw1ky1bu","content":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.创建模型</span></span><br><span class=\"line\">php artisan make:model Categories</span><br><span class=\"line\"><span class=\"comment\">// 创建模型并生成迁移</span></span><br><span class=\"line\">php artisan make:model Categories -m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.生成迁移</span></span><br><span class=\"line\">php artisan make:migration create_categories_table</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.运行数据库迁移</span></span><br><span class=\"line\">php artisan migrate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// admin</span></span><br><span class=\"line\"><span class=\"comment\">// 4.创建一个对应模型的路由器</span></span><br><span class=\"line\">php artisan admin:make CategoryController --model=App\\\\Category</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5.将以下路由添加到 app/Admin/routes.php:</span></span><br><span class=\"line\">$router-&gt;resource(<span class=\"string\">'categories'</span>, CategoryController::class);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1、Eloquent-ORM\"><a href=\"#1、Eloquent-ORM\" class=\"headerlink\" title=\"1、Eloquent ORM\"></a>1、Eloquent ORM</h2><blockquote>\n<p>提供一个漂亮、简洁的 ActiveRecord 实现来和数据库交互</p>\n</blockquote>\n<h3 id=\"创建Eloquent-模型\"><a href=\"#创建Eloquent-模型\" class=\"headerlink\" title=\"创建Eloquent 模型\"></a>创建Eloquent 模型</h3><p>所有的 <code>Eloquent</code> 模型都继承至 <code>Illuminate\\Database\\Eloquent\\Model</code> 类，创建的模型类默认在app目录下，可指定到app目录下的Models目录下，</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app/Flight</span></span><br><span class=\"line\">php artisan make:model Flight</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app/Models/Flight</span></span><br><span class=\"line\">php artisan make:model Models/Flight</span><br></pre></td></tr></table></figure>\n\n<p>如果要在生成模型的时候生成 数据库迁移 ，可以使用 <code>--migration</code> 或 <code>-m</code> 选项：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:model Flight --migration</span><br><span class=\"line\"></span><br><span class=\"line\">php artisan make:model Flight -m</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据表\"><a href=\"#数据表\" class=\"headerlink\" title=\"数据表\"></a>数据表</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Database</span>\\<span class=\"title\">Eloquent</span>\\<span class=\"title\">Model</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数据库连接 模型指定一个不同的连接</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $connection = <span class=\"string\">'connection-name'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 与模型关联的表名，默认：flights</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $table = <span class=\"string\">'my_flights'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 主键，默认：id</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $primaryKey = <span class=\"string\">'flight_id'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指示模型主键是否递增，默认：一个自增的整数值</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $incrementing = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自动递增ID的“类型”</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $keyType = <span class=\"string\">'string'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指示是否自动维护时间戳， created_at 和 updated_at</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $timestamps = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自定义时间戳的格式</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $dateFormat = <span class=\"string\">'U'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自定义存储时间戳的字段名</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> CREATED_AT = <span class=\"string\">'creation_date'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> UPDATED_AT = <span class=\"string\">'last_update'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 可以被批量赋值的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $fillable = [<span class=\"string\">'name'</span>, <span class=\"string\">'url'</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 不可批量赋值的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $guarded = [<span class=\"string\">'price'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 默认属性值</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $attributes = [</span><br><span class=\"line\">        <span class=\"string\">'delayed'</span> =&gt; <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模型检索-Eloquent-模型-查询构造器\"><a href=\"#模型检索-Eloquent-模型-查询构造器\" class=\"headerlink\" title=\"模型检索(Eloquent 模型 查询构造器 )\"></a>模型检索(Eloquent 模型 查询构造器 )</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有数据</span></span><br><span class=\"line\">$flights = App\\Flight::all();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($flights <span class=\"keyword\">as</span> $flight) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $flight-&gt;name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 附加约束</span></span><br><span class=\"line\">$flights = App\\Flight::where(<span class=\"string\">'active'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">               -&gt;orderBy(<span class=\"string\">'name'</span>, <span class=\"string\">'desc'</span>)</span><br><span class=\"line\">               -&gt;take(<span class=\"number\">10</span>)</span><br><span class=\"line\">               -&gt;get();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重新加载模型</span></span><br><span class=\"line\"><span class=\"comment\">// fresh 和 refresh 方法重新加载模型</span></span><br><span class=\"line\"><span class=\"comment\">// fresh现有的模型实例不受影响</span></span><br><span class=\"line\">$flight = App\\Flight::where(<span class=\"string\">'number'</span>, <span class=\"string\">'FR 900'</span>)-&gt;first();</span><br><span class=\"line\">$freshFlight = $flight-&gt;fresh();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// refresh新数据重新赋值现有模型</span></span><br><span class=\"line\">$flight = App\\Flight::where(<span class=\"string\">'number'</span>, <span class=\"string\">'FR 900'</span>)-&gt;first();</span><br><span class=\"line\">$flight-&gt;number = <span class=\"string\">'FR 456'</span>;</span><br><span class=\"line\">$flight-&gt;refresh();</span><br><span class=\"line\">$flight-&gt;number; <span class=\"comment\">// \"FR 900\"</span></span><br></pre></td></tr></table></figure>\n\n<p>一些问题</p>\n<p><a href=\"https://www.cnblogs.com/linqingvoe/p/11253859.html\" target=\"_blank\" rel=\"noopener\">laravel 图片上传与前端显示问题</a></p>\n<p>执行命令：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan storage:link</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.创建模型</span></span><br><span class=\"line\">php artisan make:model Categories</span><br><span class=\"line\"><span class=\"comment\">// 创建模型并生成迁移</span></span><br><span class=\"line\">php artisan make:model Categories -m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.生成迁移</span></span><br><span class=\"line\">php artisan make:migration create_categories_table</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.运行数据库迁移</span></span><br><span class=\"line\">php artisan migrate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// admin</span></span><br><span class=\"line\"><span class=\"comment\">// 4.创建一个对应模型的路由器</span></span><br><span class=\"line\">php artisan admin:make CategoryController --model=App\\\\Category</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5.将以下路由添加到 app/Admin/routes.php:</span></span><br><span class=\"line\">$router-&gt;resource(<span class=\"string\">'categories'</span>, CategoryController::class);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1、Eloquent-ORM\"><a href=\"#1、Eloquent-ORM\" class=\"headerlink\" title=\"1、Eloquent ORM\"></a>1、Eloquent ORM</h2><blockquote>\n<p>提供一个漂亮、简洁的 ActiveRecord 实现来和数据库交互</p>\n</blockquote>\n<h3 id=\"创建Eloquent-模型\"><a href=\"#创建Eloquent-模型\" class=\"headerlink\" title=\"创建Eloquent 模型\"></a>创建Eloquent 模型</h3><p>所有的 <code>Eloquent</code> 模型都继承至 <code>Illuminate\\Database\\Eloquent\\Model</code> 类，创建的模型类默认在app目录下，可指定到app目录下的Models目录下，</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app/Flight</span></span><br><span class=\"line\">php artisan make:model Flight</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app/Models/Flight</span></span><br><span class=\"line\">php artisan make:model Models/Flight</span><br></pre></td></tr></table></figure>\n\n<p>如果要在生成模型的时候生成 数据库迁移 ，可以使用 <code>--migration</code> 或 <code>-m</code> 选项：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:model Flight --migration</span><br><span class=\"line\"></span><br><span class=\"line\">php artisan make:model Flight -m</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据表\"><a href=\"#数据表\" class=\"headerlink\" title=\"数据表\"></a>数据表</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Database</span>\\<span class=\"title\">Eloquent</span>\\<span class=\"title\">Model</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数据库连接 模型指定一个不同的连接</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $connection = <span class=\"string\">'connection-name'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 与模型关联的表名，默认：flights</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $table = <span class=\"string\">'my_flights'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 主键，默认：id</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $primaryKey = <span class=\"string\">'flight_id'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指示模型主键是否递增，默认：一个自增的整数值</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $incrementing = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自动递增ID的“类型”</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $keyType = <span class=\"string\">'string'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指示是否自动维护时间戳， created_at 和 updated_at</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $timestamps = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自定义时间戳的格式</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $dateFormat = <span class=\"string\">'U'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自定义存储时间戳的字段名</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> CREATED_AT = <span class=\"string\">'creation_date'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> UPDATED_AT = <span class=\"string\">'last_update'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 可以被批量赋值的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $fillable = [<span class=\"string\">'name'</span>, <span class=\"string\">'url'</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 不可批量赋值的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $guarded = [<span class=\"string\">'price'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 默认属性值</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $attributes = [</span><br><span class=\"line\">        <span class=\"string\">'delayed'</span> =&gt; <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模型检索-Eloquent-模型-查询构造器\"><a href=\"#模型检索-Eloquent-模型-查询构造器\" class=\"headerlink\" title=\"模型检索(Eloquent 模型 查询构造器 )\"></a>模型检索(Eloquent 模型 查询构造器 )</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有数据</span></span><br><span class=\"line\">$flights = App\\Flight::all();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($flights <span class=\"keyword\">as</span> $flight) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $flight-&gt;name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 附加约束</span></span><br><span class=\"line\">$flights = App\\Flight::where(<span class=\"string\">'active'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">               -&gt;orderBy(<span class=\"string\">'name'</span>, <span class=\"string\">'desc'</span>)</span><br><span class=\"line\">               -&gt;take(<span class=\"number\">10</span>)</span><br><span class=\"line\">               -&gt;get();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重新加载模型</span></span><br><span class=\"line\"><span class=\"comment\">// fresh 和 refresh 方法重新加载模型</span></span><br><span class=\"line\"><span class=\"comment\">// fresh现有的模型实例不受影响</span></span><br><span class=\"line\">$flight = App\\Flight::where(<span class=\"string\">'number'</span>, <span class=\"string\">'FR 900'</span>)-&gt;first();</span><br><span class=\"line\">$freshFlight = $flight-&gt;fresh();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// refresh新数据重新赋值现有模型</span></span><br><span class=\"line\">$flight = App\\Flight::where(<span class=\"string\">'number'</span>, <span class=\"string\">'FR 900'</span>)-&gt;first();</span><br><span class=\"line\">$flight-&gt;number = <span class=\"string\">'FR 456'</span>;</span><br><span class=\"line\">$flight-&gt;refresh();</span><br><span class=\"line\">$flight-&gt;number; <span class=\"comment\">// \"FR 900\"</span></span><br></pre></td></tr></table></figure>\n\n<p>一些问题</p>\n<p><a href=\"https://www.cnblogs.com/linqingvoe/p/11253859.html\" target=\"_blank\" rel=\"noopener\">laravel 图片上传与前端显示问题</a></p>\n<p>执行命令：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan storage:link</span><br></pre></td></tr></table></figure>\n\n"},{"title":"初学thinkphp5","date":"2020-03-23T09:28:39.000Z","_content":"\n## php环境的搭建\n\n使用`phpstudy`集成环境\n\n开发手册：https://www.kancloud.cn/manual/thinkphp5/118003\n\n入口为`public/index.php`\n\n如何需要隐藏`public/index.php`，则需要配置入口，有很多方法，才疏学浅，目测了一种方法\n\n* 使用`.htaccess`来实现URL重定向\n\n在根目录下创建文件`.htaccess`，`public`目录下删除`.htaccess`文件，`.htaccess`内容如下：\n\n```htaccess\n<IfModule mod_rewrite.c>\n  Options +FollowSymlinks -Multiviews\n  RewriteEngine On\n\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteRule ^(.*)$ public/index.php?/$1[QSA]\n</IfModule>\n```\n\n## 多模块\n\n命令行：https://www.kancloud.cn/manual/thinkphp5/118021\n\n默认的框架的根目录下面自带了一个`build.php`，用于自动生成的规则定义文件\n\n读取application下面的build.php作为自动生成的定义文件\n> php think build\n\n读取根目录下的build.php文件\n> php think build --config build.php\n\n* 快速生成模块\n\n> php think build --module admin\n\n* 快速生成控制器类\n\n生成index模块的Blog控制器类库文件\n> php think make:controller index/Blog\n\n> php think make:controller index\\Blog --plain\n\n* 快速生成模型类\n\n生成index模块的Blog模型类库文件\n> php think make:model index/Blog\n","source":"_posts/php/thinkphp5/初学thinkphp5.md","raw":"---\ntitle: 初学thinkphp5\ndate: 2020-03-23 17:28:39\ntags:\ncategories: php\n---\n\n## php环境的搭建\n\n使用`phpstudy`集成环境\n\n开发手册：https://www.kancloud.cn/manual/thinkphp5/118003\n\n入口为`public/index.php`\n\n如何需要隐藏`public/index.php`，则需要配置入口，有很多方法，才疏学浅，目测了一种方法\n\n* 使用`.htaccess`来实现URL重定向\n\n在根目录下创建文件`.htaccess`，`public`目录下删除`.htaccess`文件，`.htaccess`内容如下：\n\n```htaccess\n<IfModule mod_rewrite.c>\n  Options +FollowSymlinks -Multiviews\n  RewriteEngine On\n\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteRule ^(.*)$ public/index.php?/$1[QSA]\n</IfModule>\n```\n\n## 多模块\n\n命令行：https://www.kancloud.cn/manual/thinkphp5/118021\n\n默认的框架的根目录下面自带了一个`build.php`，用于自动生成的规则定义文件\n\n读取application下面的build.php作为自动生成的定义文件\n> php think build\n\n读取根目录下的build.php文件\n> php think build --config build.php\n\n* 快速生成模块\n\n> php think build --module admin\n\n* 快速生成控制器类\n\n生成index模块的Blog控制器类库文件\n> php think make:controller index/Blog\n\n> php think make:controller index\\Blog --plain\n\n* 快速生成模型类\n\n生成index模块的Blog模型类库文件\n> php think make:model index/Blog\n","slug":"php/thinkphp5/初学thinkphp5","published":1,"updated":"2020-03-23T09:59:37.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8tpsp3i001qib36xbx0ncnf","content":"<h2 id=\"php环境的搭建\"><a href=\"#php环境的搭建\" class=\"headerlink\" title=\"php环境的搭建\"></a>php环境的搭建</h2><p>使用<code>phpstudy</code>集成环境</p>\n<p>开发手册：<a href=\"https://www.kancloud.cn/manual/thinkphp5/118003\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/manual/thinkphp5/118003</a></p>\n<p>入口为<code>public/index.php</code></p>\n<p>如何需要隐藏<code>public/index.php</code>，则需要配置入口，有很多方法，才疏学浅，目测了一种方法</p>\n<ul>\n<li>使用<code>.htaccess</code>来实现URL重定向</li>\n</ul>\n<p>在根目录下创建文件<code>.htaccess</code>，<code>public</code>目录下删除<code>.htaccess</code>文件，<code>.htaccess</code>内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">  Options +FollowSymlinks -Multiviews</span><br><span class=\"line\">  RewriteEngine On</span><br><span class=\"line\"></span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class=\"line\">  RewriteRule ^(.*)$ public/index.php?/$1[QSA]</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多模块\"><a href=\"#多模块\" class=\"headerlink\" title=\"多模块\"></a>多模块</h2><p>命令行：<a href=\"https://www.kancloud.cn/manual/thinkphp5/118021\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/manual/thinkphp5/118021</a></p>\n<p>默认的框架的根目录下面自带了一个<code>build.php</code>，用于自动生成的规则定义文件</p>\n<p>读取application下面的build.php作为自动生成的定义文件</p>\n<blockquote>\n<p>php think build</p>\n</blockquote>\n<p>读取根目录下的build.php文件</p>\n<blockquote>\n<p>php think build –config build.php</p>\n</blockquote>\n<ul>\n<li>快速生成模块</li>\n</ul>\n<blockquote>\n<p>php think build –module admin</p>\n</blockquote>\n<ul>\n<li>快速生成控制器类</li>\n</ul>\n<p>生成index模块的Blog控制器类库文件</p>\n<blockquote>\n<p>php think make:controller index/Blog</p>\n</blockquote>\n<blockquote>\n<p>php think make:controller index\\Blog –plain</p>\n</blockquote>\n<ul>\n<li>快速生成模型类</li>\n</ul>\n<p>生成index模块的Blog模型类库文件</p>\n<blockquote>\n<p>php think make:model index/Blog</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"php环境的搭建\"><a href=\"#php环境的搭建\" class=\"headerlink\" title=\"php环境的搭建\"></a>php环境的搭建</h2><p>使用<code>phpstudy</code>集成环境</p>\n<p>开发手册：<a href=\"https://www.kancloud.cn/manual/thinkphp5/118003\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/manual/thinkphp5/118003</a></p>\n<p>入口为<code>public/index.php</code></p>\n<p>如何需要隐藏<code>public/index.php</code>，则需要配置入口，有很多方法，才疏学浅，目测了一种方法</p>\n<ul>\n<li>使用<code>.htaccess</code>来实现URL重定向</li>\n</ul>\n<p>在根目录下创建文件<code>.htaccess</code>，<code>public</code>目录下删除<code>.htaccess</code>文件，<code>.htaccess</code>内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">  Options +FollowSymlinks -Multiviews</span><br><span class=\"line\">  RewriteEngine On</span><br><span class=\"line\"></span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class=\"line\">  RewriteRule ^(.*)$ public/index.php?/$1[QSA]</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多模块\"><a href=\"#多模块\" class=\"headerlink\" title=\"多模块\"></a>多模块</h2><p>命令行：<a href=\"https://www.kancloud.cn/manual/thinkphp5/118021\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/manual/thinkphp5/118021</a></p>\n<p>默认的框架的根目录下面自带了一个<code>build.php</code>，用于自动生成的规则定义文件</p>\n<p>读取application下面的build.php作为自动生成的定义文件</p>\n<blockquote>\n<p>php think build</p>\n</blockquote>\n<p>读取根目录下的build.php文件</p>\n<blockquote>\n<p>php think build –config build.php</p>\n</blockquote>\n<ul>\n<li>快速生成模块</li>\n</ul>\n<blockquote>\n<p>php think build –module admin</p>\n</blockquote>\n<ul>\n<li>快速生成控制器类</li>\n</ul>\n<p>生成index模块的Blog控制器类库文件</p>\n<blockquote>\n<p>php think make:controller index/Blog</p>\n</blockquote>\n<blockquote>\n<p>php think make:controller index\\Blog –plain</p>\n</blockquote>\n<ul>\n<li>快速生成模型类</li>\n</ul>\n<p>生成index模块的Blog模型类库文件</p>\n<blockquote>\n<p>php think make:model index/Blog</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck8tpsp1m0000ib365554329s","category_id":"ck8tpsp1u0003ib36it3txirv","_id":"ck8tpsp210009ib36wkzf7xoz"},{"post_id":"ck8tpsp1s0002ib36cd6j7y3c","category_id":"ck8tpsp1z0007ib36jxo16lqk","_id":"ck8tpsp26000cib367od0scso"},{"post_id":"ck8tpsp1w0004ib36tn14a8t7","category_id":"ck8tpsp1u0003ib36it3txirv","_id":"ck8tpsp26000dib36vvvjj9lb"},{"post_id":"ck8tpsp1z0006ib368pk4ls7u","category_id":"ck8tpsp25000bib36fbdjz7a6","_id":"ck8tpsp27000fib36tkmlybil"},{"post_id":"ck8tpsp200008ib36mg6mk99t","category_id":"ck8tpsp25000bib36fbdjz7a6","_id":"ck8tpsp28000gib36bohrsgum"},{"post_id":"ck8tpsp2q000hib36oa6uz1d5","category_id":"ck8tpsp2u000jib3666dmrftd","_id":"ck8tpsp30000rib36q1w5aerj"},{"post_id":"ck8tpsp2s000iib36a78c5ssu","category_id":"ck8tpsp2u000jib3666dmrftd","_id":"ck8tpsp31000uib36ylxajxi8"},{"post_id":"ck8tpsp2v000kib36t8qizl5z","category_id":"ck8tpsp30000qib36lksremkc","_id":"ck8tpsp33000yib36k6qu2vn1"},{"post_id":"ck8tpsp2x000mib36mfp1lv0c","category_id":"ck8tpsp31000vib364qds2pcf","_id":"ck8tpsp350013ib36w0516dm4"},{"post_id":"ck8tpsp2y000oib36one4uauo","category_id":"ck8tpsp30000qib36lksremkc","_id":"ck8tpsp370017ib36x8lpq90v"},{"post_id":"ck8tpsp30000sib36ti2uam9v","category_id":"ck8tpsp31000vib364qds2pcf","_id":"ck8tpsp39001aib36bhrb2ddx"},{"post_id":"ck8tpsp31000tib36ygxvnozi","category_id":"ck8tpsp360016ib365jbekd80","_id":"ck8tpsp3a001dib36a7lveqka"},{"post_id":"ck8tpsp32000wib366fgcbx1d","category_id":"ck8tpsp39001bib365vpoo34w","_id":"ck8tpsp3a001gib36rgz4q8tb"},{"post_id":"ck8tpsp33000xib36r7a877t8","category_id":"ck8tpsp39001bib365vpoo34w","_id":"ck8tpsp3b001hib36v4asp6ek"},{"post_id":"ck8tpsp340010ib36p91mpe65","category_id":"ck8tpsp3a001fib36ysh5jvoa","_id":"ck8tpsp3b001jib36ui2aqn2k"},{"post_id":"ck8tpsp340011ib36j883qm01","category_id":"ck8tpsp3b001iib367cboa81u","_id":"ck8tpsp3c001mib3658pfm4d2"},{"post_id":"ck8tpsp360015ib36rfowsnbf","category_id":"ck8tpsp360016ib365jbekd80","_id":"ck8tpsp3c001nib360th6ff73"},{"post_id":"ck8tpsp370018ib36orpjbjo3","category_id":"ck8tpsp3c001lib36noe3jath","_id":"ck8tpsp3c001oib36n5xgzjyx"},{"post_id":"ck8tpsp3i001qib36xbx0ncnf","category_id":"ck8tpsp3j001rib36kz5zlos3","_id":"ck8tpsp3j001sib36t9zzyvb2"}],"PostTag":[],"Tag":[]}}